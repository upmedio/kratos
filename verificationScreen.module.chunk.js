webpackJsonp(["verificationScreen.module"],{

/***/ "../../../../../src/app/bigtoken/verificationForm/data-model.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.titles = ["Mr.", "Mrs.", "Miss", "Dr.", "Ms.", "Madam", "Prof."];
exports.paymentModes = ["TELEGRAPHIC TRANSFER", "CHEQUE (LOCAL)", "CHEQUE (FOREIGN)", "VIRTUAL CURRENCY", "CASH"];
// identification types for the 'individual' stepper flow layer
// not to be confused with document types used in the 'uploadDocument' stepper flow layer
exports.identificationTypes = [
    "NRIC",
    "FIN",
    "EMPLOYMENT PASS",
    "S PASS",
    "WORK PERMIT",
    "DEPENDENT PASS",
    "PASSPORT",
    "FOREIGN IDENTITY CARD",
    "DRIVING LICENSE",
    "STUDENT PASS",
    "VISITOR PASS"
];
exports.countries = [
    "ABKHAZIA",
    "AFGHANISTAN",
    "ALAND ISLANDS",
    "ALBANIA",
    "ALGERIA",
    "AMERICAN SAMOA",
    "ANDORRA",
    "ANGOLA",
    "ANGUILLA",
    "ANTARCTICA",
    "ANTIGUA AND BARBUDA",
    "ARGENTINA",
    "ARMENIA",
    "ARUBA",
    "ASCENSION",
    "ASHMORE AND CARTIER ISLANDS",
    "AUSTRALIA",
    "AUSTRALIAN ANTARCTIC TERRITORY",
    "AUSTRIA",
    "AZERBAIJAN",
    "BAHAMAS",
    "BAHRAIN",
    "BAKER ISLAND",
    "BANGLADESH",
    "BARBADOS",
    "BELARUS",
    "BELGIUM",
    "BELIZE",
    "BENIN",
    "BERMUDA",
    "BHUTAN",
    "BOLIVIA",
    "BOSNIA AND HERZEGOVINA",
    "BOTSWANA",
    "BOUVET ISLAND",
    "BRAZIL",
    "BRITISH ANTARCTIC TERRITORY",
    "BRITISH INDIAN OCEAN TERRITORY",
    "BRITISH SOVEREIGN BASE AREAS",
    "BRITISH VIRGIN ISLANDS",
    "BRUNEI",
    "BULGARIA",
    "BURKINA FASO",
    "BURMA (REPUBLIC OF THE UNION OF MYANMAR)",
    "BURUNDI",
    "CAMBODIA",
    "CAMEROON",
    "CANADA",
    "CAPE VERDE",
    "CARIBBEAN NETHERLANDS",
    "CAYMAN ISLANDS",
    "CENTRAL AFRICAN REPUBLIC",
    "CHAD",
    "CHILE",
    "CHINA",
    "CHRISTMAS ISLAND",
    "CLIPPERTON ISLAND",
    "COCOS (KEELING) ISLANDS",
    "COLOMBIA",
    "COMOROS",
    "CONGO (REPUBLIC OF)",
    "COOK ISLANDS",
    "CORAL SEA ISLANDS",
    "COSTA RICA",
    "COTE D'IVOIRE (IVORY COAST)",
    "CROATIA",
    "CUBA",
    "CURACAO",
    "CYPRUS",
    "CZECH REPUBLIC",
    "DEMOCRATIC REPUBLIC OF THE CONGO",
    "DENMARK",
    "DJIBOUTI",
    "DOMINICA",
    "DOMINICAN REPUBLIC",
    "ECUADOR",
    "EGYPT",
    "EL SALVADOR",
    "EQUATORIAL GUINEA",
    "ERITREA",
    "ESTONIA",
    "ETHIOPIA",
    "FALKLAND ISLANDS",
    "FAROE ISLANDS",
    "FIJI",
    "FINLAND",
    "FRANCE",
    "FRENCH GUIANA",
    "FRENCH POLYNESIA",
    "FRENCH SOUTHERN AND ANTARCTIC LANDS",
    "FRENCH SOUTHERN TERRITORIES",
    "GABON",
    "GAMBIA",
    "GEORGIA",
    "GERMANY",
    "GHANA",
    "GIBRALTAR",
    "GREECE",
    "GREENLAND",
    "GRENADA",
    "GUADELOUPE",
    "GUAM",
    "GUATEMALA",
    "GUERNSEY",
    "GUINEA",
    "GUINEA-BISSAU",
    "GUYANA",
    "HAITI",
    "HEARD AND MCDONALD ISLANDS",
    "HONDURAS",
    "HONG KONG",
    "HOWLAND ISLAND",
    "HUNGARY",
    "ICELAND",
    "INDIA",
    "INDONESIA",
    "IRAN",
    "IRAQ",
    "IRELAND",
    "ISLE OF MAN",
    "ISRAEL",
    "ITALY",
    "JAMAICA",
    "JAPAN",
    "JARVIS ISLAND",
    "JERSEY",
    "JOHNSTON ATOLL",
    "JORDAN",
    "KAZAKHSTAN",
    "KENYA",
    "KINGMAN REEF",
    "KIRIBATI",
    "KOSOVO",
    "KUWAIT",
    "KYRGYZSTAN",
    "LAOS",
    "LATVIA",
    "LEBANON",
    "LESOTHO",
    "LIBERIA",
    "LIBYA",
    "LIECHTENSTEIN",
    "LITHUANIA",
    "LUXEMBOURG",
    "MACAU",
    "MACEDONIA",
    "MADAGASCAR",
    "MALAWI",
    "MALAYSIA",
    "MALDIVES",
    "MALI",
    "MALTA",
    "MARSHALL ISLANDS",
    "MARTINIQUE",
    "MAURITANIA",
    "MAURITIUS",
    "MAYOTTE",
    "MEXICO",
    "MICRONESIA",
    "MIDWAY ISLANDS",
    "MOLDOVA",
    "MONACO",
    "MONGOLIA",
    "MONTENEGRO",
    "MONTSERRAT",
    "MOROCCO",
    "MOZAMBIQUE",
    "NAGORNO-KARABAKH",
    "NAMIBIA",
    "NAURU",
    "NAVASSA ISLAND",
    "NEPAL",
    "NETHERLANDS",
    "NEW CALEDONIA",
    "NEW ZEALAND",
    "NICARAGUA",
    "NIGER",
    "NIGERIA",
    "NIUE",
    "NORFOLK ISLAND",
    "NORTH KOREA",
    "NORTHERN CYPRUS",
    "NORTHERN MARIANA ISLANDS",
    "NORWAY",
    "OMAN",
    "PAKISTAN",
    "PALAU",
    "PALESTINE",
    "PALMYRA ATOLL",
    "PANAMA",
    "PAPUA NEW GUINEA",
    "PARAGUAY",
    "PERU",
    "PETER I ISLAND",
    "PHILIPPINES",
    "PITCAIRN",
    "PITCAIRN ISLANDS",
    "POLAND",
    "PORTUGAL",
    "PRIDNESTROVIE (TRANSNISTRIA)",
    "PUERTO RICO",
    "QATAR",
    "QUEEN MAUD LAND",
    "REUNION",
    "ROMANIA",
    "ROSS DEPENDENCY",
    "RUSSIAN FEDERATION",
    "RWANDA",
    "SAINT BARTHELEMY",
    "SAINT HELENA",
    "SAINT KITTS AND NEVIS",
    "SAINT LUCIA",
    "SAINT MARTIN (FRANCE)",
    "SAINT MARTIN (NETHERLANDS)",
    "SAINT PIERRE AND MIQUELON",
    "SAINT VINCENT AND GRENADINES",
    "SAMOA",
    "SAN MARINO",
    "SAO TOME AND PRINCIPE",
    "SAUDI ARABIA",
    "SENEGAL",
    "SERBIA",
    "SEYCHELLES",
    "SIERRA LEONE",
    "SINGAPORE",
    "SLOVAKIA",
    "SLOVENIA",
    "SOLOMON ISLANDS",
    "SOMALIA",
    "SOMALILAND",
    "SOUTH AFRICA",
    "SOUTH GEORGIA & SOUTH SANDWICH ISLANDS",
    "SOUTH GEORGIA AND THE SOUTH SANDWICH ISLANDS",
    "SOUTH KOREA",
    "SOUTH OSSETIA",
    "SOUTH SUDAN",
    "SPAIN",
    "SRI LANKA",
    "SUDAN",
    "SURINAME",
    "SVALBARD AND JAN MAYEN ISLANDS",
    "SWAZILAND",
    "SWEDEN",
    "SWITZERLAND",
    "SYRIA",
    "TAIWAN",
    "TAJIKISTAN",
    "TANZANIA",
    "THAILAND",
    "TIMOR-LESTE",
    "TOGO",
    "TOKELAU",
    "TONGA",
    "TRINIDAD AND TOBAGO",
    "TRISTAN DA CUNHA",
    "TUNISIA",
    "TURKEY",
    "TURKMENISTAN",
    "TURKS AND CAICOS ISLANDS",
    "TUVALU",
    "UGANDA",
    "UKRAINE",
    "UNITED ARAB EMIRATES",
    "UNITED KINGDOM",
    "UNITED STATES MINOR OUTLYING ISLANDS",
    "UNITED STATES OF AMERICA",
    "UNITED STATES VIRGIN ISLANDS",
    "URUGUAY",
    "UZBEKISTAN",
    "VANUATU",
    "VATICAN",
    "VENEZUELA",
    "VIETNAM",
    "WAKE ISLAND",
    "WALLIS AND FUTUNA ISLANDS",
    "WESTERN SAHARAN",
    "YEMEN",
    "ZAMBIA",
    "ZIMBABWE",
    "UNKNOWN"
];
exports.nationalities = [
    "ABKHAZIAN",
    "AFGHANI",
    "ALANDIC",
    "ALBANIAN",
    "ALGERIAN",
    "U.S. TERRITORY",
    "ANDORRAN",
    "ANGOLAN",
    "BRITISH OVERSEAS TERRITORY",
    "ANTARCTIC",
    "ANTIGUAN",
    "ARGENTINE",
    "ARMENIAN",
    "ARUBIAN",
    "ASCENSION",
    "AUSTRALIAN EXTERNAL TERRITORY",
    "AUSTRALIAN",
    "AUSTRALIAN ANTARCTIC TERRITORY",
    "AUSTRIAN",
    "AZERBAIJANI",
    "BAHAMEESE",
    "BAHRAINIAN",
    "BAKER ISLAND",
    "BANGLADESHI",
    "BARBADIAN",
    "BELARUSIAN",
    "BELGIAN",
    "BELIZEAN",
    "BENINESE",
    "BRITISH OVERSEAS TERRITORY",
    "BHUTANESE",
    "BOLIVIAN",
    "BOSNIAN",
    "MOTSWANA",
    "BOUVET ISLAND",
    "BRAZILIAN",
    "BRITISH ANTARCTIC TERRITORY",
    "BRITISH INDIAN OCEAN TERRITORY",
    "BRITISH SOVEREIGN BASE AREAS",
    "BRITISH OVERSEAS TERRITORY",
    "BRUNEIAN",
    "BULGARIAN",
    "BURKINABE",
    "MYANMAR",
    "BURUNDIAN",
    "CAMBODIAN",
    "CAMEROONIAN",
    "CANADIAN",
    "CAPE VERDEAN",
    "CARIBBEAN NETHERLANDS",
    "BRITISH OVERSEAS TERRITORY",
    "CENTRAL AFRICAN",
    "CHADIAN",
    "CHILEAN",
    "CHINESE",
    "AUSTRALIAN EXTERNAL TERRITORY",
    "CLIPPERTON ISLAND",
    "AUSTRALIAN EXTERNAL TERRITORY",
    "COLOMBIAN",
    "COMORAN",
    "CONGOLESE",
    "COOK ISLANDER",
    "AUSTRALIAN EXTERNAL TERRITORY",
    "COSTA RICAN",
    "IVORIAN",
    "CROATIAN",
    "CUBAN",
    "CURACAOAN",
    "CYPRIOT",
    "CZECH",
    "CONGOLESE",
    "DANISH",
    "DJIBOUTIAN",
    "DOMINICAN",
    "DOMINICAN",
    "ECUADOREAN",
    "EGYPTIAN",
    "SALVADOREAN",
    "EQUATORIAL GUINEAN",
    "ERITREAN",
    "ESTONIAN",
    "ETHIOPIAN",
    "BRITISH OVERSEAS TERRITORY",
    "FAROESE",
    "FIJIAN",
    "FINNISH",
    "FRENCH",
    "FRENCH GUIANESE",
    "FRENCH OVERSEAS COLLECTIVITY",
    "FRENCH SOUTHERN AND ANTARCTIC LANDS",
    "FRENCH SOUTHERN TERRITORIES",
    "GABONESE",
    "GAMBIAN",
    "GEORGIAN",
    "GERMAN",
    "GHANAIAN",
    "GIBRALTARIAN",
    "GREEK",
    "GREENLANDER",
    "GRENADIAN",
    "GUADELOUPEAN",
    "GUAMANIAN",
    "GUATEMALAN",
    "GUERNSEY",
    "GUINEAN",
    "GUINEAN",
    "GUYANESE",
    "HAITIAN",
    "AUSTRALIAN EXTERNAL TERRITORY",
    "HONDURAN",
    "HONG KONG",
    "HOWLAND ISLAND",
    "HUNGARIAN",
    "ICELANDER",
    "INDIAN",
    "INDONESIAN",
    "IRANIAN",
    "IRAQI",
    "IRISH",
    "MANX",
    "ISRAELI",
    "ITALIAN",
    "JAMAICAN",
    "JAPANESE",
    "JARVIS ISLAND",
    "JERSEY",
    "JOHNSTON ATOLL",
    "JORDANIAN",
    "KAZAKHSTANI",
    "KENYAN",
    "KINGMAN REEF",
    "I-KIRIBATI",
    "KOSOVAR",
    "KUWAITI",
    "KYRGYZSTANI",
    "LAOTIAN",
    "LATVIAN",
    "LEBANESE",
    "MOSOTHO",
    "LIBERIAN",
    "LIBYAN",
    "LIECHTENSTEINER",
    "LITHUNIAN",
    "LUXEMBOURGER",
    "MACANESE",
    "MACEDONIAN",
    "MALAGASY",
    "MALAWIAN",
    "MALAYSIAN",
    "MALDIVAN",
    "MALIAN",
    "MALTESE",
    "MARSHALLESE",
    "MARTINICAN",
    "MAURITANIAN",
    "MAURITIAN",
    "MAHORAN",
    "MEXICAN",
    "MICRONESIAN",
    "U.S. TERRITORY",
    "MOLDOVAN",
    "MONACAN",
    "MONGOLIAN",
    "MONTENEGRIN",
    "MONTSERRATIAN",
    "MOROCCAN",
    "MOZAMBICAN",
    "NAGORNO-KARABAKH",
    "NAMIBIAN",
    "NAURUAN",
    "NAVASSA ISLAND",
    "NEPALESE",
    "DUTCH",
    "NEW CALEDONIAN",
    "NEW ZEALANDER",
    "NICARAGUAN",
    "NIGERIEN",
    "NIGERIAN",
    "NIUEAN",
    "NORFOLK ISLANDER",
    "NORTH KOREAN",
    "U.S. TERRITORY",
    "U.S. TERRITORY",
    "NORWEGIAN",
    "OMANI",
    "PAKISTANI",
    "PALAUAN",
    "PALESTINIAN",
    "PALMYRA ATOLL",
    "PANAMANIAN",
    "PAPUA NEW GUINEAN",
    "PARAGUAYAN",
    "PERUVIAN",
    "PETER I ISLAND",
    "FILIPINO",
    "PITCAIRN ISLANDER",
    "BRITISH OVERSEAS TERRITORY",
    "POLISH",
    "PORTUGUESE",
    "PRIDNESTROVIE (TRANSNISTRIA)",
    "PUERTO RICAN",
    "QATARI",
    "QUEEN MAUD LAND",
    "FRENCH OVERSEAS REGION",
    "ROMANIAN",
    "ROSS DEPENDENCY",
    "RUSSIAN",
    "RWANDAN",
    "FRENCH OVERSEAS COLLECTIVITY",
    "BRITISH OVERSEAS TERRITORY",
    "KITTIAN",
    "SAINT LUCIAN",
    "FRENCH OVERSEAS COLLECTIVITY",
    "DUTCH",
    "SAINT-PIERRAIS",
    "SAINT VINCENTIAN",
    "SAMOAN",
    "SANMARINESE",
    "SAO TOMEAN",
    "SAUDI ARABIAN",
    "SENEGALESE",
    "SERBIAN",
    "SEYCHELLOIS",
    "SIERRA LEONEAN",
    "SINGAPOREAN",
    "SLOVAKIAN",
    "SLOVENIAN",
    "SOLOMON ISLANDER",
    "SOMALI",
    "SOMALILAND",
    "SOUTH AFRICAN",
    "BRITISH OVERSEAS TERRITORY",
    "BRITISH OVERSEAS TERRITORY",
    "SOUTH KOREAN",
    "SOUTH OSSETIA",
    "SOUTH SUDANESE",
    "SPANISH",
    "SRI LANKAN",
    "SUDANESE",
    "SURINAMER",
    "SVALBARD AND JAN MAYEN ISLANDS",
    "SWAZI",
    "SWEDISH",
    "SWISS",
    "SYRIAN",
    "TAIWANESE",
    "TAJIKISTANI",
    "TANZANIAN",
    "THAI",
    "TIMORESE",
    "TOGOLESE",
    "TOKELAUAN",
    "TONGAN",
    "TRINIDADIAN",
    "TRISTAN DA CUNHA",
    "TUNISIAN",
    "TURKISH",
    "TURKMEN",
    "BRITISH OVERSEAS TERRITORY",
    "TUVALUAN",
    "UGANDAN",
    "UKRAINIAN",
    "EMIRIAN",
    "BRITISH",
    "U.S. TERRITORY",
    "AMERICAN",
    "U.S. TERRITORY",
    "URUGUAYAN",
    "UZBEKISTANI",
    "NI-VANUATU",
    "VATICAN",
    "VENEZUELAN",
    "VIETNAMESE",
    "WAKE ISLAND",
    "FRENCH OVERSEAS COLLECTIVITY",
    "WESTERN SAHARAN",
    "YEMENI",
    "ZAMBIAN",
    "ZIMBABWEAN",
    "UNKNOWN"
];
exports.ssics = [
    { code: "01111", label: "GROWING OF LEAFY AND FRUIT VEGETABLES" },
    { code: "01112", label: "GROWING OF MUSHROOMS" },
    { code: "01113", label: "GROWING OF ROOT CROPS" },
    { code: "01119", label: "GROWING OF FOOD CROPS (NON-HYDROPONICS) N.E.C." },
    { code: "01120", label: "GROWING OF LEAFY AND FRUIT VEGETABLES (HYDROPONICS)" },
    { code: "01130", label: "GROWING OF FRUITS" },
    { code: "01141", label: "GROWING OF ORCHIDS" },
    { code: "01142", label: "GROWING OF ORNAMENTAL PLANTS" },
    { code: "01149", label: "GROWING OF NURSERY PRODUCTS N.E.C." },
    { code: "01190", label: "GROWING OF OTHER CROPS" },
    { code: "01411", label: "PIG FARMS" },
    { code: "01412", label: "CATTLE FARMS (INCLUDING DAIRY CATTLE)" },
    { code: "01413", label: "GOAT FARMS (INCLUDING GOAT'S MILK PRODUCTION)" },
    { code: "01421", label: "POULTRY BREEDING/HATCHERIES" },
    { code: "01422", label: "BROILER FARMS (CHICKENS REARED FOR MEAT)" },
    { code: "01423", label: "LAYER FARMS (CHICKENS REARED FOR EGGS)" },
    { code: "01424", label: "DUCK FARMS" },
    { code: "01491", label: "DOG BREEDING" },
    { code: "01492", label: "BIRD BREEDING" },
    { code: "01493", label: "CROCODILE FARMS" },
    { code: "01494", label: "FROG FARMS" },
    { code: "01499", label: "OTHER ANIMAL PRODUCTION N.E.C." },
    { code: "01500", label: "GROWING OF CROPS COMBINED WITH ANIMAL PRODUCTION (MIXED FARMING)" },
    { code: "01601", label: "EXTENSION SERVICES (INCLUDING AGRICULTURAL RESEARCH AND EXPERIMENTATION)" },
    {
        code: "01609",
        label: "AGRICULTURAL AND ANIMAL HUSBANDRY SERVICE ACTIVITIES EXCEPT VETERINARY ACTIVITIES N.E.C. (EG PEST CONTROL, COLLECTION OF AGRICULTURAL BY-PRODUCTS)"
    },
    { code: "02000", label: "FORESTRY, LOGGING AND RELATED SERVICE ACTIVITIES" },
    { code: "03101", label: "FISHING IN KELONGS" },
    { code: "03102", label: "OCEAN FISHING EXCEPT FISHING IN KELONGS" },
    { code: "03103", label: "COASTAL FISHING EXCEPT FISHING IN KELONGS" },
    { code: "03109", label: "FISHING N.E.C." },
    { code: "03201", label: "FOOD FISH FARMS" },
    { code: "03202", label: "ORNAMENTAL FISH FARMS" },
    { code: "03209", label: "OPERATION OF FISH HATCHERIES AND FISH FARMS N.E.C. (INCLUDING TURTLE, PRAWN, CRAB, MUSSEL FARMS)" },
    { code: "03301", label: "FISHERY RESEARCH SERVICES (INCLUDING EXPERIMENTATION AND CULTURE)" },
    { code: "03309", label: "SERVICE ACTIVITIES INCIDENTAL TO FISHING N.E.C." },
    { code: "08101", label: "STONE QUARRYING" },
    { code: "08102", label: "QUARRYING OF SAND AND CLAY" },
    { code: "08900", label: "OTHER MINING AND QUARRYING" },
    { code: "09001", label: "CRUDE PETROLEUM AND NATURAL GAS PRODUCTION" },
    {
        code: "09002",
        label: "SERVICE ACTIVITIES INCIDENTAL TO OIL AND GAS EXTRACTION (EXCLUDING SURVEYING AND ENGINEERING DESIGN AND CONSULTANCY SERVICES SUPPORTING MINING, OIL AND GAS EXTRACTION AND OFFSHORE EXPLORATION ACTIVITIES)"
    },
    { code: "10101", label: "SLAUGHTERING OF LIVESTOCK" },
    { code: "10102", label: "SLAUGHTERING OF POULTRY" },
    { code: "10103", label: "MANUFACTURE OF SAUSAGE" },
    {
        code: "10104",
        label: "PREPARING, CANNING AND PRESERVING OF LIVESTOCK AND LIVESTOCK PRODUCTS (INCLUDING LARD AND OTHER EDIBLE ANIMAL FATS)"
    },
    { code: "10105", label: "PREPARING, CANNING AND PRESERVING OF POULTRY AND POULTRY PRODUCTS" },
    { code: "10109", label: "PROCESSING AND PRESERVING OF MEAT AND MEAT PRODUCTS N.E.C." },
    { code: "10201", label: "CANNING OF FISH AND OTHER SEAFOOD" },
    { code: "10202", label: "PROCESSING, CURING AND PRESERVING (OTHER THAN CANNING) OF FISH AND OTHER SEAFOOD" },
    { code: "10301", label: "MANUFACTURE OF JAMS (INCLUDING FRUIT JELLY)" },
    { code: "10302", label: "OTHER CANNING AND PRESERVING OF FRUITS AND FRUIT JUICES" },
    { code: "10303", label: "OTHER CANNING AND PRESERVING OF VEGETABLES AND VEGETABLE JUICES (INCLUDING PICKLES)" },
    { code: "10401", label: "MANUFACTURE OF CRUDE COCONUT OIL AND PALM OIL" },
    { code: "10402", label: "MANUFACTURE OF REFINED COCONUT OIL AND PALM OIL" },
    { code: "10403", label: "MANUFACTURE OF MARGARINE AND OTHER EDIBLE OILS" },
    { code: "10404", label: "MANUFACTURE OF INEDIBLE OILS AND FATS" },
    { code: "10409", label: "MANUFACTURE OF VEGETABLE AND ANIMAL OILS AND FATS N.E.C." },
    { code: "10501", label: "MANUFACTURE OF CONDENSED AND EVAPORATED MILK (INCLUDING PASTEURISING AND BOTTLING OF FLUID MILK)" },
    { code: "10502", label: "MANUFACTURE OF MILK POWDER" },
    { code: "10503", label: "MANUFACTURE OF ICE-CREAM" },
    { code: "10509", label: "MANUFACTURE OF DAIRY PRODUCTS N.E.C. (EG BUTTER, CHEESE, ICE-CREAM MIXES AND POWDER, YOGHURT)" },
    { code: "10611", label: "RICE MILLING" },
    { code: "10612", label: "WHEAT MILLING" },
    { code: "10613", label: "PROCESSING OF PEPPER SEEDS" },
    { code: "10614", label: "PROVISION OF MILLING SERVICES" },
    { code: "10619", label: "MANUFACTURE OF GRAIN MILL PRODUCTS N.E.C. (EG POP CORN, PULSE PREPARATION, ROLLED OATS)" },
    { code: "10620", label: "MANUFACTURE OF STARCHES AND STARCH PRODUCTS" },
    { code: "10711", label: "MANUFACTURE OF BISCUITS (INCLUDING WAFERS AND CONES)" },
    { code: "10712", label: "MANUFACTURE OF BREAD, CAKES AND CONFECTIONERY" },
    { code: "10719", label: "MANUFACTURE OF BAKERY PRODUCTS N.E.C." },
    { code: "10720", label: "MANUFACTURE OF SUGAR AND SUGAR PRODUCTS" },
    { code: "10731", label: "MANUFACTURE OF COCOA AND CHOCOLATE POWDER FROM BEANS" },
    { code: "10732", label: "MANUFACTURE OF CHOCOLATE AND CHOCOLATE PRODUCTS" },
    { code: "10733", label: "MANUFACTURE OF NON-CHOCOLATE CONFECTIONERY (EG SWEETS, TOFFEES, CRYSTALISED FRUITS, CHEWING GUMS)" },
    { code: "10740", label: "MANUFACTURE OF MACARONI, NOODLES, VERMICELLI AND OTHER RELATED PRODUCTS" },
    { code: "10750", label: "MANUFACTURE OF COOKED-FOOD PREPARATIONS (EG FROZEN DINNERS)" },
    { code: "10761", label: "MANUFACTURE OF INSTANT BEVERAGES" },
    { code: "10762", label: "PROCESSING OF COFFEE SEEDS" },
    { code: "10763", label: "MANUFACTURE OF COFFEE POWDER" },
    { code: "10764", label: "MANUFACTURE OF TEA (INCLUDING PROCESSING OF TEA LEAVES)" },
    { code: "10765", label: "MANUFACTURE OF NON-DAIRY CREAMER" },
    { code: "10791", label: "MANUFACTURE OF SAUCES INCLUDING SOYA BEAN SAUCE (EG TOMATO SAUCE, CHILLI SAUCE)" },
    { code: "10792", label: "MANUFACTURE OF SOYA BEAN PRODUCTS EXCEPT SOYA BEAN SAUCE AND SOYA BEAN MILK" },
    { code: "10793", label: "MANUFACTURE AND PROCESSING OF SPICES (INCLUDING CURRY POWDER AND SPICE EXTRACTS)" },
    { code: "10794", label: "MANUFACTURE OF CHIPS, CRACKERS AND OTHER TITBITS (EXCLUDING BISCUITS AND CONFECTIONERY)" },
    { code: "10799", label: "MANUFACTURE OF OTHER FOOD PRODUCTS N.E.C. (EXCEPT FOOD CHEMICALS AND ADDITIVES)" },
    { code: "10800", label: "MANUFACTURE OF PREPARED ANIMAL FEEDS (INCLUDING ADDITIVES FOR ANIMAL FEED)" },
    {
        code: "11010",
        label: "DISTILLING, RECTIFYING AND BLENDING OF SPIRITS; ETHYL ALCOHOL PRODUCTION FROM FERMENTED MATERIALS (INCLUDING SAMSU AND CHINESE LIQUORS)"
    },
    { code: "11020", label: "MANUFACTURE OF WINES" },
    { code: "11030", label: "MANUFACTURE OF MALT LIQUORS AND MALT (EG BEER AND STOUT)" },
    {
        code: "11041",
        label: "MANUFACTURE OF SOFT DRINKS, PRODUCTION OF MINERAL WATERS (INCLUDING CARBONATED WATERS, SOYA BEAN MILK, BARLEY WATER, CHRYSANTHEMUM WATER)"
    },
    { code: "11042", label: "MANUFACTURE OF CORDIALS, SYRUPS AND COMPOSITE CONCENTRATES FOR BEVERAGES" },
    { code: "11043", label: "MANUFACTURE OF ICE EXCEPT DRY ICE" },
    { code: "12001", label: "MANUFACTURE OF CIGARETTES" },
    { code: "12009", label: "MANUFACTURE OF TOBACCO PRODUCTS N.E.C. (EG CIGARS, CHINESE TOBACCO)" },
    { code: "13100", label: "SPINNING, WEAVING AND FINISHING OF TEXTILES" },
    { code: "13910", label: "MANUFACTURE OF KNITTED AND CROCHETED FABRICS AND LACES" },
    { code: "13921", label: "MANUFACTURE OF CURTAINS, PILLOW CASES, BED SHEETS AND BED SPREADS" },
    { code: "13922", label: "MANUFACTURE OF OTHER MADE-UP HOUSE FURNISHINGS (EG NAPKINS, TABLE CLOTHS)" },
    {
        code: "13929",
        label: "MANUFACTURE OF MADE-UP TEXTILE ARTICLES EXCEPT APPAREL N.E.C. (EG SCROLLS, FLAGS AND SAILS, BANNERS, CANVAS PRODUCTS, CUSHIONS, PILLOWS)"
    },
    { code: "13930", label: "MANUFACTURE OF CARPETS AND RUGS" },
    { code: "13940", label: "MANUFACTURE OF CORDAGE, ROPE, TWINE AND NETTING" },
    { code: "13990", label: "MANUFACTURE OF OTHER TEXTILES N.E.C. (EG UPHOLSTERY FILLING)" },
    { code: "14101", label: "MANUFACTURE OF OUTER GARMENTS" },
    { code: "14102", label: "MANUFACTURE OF BRASSIERES AND OTHER UNDERGARMENTS" },
    { code: "14103", label: "TAILORING AND DRESSMAKING (TO INDIVIDUAL ORDER)" },
    {
        code: "14109",
        label: "MANUFACTURE OF WEARING APPAREL EXCEPT FUR APPAREL N.E.C. (EG SONGKOKS, CAPS, GLOVES AND MITTENS, GARTERS, HANDKERCHIEFS, RAINCOATS, SHAWLS AND HAIR NETS)"
    },
    { code: "14200", label: "MANUFACTURE OF FUR APPAREL AND ARTICLES OF FUR (EG FUR RUGS, MATS AND CUSHIONS)" },
    { code: "14301", label: "MANUFACTURE OF SOCKS, STOCKINGS AND OTHER HOSIERY" },
    { code: "14302", label: "MANUFACTURE OF BRIEFS, SINGLETS AND OTHER KNITTED OR CROCHETED WEAR (EG PULLOVERS, CARDIGANS)" },
    { code: "14309", label: "MANUFACTURE OF KNITTED AND CROCHETED APPAREL N.E.C." },
    { code: "15110", label: "TANNING AND DRESSING OF LEATHER; DRESSING AND DYEING OF FUR" },
    { code: "15121", label: "MANUFACTURE OF LUGGAGE, BAGS, BRIEF CASES AND THE LIKE" },
    { code: "15122", label: "MANUFACTURE OF HANDBAGS" },
    { code: "15129", label: "MANUFACTURE OF SADDLERY, HARNESS AND ARTICLES OF LEATHER N.E.C. (EG COIN PURSES, KEY CASES)" },
    { code: "15200", label: "MANUFACTURE OF FOOTWEAR" },
    { code: "16101", label: "SAWMILLING" },
    { code: "16102", label: "PRESERVATION OF WOOD" },
    { code: "16109", label: "SAWMILLING AND PLANING OF WOOD N.E.C." },
    { code: "16211", label: "MANUFACTURE OF PLYWOOD AND VENEER SHEETS" },
    { code: "16219", label: "MANUFACTURE OF LAMINBOARD, PARTICLE BOARD AND OTHER PANELS AND BOARDS N.E.C." },
    { code: "16221", label: "MANUFACTURE OF PREFABRICATED WOODEN BUILDING STRUCTURES (INCLUDING PARQUET FLOORING)" },
    { code: "16222", label: "MANUFACTURE OF MOULDED WOODEN PRODUCTS" },
    { code: "16229", label: "MANUFACTURE OF BUILDERS' CARPENTRY AND JOINERY N.E.C." },
    { code: "16230", label: "MANUFACTURE OF WOODEN CONTAINERS" },
    { code: "16291", label: "MANUFACTURE OF COFFINS" },
    { code: "16292", label: "MANUFACTURE OF HOUSEHOLD AND KITCHEN WOODEN WARE EXCEPT WOODEN FOOTWEAR" },
    { code: "16293", label: "MANUFACTURE OF ATTAP AND ATTAP PRODUCTS" },
    { code: "16294", label: "RATTAN PROCESSING" },
    { code: "16299", label: "MANUFACTURE OF OTHER PRODUCTS OF WOOD AND ARTICLES OF CORK, STRAW AND PLAITING MATERIALS N.E.C." },
    { code: "17010", label: "MANUFACTURE OF PULP, PAPER AND PAPERBOARD" },
    { code: "17021", label: "MANUFACTURE OF CORRUGATED PAPER AND PAPERBOARD" },
    { code: "17022", label: "MANUFACTURE OF CONTAINERS AND BOXES OF PAPER AND PAPERBOARD" },
    {
        code: "17091",
        label: "MANUFACTURE OF JOSS PAPER AND OTHER RELATED CEREMONIAL PAPER PRODUCTS (INCLUDING EFFIGIES AND OTHER FUNERAL PAPER GOODS AND CHINESE LANTERNS)"
    },
    { code: "17092", label: "MANUFACTURE OF SANITARY TOWELS, TOILET PAPER, PAPER TOWELS, DISPOSABLE DIAPERS AND RELATED PAPER PRODUCTS" },
    { code: "17093", label: "MANUFACTURE OF PAPER CUPS, PLATES AND UTENSILS" },
    { code: "17094", label: "MANUFACTURE OF CARDS, ENVELOPES AND STATIONERY, UNPRINTED" },
    { code: "17099", label: "MANUFACTURE OF OTHER ARTICLES OF PAPER AND PAPERBOARD N.E.C. (EG PAPIER MACHE, WALLPAPER)" },
    { code: "18111", label: "PRINTING OF NEWSPAPERS" },
    { code: "18112", label: "PRINTING OF PERIODICALS, BOOKS AND MAGAZINES" },
    { code: "18113", label: "COMMERCIAL PRINTING (EG PRINTING OF BROCHURES, CARDS, ENVELOPES, LABELS AND STATIONERY)" },
    { code: "18114", label: "PRINTING OF CONTINUOUS AND FAN-FOLD FORMS" },
    { code: "18115", label: "SILK SCREEN PRINTING (INCLUDING METAL PRINTING)" },
    { code: "18119", label: "PRINTING N.E.C." },
    { code: "18121", label: "BOOKBINDING (EG BOOK PACKAGING)" },
    { code: "18122", label: "TYPESETTING" },
    { code: "18123", label: "COLOUR SEPARATION" },
    { code: "18129", label: "SERVICE ACTIVITIES RELATED TO PRINTING N.E.C. (INCLUDING PLATE-MAKING)" },
    {
        code: "18200",
        label: "REPRODUCTION OF RECORDED MEDIA (INCLUDING REPRODUCTION OF PHONOGRAPH RECORDS, RECORDED MAGNETIC TAPES, COMPACT DISCS AND NON-CUSTOMISED SOFTWARE)"
    },
    { code: "19100", label: "MANUFACTURE OF COKE OVEN PRODUCTS" },
    { code: "19201", label: "PETROLEUM REFINERIES" },
    { code: "19202", label: "MANUFACTURE OF PETROLEUM LUBRICATING OIL" },
    { code: "19209", label: "MANUFACTURE OF REFINED PETROLEUM PRODUCTS N.E.C." },
    { code: "20111", label: "MANUFACTURE OF INDUSTRIAL GASES AND DRY ICE" },
    { code: "20112", label: "MANUFACTURE OF BASIC INDUSTRIAL ACIDS AND ALKALIS" },
    { code: "20113", label: "MANUFACTURE OF BASIC CHEMICALS EXCEPT FERTILISERS AND NITROGEN" },
    { code: "20114", label: "MANUFACTURE OF SOLVENTS" },
    { code: "20119", label: "MANUFACTURE OF BASIC CHEMICALS N.E.C." },
    { code: "20120", label: "MANUFACTURE OF FERTILISERS AND NITROGEN COMPOUNDS" },
    { code: "20131", label: "MANUFACTURE OF PETROCHEMICAL PRIMARY PRODUCTS (EG OLEFINS, AROMATICS, BASIC BUILDING BLOCKS)" },
    {
        code: "20132",
        label: "MANUFACTURE OF DERIVATIVES AND INTERMEDIATES PRODUCED FROM BASIC BUILDING BLOCKS (EG ACETYLS, ACRYLICS, OXOCHEMICALS, STYRENIRS, PHENOLICS, ETHYLENE OXIDE DERIVATIVES AND POLYMERS)"
    },
    { code: "20133", label: "MANUFACTURE OF SYNTHETIC RUBBER" },
    {
        code: "20210",
        label: "MANUFACTURE OF PESTICIDES AND OTHER AGRO-CHEMICAL PRODUCTS (INCLUDING INSECTICIDES, HERBICIDES AND DISINFECTANTS)"
    },
    { code: "20221", label: "MANUFACTURE OF PAINTS" },
    { code: "20222", label: "MANUFACTURE OF VARNISHES AND LACQUERS (INCLUDING ENAMELS)" },
    { code: "20229", label: "MANUFACTURE OF PAINTS, VARNISHES AND SIMILAR COATINGS AND MASTICS N.E.C." },
    { code: "20231", label: "MANUFACTURE OF SOAP, DETERGENTS, WASHING AND OTHER CLEANING PREPARATIONS" },
    { code: "20232", label: "MANUFACTURE OF PERFUMES AND FRAGRANCES" },
    { code: "20233", label: "MANUFACTURE OF COSMETICS AND TOILETRIES" },
    { code: "20234", label: "MANUFACTURE OF WAXES AND POLISHES AND DEODORISING PREPARATIONS" },
    { code: "20241", label: "MANUFACTURE OF FOOD CHEMICALS AND ADDITIVES (EG FLAVOURS, PRESERVATIVES AND COLOURINGS)" },
    { code: "20242", label: "MANUFACTURE OF ADDITIVES FOR MINERAL OIL (EG LUBRICANT AND FUEL ADDITIVES)" },
    { code: "20249", label: "MANUFACTURE OF ADDITIVES N.E.C." },
    { code: "20291", label: "MANUFACTURE OF EPOXY MOULDING COMPOUNDS AND PHENOLIC MOULDING COMPOUNDS" },
    { code: "20292", label: "MANUFACTURE OF ULTRAPURE ELECTRONIC CHEMICALS, MATERIALS AND LAMINATES" },
    { code: "20293", label: "MANUFACTURE OF WATER TREATMENT, WASTE TREATMENT AND OILFIELD CHEMICALS" },
    { code: "20294", label: "MANUFACTURE OF INKS, DYESTUFFS, PIGMENTS AND CARBON BLACK" },
    { code: "20295", label: "MANUFACTURE OF PHOTOGRAPHIC FILM, PAPER, PLATE AND CHEMICALS" },
    { code: "20296", label: "MANUFACTURE OF ADHESIVES AND SEALANTS" },
    { code: "20297", label: "MANUFACTURE OF CATALYSTS AND CATALYST REGENERATION" },
    { code: "20298", label: "MANUFACTURE OF BIOFUELS" },
    {
        code: "20299",
        label: "MANUFACTURE OF OTHER CHEMICAL PRODUCTS N.E.C. (EG GELATIN AND DERIVATIVES, LAUNDRY BLUE, EXPLOSIVES, PROCESSED SALTS, INDUSTRIAL STARCH, INCENSE AND JOSS STICKS, CAMPHOR PRODUCTS)"
    },
    { code: "20300", label: "MANUFACTURE OF MAN-MADE FIBRES EXCEPT GLASS" },
    { code: "21011", label: "MANUFACTURE OF PHARMACEUTICAL INTERMEDIATES AND FINE CHEMICALS FOR HUMAN USE" },
    { code: "21012", label: "MANUFACTURE OF PHARMACEUTICAL PRODUCTS AND PREPARATIONS FOR HUMAN USE (EG TABLETED PRODUCTS)" },
    { code: "21013", label: "MANUFACTURE OF PHARMACEUTICAL INTERMEDIATES AND FINE CHEMICALS FOR VETERINARY USE" },
    { code: "21014", label: "MANUFACTURE OF PHARMACEUTICAL PRODUCTS AND PREPARATIONS FOR VETERINARY USE" },
    { code: "21021", label: "MANUFACTURE OF VACCINES FOR HUMAN USE" },
    { code: "21022", label: "MANUFACTURE OF OTHER BIOLOGICAL PRODUCTS AND PREPARATIONS FOR HUMAN USE" },
    { code: "21023", label: "MANUFACTURE OF BIOLOGICAL PRODUCTS AND PREPARATIONS FOR VETERINARY USE" },
    { code: "21030", label: "MANUFACTURE OF TRADITIONAL CHINESE MEDICINE" },
    { code: "22111", label: "PROCESSING OF RUBBER (INCLUDING PROCESSING OF RUBBER LATEX)" },
    { code: "22112", label: "GRADING AND PACKING OF RUBBER" },
    { code: "22119", label: "PROCESSING OF NATURAL GUMS N.E.C. (EG GUM DAMAR, JELUTONG)" },
    { code: "22121", label: "MANUFACTURE OF TYRES AND TUBES" },
    { code: "22122", label: "RETREADING AND VULCANISING OF TYRES" },
    { code: "22191", label: "MANUFACTURE OF FOAM RUBBER PRODUCTS (EXCLUDING FOAM RUBBER MATTRESSES)" },
    { code: "22192", label: "MANUFACTURE OF RUBBER AUTOMOTIVE PARTS" },
    { code: "22193", label: "MANUFACTURE OF INDUSTRIAL AND MECHANICAL RUBBER GOODS" },
    { code: "22194", label: "MANUFACTURE OF RUBBER FLOORINGS" },
    { code: "22199", label: "MANUFACTURE OF OTHER RUBBER PRODUCTS N.E.C. (EXCEPT RUBBER FOOTWEAR AND TOYS)" },
    { code: "22211", label: "MANUFACTURE OF PLASTIC TABLEWARE, HOUSEHOLD AND KITCHEN WARE (EXCLUDING DISPOSABLE UTENSILS)" },
    { code: "22212", label: "MANUFACTURE OF STYROFOAM AND PLASTIC DISPOSABLE UTENSILS" },
    { code: "22213", label: "MANUFACTURE OF PLASTIC SHEET, FILM AND ARTICLES THEREOF (EG POLYTHENE AND POLYPROPYLENE BAGS)" },
    { code: "22214", label: "MANUFACTURE OF PLASTIC BOTTLES, BOXES AND CONTAINERS (EXCEPT FOR HOUSEHOLD USE)" },
    { code: "22215", label: "MANUFACTURE OF PLASTIC PIPES AND TUBES" },
    { code: "22216", label: "MANUFACTURE OF PLASTIC PRECISION ENGINEERING PARTS" },
    { code: "22217", label: "MANUFACTURE OF PVC FILES, HOLDERS AND ALBUMS" },
    { code: "22218", label: "MANUFACTURE OF PLASTIC CABLE TIES" },
    { code: "22219", label: "MANUFACTURE OF PLASTIC PRODUCTS N.E.C. (EXCEPT PLASTIC FOOTWEAR AND TOYS)" },
    { code: "22220", label: "PLASTIC PRODUCT SERVICES" },
    { code: "23100", label: "MANUFACTURE OF GLASS AND GLASS PRODUCTS (INCLUDING YARN OF GLASS FIBRES)" },
    { code: "23911", label: "MANUFACTURE OF BRICKS" },
    {
        code: "23912",
        label: "MANUFACTURE OF TILES, PIPES AND CHANNELS (INCLUDING CLAY ROOFING, WALL AND FLOOR TILES, AND EARTHEN AND GLAZED PIPES)"
    },
    { code: "23919", label: "MANUFACTURE OF CLAY PRODUCTS N.E.C." },
    {
        code: "23931",
        label: "MANUFACTURE OF PLUMBING FIXTURES AND FITTINGS OF VITREOUS CHINA, CHINA AND EARTHENWARE (EG SINKS, CLOSETS, BOWLS)"
    },
    { code: "23939", label: "MANUFACTURE OF OTHER PORCELAIN AND CERAMIC PRODUCTS N.E.C." },
    { code: "23940", label: "MANUFACTURE OF CEMENT, LIME AND PLASTER" },
    { code: "23951", label: "MANUFACTURE OF READY-MIX CONCRETE" },
    { code: "23959", label: "MANUFACTURE OF ARTICLES OF CONCRETE, CEMENT AND PLASTER N.E.C. (EXCEPT PRECAST CONCRETE COMPONENTS)" },
    { code: "23960", label: "CUTTING, SHAPING AND FINISHING OF STONE (INCLUDING TOMB-STONES AND FURNITURE OF STONE OR MARBLE)" },
    { code: "23991", label: "MANUFACTURE OF ASBESTOS PRODUCTS EXCEPT ASBESTOS PAPER" },
    { code: "23992", label: "MANUFACTURE OF FIBREGLASS AND FIBREGLASS PRODUCTS" },
    {
        code: "23993",
        label: "MANUFACTURE OF OTHER INSULATION PRODUCTS (EG CERAMIC IC PACKAGES, REFRACTORY MATERIALS, ROCKWOOL PRODUCTS, INSULATION SERVICES)"
    },
    { code: "23994", label: "MANUFACTURE OF NON-STRUCTURAL PRE-CAST COMPONENTS (EG LIGHTWEIGHT PARTITIONS, SECONDARY ROOF SLABS)" },
    { code: "23995", label: "MANUFACTURE OF ASPHALT PREMIX" },
    { code: "23999", label: "MANUFACTURE OF OTHER NON-METALLIC MINERAL PRODUCTS N.E.C. (EG GRAPHITE PRODUCTS)" },
    { code: "24101", label: "IRON AND STEEL ROLLING MILLS" },
    { code: "24102", label: "MANUFACTURE OF FERROUS METAL ALLOYS" },
    { code: "24109", label: "MANUFACTURE OF BASIC IRON AND STEEL N.E.C. (INCLUDING SMELTING)" },
    { code: "24201", label: "TIN SMELTING" },
    { code: "24202", label: "MANUFACTURE OF NON-FERROUS METAL ALLOYS" },
    { code: "24209", label: "MANUFACTURE OF BASIC PRECIOUS AND NON-FERROUS METALS N.E.C." },
    { code: "24310", label: "IRON AND STEEL FOUNDRIES" },
    { code: "24320", label: "NON-FERROUS METAL FOUNDRIES" },
    { code: "25111", label: "MANUFACTURE OF METAL DOORS, WINDOW AND DOOR FRAMES, GRILLES AND GRATINGS" },
    { code: "25112", label: "MANUFACTURE OF METAL STRIPS AND SLABS (EG AWNINGS)" },
    { code: "25113", label: "MANUFACTURE OF PIPES AND TUBES" },
    { code: "25114", label: "MANUFACTURE OF STEEL STRUCTURAL COMPONENT" },
    { code: "25119", label: "MANUFACTURE OF STRUCTURAL METAL PRODUCTS N.E.C. (EG METAL SECTIONS, CORRUGATED SHEETS)" },
    {
        code: "25120",
        label: "MANUFACTURE AND REPAIR OF TANKS, RESERVOIRS AND CONTAINERS OF METAL (EG METAL CYLINDERS, STORAGE VESSELS AND CONTAINERS FOR COMPRESSED OR LIQUEFIED GAS)"
    },
    { code: "25131", label: "MANUFACTURE AND REPAIR OF HEATING BOILERS, RADIATORS AND CORRECTORS (INCLUDING PARTS)" },
    { code: "25139", label: "MANUFACTURE AND REPAIR OF STEAM GENERATORS N.E.C. (EXCEPT CENTRAL HEATING HOT WATER BOILERS)" },
    { code: "25200", label: "MANUFACTURE AND REPAIR OF WEAPONS AND AMMUNITION (EG ORDNANCE AND ACCESSORIES)" },
    { code: "25911", label: "IRON AND STEEL AND NON-FERROUS FORGINGS" },
    { code: "25912", label: "MANUFACTURE OF METAL CAPS (EG CROWN CORKS)" },
    { code: "25913", label: "MANUFACTURE OF LEADFRAME" },
    { code: "25914", label: "METAL STAMPINGS EXCEPT METAL CAPS" },
    { code: "25915", label: "DIE-CASTING" },
    { code: "25919", label: "PRESSING AND ROLL-FORMING OF METAL AND POWDER METALLURGY N.E.C." },
    { code: "25921", label: "ELECTROPLATING AND PLATING OF METALS AND FORMED PRODUCTS" },
    { code: "25922", label: "POLISHING OF METALS AND FORMED PRODUCTS" },
    { code: "25923", label: "RUSTPROOFING OF METALS AND FORMED PRODUCTS" },
    { code: "25924", label: "HEAT TREATMENT FOR METALS" },
    { code: "25929", label: "METAL PRODUCT SERVICES N.E.C." },
    { code: "25931", label: "MANUFACTURE OF TABLE, KITCHEN AND OTHER CUTLERY" },
    { code: "25932", label: "MANUFACTURE OF HAND AND EDGE TOOLS" },
    {
        code: "25939",
        label: "MANUFACTURE OF GENERAL HARDWARE (INCLUDING BLACKSMITH SHOPS) N.E.C. (EG LOCKS AND KEYS, HINGES, CLAMPS, HOOKS)"
    },
    { code: "25941", label: "MANUFACTURE OF UNINSULATED WIRE (EG ELECTRONIC COMPONENT WIRE, BONDING WIRE)" },
    { code: "25949", label: "MANUFACTURE OF METAL WIRE AND CABLE PRODUCTS N.E.C." },
    { code: "25951", label: "MANUFACTURE OF TINPLATE CANS" },
    { code: "25952", label: "MANUFACTURE OF OTHER TINPLATE AND ZINC ARTICLES (EG PAILS, BUCKETS, DUSTBINS)" },
    { code: "25959", label: "MANUFACTURE OF METAL CANS, CONTAINERS AND RELATED PRODUCTS N.E.C. (EG BARRELS, STEEL DRUMS, KEGS)" },
    { code: "25991", label: "MANUFACTURE OF SANITARY WARE OF ENAMELLED IRON AND METAL AND PLUMBERS' WARE OF BRASS" },
    { code: "25992", label: "MANUFACTURE OF PLUMBING, HEATING AND RELATED PRODUCTS (INCLUDING PARTS) EXCEPT ELECTRIC" },
    { code: "25993", label: "MANUFACTURE OF BOLTS, NUTS, RIVETS, FASTENERS AND SCREW MACHINE PRODUCTS" },
    { code: "25994", label: "MANUFACTURE OF PIPE FITTINGS" },
    { code: "25995", label: "MANUFACTURE OF SPRINGS" },
    {
        code: "25996",
        label: "MANUFACTURE OF KITCHEN AND HOUSEHOLD UTENSILS (EG STEEL SHELF, SHOWCASE COUNTERS, KITCHEN TROLLEYS DISPLAY RACKS, SINK BOWLS AND OTHER CUSTOMISED KITCHEN EQUIPMENT)"
    },
    { code: "25997", label: "MANUFACTURE OF METAL PRECISION COMPONENTS" },
    { code: "25998", label: "SLITTING, SHEARING AND PASTING OF METAL SHEETING" },
    { code: "25999", label: "MANUFACTURE OF OTHER FABRICATED METAL PRODUCTS N.E.C. (INCLUDING VOICE COIL MAGNETS)" },
    { code: "26111", label: "MANUFACTURE OF DISCRETE DEVICES (EG DIODES, LIGHT-EMITTING DIODES, TRANSISTORS AND RECTIFIERS)" },
    { code: "26112", label: "SEMICONDUCTOR WAFER FABRICATION" },
    { code: "26113", label: "ASSEMBLY AND TESTING OF SEMICONDUCTORS" },
    { code: "26114", label: "MANUFACTURE OF SOLAR WAFERS" },
    { code: "26115", label: "MANUFACTURE OF SOLAR CELLS" },
    { code: "26119", label: "MANUFACTURE OF SEMICONDUCTOR DEVICES N.E.C." },
    { code: "26121", label: "MANUFACTURE OF CAPACITORS" },
    { code: "26122", label: "MANUFACTURE OF RESISTORS" },
    { code: "26123", label: "MANUFACTURE OF PRINTED CIRCUIT BOARDS WITHOUT ELECTRONIC PARTS" },
    { code: "26124", label: "MANUFACTURE OF PRINTED CIRCUIT BOARDS WITH ELECTRONIC PARTS" },
    { code: "26125", label: "MANUFACTURE OF PIEZO-ELECTRIC DEVICES (EG QUARTZ CRYSTALS, QUARTZ CRYSTAL FILTERS, DELAY LINES)" },
    { code: "26126", label: "MANUFACTURE OF ELECTRONIC DISPLAY DEVICES EXCEPT LIGHT EMITTING DIODES" },
    { code: "26127", label: "MANUFACTURE OF ELECTRONIC CONNECTORS" },
    { code: "26129", label: "MANUFACTURE OF OTHER ELECTRONIC COMPONENTS AND BOARDS N.E.C." },
    { code: "26201", label: "MANUFACTURE OF COMPUTERS AND DATA PROCESSING EQUIPMENT EXCEPT COMPUTER PERIPHERAL EQUIPMENT" },
    {
        code: "26202",
        label: "MANUFACTURE OF DISK DRIVES (INCLUDING CD-ROM DRIVES, DVD-ROM DRIVES, OPTICAL DRIVES, FLASH DRIVES, TAPE DRIVES, SOLID STATE DRIVES, STORAGE SUBSYSTEMS)"
    },
    { code: "26203", label: "MANUFACTURE OF PRINTERS" },
    { code: "26204", label: "MANUFACTURE OF SMART CARDS AND RELATED PRODUCTS (EG SMART CARD READERS)" },
    { code: "26209", label: "MANUFACTURE OF COMPUTERS AND PERIPHERAL EQUIPMENT N.E.C." },
    { code: "26301", label: "MANUFACTURE OF TELECOMMUNICATIONS APPARATUS (EG PBX EQUIPMENT, TELEPHONES EXCEPT CELLULAR)" },
    { code: "26302", label: "MANUFACTURE OF NETWORKING PRODUCTS (EG ROUTERS, SWITCHES)" },
    { code: "26303", label: "MANUFACTURE OF WIRELESS COMMUNICATIONS EQUIPMENT (EG CELLULAR PHONES)" },
    { code: "26304", label: "MANUFACTURE OF ELECTRONIC SECURITY SYSTEMS (INCLUDING ELECTRONIC SENSORS, BURGLAR AND FIRE ALARM SYSTEMS)" },
    { code: "26309", label: "MANUFACTURE OF COMMUNICATIONS EQUIPMENT N.E.C." },
    { code: "26400", label: "MANUFACTURE OF CONSUMER ELECTRONICS" },
    { code: "26511", label: "MANUFACTURE AND REPAIR OF ENGINEERING AND SCIENTIFIC INSTRUMENTS" },
    { code: "26512", label: "MANUFACTURE AND REPAIR OF MEASURING DEVICES (EG METERS)" },
    { code: "26513", label: "MANUFACTURE AND REPAIR OF PROCESS CONTROL EQUIPMENT AND RELATED PRODUCTS" },
    { code: "26521", label: "MANUFACTURE OF FULLY ELECTRONIC WATCHES AND CLOCKS" },
    { code: "26522", label: "MANUFACTURE OF ELECTRO-MECHANICAL WATCHES AND CLOCKS (EG WATCHES AND CLOCKS WITH MOVING PARTS AND BATTERY)" },
    { code: "26523", label: "MANUFACTURE OF MECHANICAL WATCHES AND CLOCKS" },
    { code: "26524", label: "MANUFACTURE OF PARTS AND ACCESSORIES FOR WATCHES AND CLOCKS" },
    { code: "26601", label: "MANUFACTURE AND REPAIR OF ELECTROTHERAPEUTIC DEVICES" },
    { code: "26602", label: "MANUFACTURE AND REPAIR OF IRRADIATION AND ELECTROMEDICAL EQUIPMENT AND INSTRUMENTS" },
    { code: "26701", label: "MANUFACTURE OF PHOTOGRAPHIC EQUIPMENT AND PARTS (INCLUDING LENSES)" },
    { code: "26709", label: "MANUFACTURE OF OPTICAL INSTRUMENTS AND PHOTOGRAPHIC EQUIPMENT N.E.C." },
    { code: "26801", label: "MANUFACTURE OF DISK MEDIA" },
    { code: "26802", label: "MANUFACTURE OF BLANK MAGNETIC TAPES, DISKETTES, BLURAY TECHNOLOGY DISCS, CDS, DVDS AND VCDS" },
    { code: "27101", label: "MANUFACTURE AND REPAIR OF ELECTRIC MOTORS" },
    { code: "27102", label: "MANUFACTURE AND REPAIR OF ELECTRIC GENERATORS" },
    { code: "27103", label: "MANUFACTURE AND REPAIR OF TRANSFORMERS" },
    {
        code: "27104",
        label: "MANUFACTURE AND REPAIR OF SWITCHGEAR AND SWITCHBOARD APPARATUS (INCLUDING SWITCHES, CIRCUIT BREAKERS AND ELECTRICAL CONTROL PANELS)"
    },
    {
        code: "27109",
        label: "MANUFACTURE AND REPAIR OF ELECTRIC MOTORS, GENERATORS, TRANSFORMERS AND ELECTRICITY DISTRIBUTION AND CONTROL APPARATUS N.E.C. (EG BUSBAR TRUNKING)"
    },
    { code: "27201", label: "MANUFACTURE OF PRIMARY BATTERIES" },
    { code: "27202", label: "MANUFACTURE OF SECONDARY BATTERIES" },
    { code: "27321", label: "MANUFACTURE OF TELECOMMUNICATIONS CABLES AND WIRES" },
    { code: "27322", label: "MANUFACTURE OF ELECTRIC POWER CABLES AND WIRES" },
    { code: "27323", label: "MANUFACTURE OF ENAMELLED WIRES (USED FOR WINDING OF MOTORS, TRANSFORMERS ETC)" },
    { code: "27324", label: "MANUFACTURE OF WIRE AND CABLE ASSEMBLIES AND HARNESSES" },
    { code: "27329", label: "MANUFACTURE OF OTHER ELECTRONIC AND ELECTRIC WIRES AND CABLES N.E.C." },
    { code: "27330", label: "MANUFACTURE AND REPAIR OF WIRING DEVICES" },
    {
        code: "27400",
        label: "MANUFACTURE AND REPAIR OF ELECTRIC LAMPS AND LIGHTING EQUIPMENT (INCLUDING SILVER REFLECTORS, FITTINGS AND PARTS)"
    },
    {
        code: "27501",
        label: "MANUFACTURE OF ELECTRICAL HOUSEHOLD APPLIANCES (EG REFRIGERATORS, HOT PLATES, TOASTERS, FOOD MIXERS, COOKERS, HAIR DRYERS, FANS, SHAVERS)"
    },
    { code: "27509", label: "MANUFACTURE OF DOMESTIC APPLIANCES N.E.C. (EG NON-ELECTRIC COOKING RANGES, GRATES, STOVES)" },
    { code: "27901", label: "MANUFACTURE OF FUEL CELLS" },
    {
        code: "27902",
        label: "MANUFACTURE OF ELECTRICAL MACHINERY, APPARATUS, APPLIANCES AND SUPPLIES (INCLUDING SOUND OR VISUAL SIGNALLING APPARATUS, ELECTRICAL INSULATORS EXCEPT PORCELAIN OR GLASS)"
    },
    { code: "28111", label: "MANUFACTURE AND REPAIR OF ENGINES AND TURBINES EXCEPT AIRCRAFT, VEHICLE, CYCLE AND MARINE ENGINES" },
    { code: "28112", label: "MANUFACTURE AND REPAIR OF MARINE ENGINE" },
    { code: "28121", label: "MANUFACTURE AND REPAIR OF PUMPS (EG HYDRAULIC PUMPS, DRAINAGE PUMPS)" },
    { code: "28122", label: "MANUFACTURE AND REPAIR OF TAPS, COCKS AND VALVES" },
    { code: "28129", label: "MANUFACTURE AND REPAIR OF PUMPS, COMPRESSORS, TAPS AND VALVES N.E.C." },
    { code: "28141", label: "MANUFACTURE OF BEARINGS (INCLUDING DISC AND BALL BEARINGS)" },
    { code: "28142", label: "MANUFACTURE AND REPAIR OF GEARS, GEARING AND DRIVING ELEMENTS" },
    { code: "28150", label: "MANUFACTURE AND REPAIR OF OVENS, FURNACES AND FURNACE BURNERS" },
    { code: "28161", label: "MANUFACTURE AND REPAIR OF LIFTING AND HOISTING MACHINERY EXCEPT ELECTRICAL" },
    { code: "28162", label: "MANUFACTURE AND REPAIR OF LIFTS AND ESCALATORS" },
    {
        code: "28169",
        label: "MANUFACTURE AND REPAIR OF LIFTING AND HANDLING EQUIPMENT N.E.C. (INCLUDING CONVEYING SYSTEMS, ROBOTS, INDUSTRIAL AUTOMATED SYSTEMS AND AUTOMATED GUIDED VEHICLES)"
    },
    { code: "28171", label: "MANUFACTURE OF OFFICE MACHINERY AND EQUIPMENT (EXCEPT COMPUTERS AND PERIPHERAL EQUIPMENT)" },
    { code: "28172", label: "REPAIR AND MAINTENANCE OF OFFICE MACHINERY AND EQUIPMENT" },
    {
        code: "28191",
        label: "MANUFACTURE AND REPAIR OF REFRIGERATING, AIR-CONDITIONING AND VENTILATING MACHINERY AND EQUIPMENT EXCEPT HOUSEHOLD REFRIGERATORS"
    },
    { code: "28192", label: "MANUFACTURE AND REPAIR OF LASER EQUIPMENT" },
    { code: "28193", label: "MANUFACTURE AND REPAIR OF SEPARATION/MIXING EQUIPMENT (EG FILTERS, SEPARATORS, MIXERS)" },
    { code: "28194", label: "MANUFACTURE AND REPAIR OF SOLAR MODULES AND PANELS" },
    { code: "28195", label: "MANUFACTURE AND REPAIR OF WELDING AND SOLDERING EQUIPMENT (INCLUDING ARC WELDING ELECTRODES)" },
    { code: "28196", label: "MANUFACTURE AND REPAIR OF PACKAGING MACHINERY" },
    {
        code: "28199",
        label: "MANUFACTURE AND REPAIR OF OTHER GENERAL PURPOSE MACHINERY AND EQUIPMENT EXCEPT ELECTRICAL AND ELECTRONIC N.E.C."
    },
    { code: "28210", label: "MANUFACTURE AND REPAIR OF AGRICULTURAL AND FORESTRY MACHINERY" },
    {
        code: "28221 - MANUFACTURE AND REPAIR OF MACHINERY AND MACHINE-TOOLS",
        label: "METAL CUTTING TYPES (EG LATHES, MILLING MACHINES, SHAPING MACHINES)"
    },
    {
        code: "28222 - MANUFACTURE AND REPAIR OF MACHINERY AND MACHINE-TOOLS",
        label: "METAL FORMING TYPES (EG FORGING PRESS, COLD HEADING MACHINES, PRESS BREAKS)"
    },
    { code: "28223", label: "MANUFACTURE OF DIES, MOULDS, TOOLS, JIGS AND FIXTURES" },
    {
        code: "28224",
        label: "MANUFACTURE OF MACHINE TOOL ACCESSORIES (EG SMALL CUTTING TOOLS, PRECISION MEASURING TOOLS AND OTHER ATTACHMENTS SUCH AS TOOL HOLDERS)"
    },
    { code: "28229", label: "MANUFACTURE AND REPAIR OF METAL-FORMING MACHINERY AND MACHINE TOOLS N.E.C. (INCLUDING METALWORKING MACHINERY)" },
    { code: "28241", label: "MANUFACTURE AND REPAIR OF OIL RIGS" },
    { code: "28242", label: "MANUFACTURE AND REPAIR OF OTHER OILFIELD AND GASFIELD MACHINERY AND EQUIPMENT (EG DERRICKS, TOOL JOINTS)" },
    { code: "28243", label: "MANUFACTURE AND REPAIR OF CONSTRUCTION MACHINERY AND PARTS" },
    { code: "28249", label: "MANUFACTURE AND REPAIR OF MACHINERY FOR MINING, QUARRYING AND CONSTRUCTION N.E.C." },
    { code: "28251", label: "MANUFACTURE AND REPAIR OF MACHINERY FOR FOOD PRODUCTS PROCESSING" },
    { code: "28252", label: "MANUFACTURE AND REPAIR OF MACHINERY FOR BEVERAGE PRODUCTION" },
    { code: "28253", label: "MANUFACTURE AND REPAIR OF MACHINERY FOR TOBACCO PROCESSING" },
    { code: "28260", label: "MANUFACTURE AND REPAIR OF MACHINERY FOR TEXTILE, APPAREL AND LEATHER PRODUCTION" },
    { code: "28271", label: "MANUFACTURE OF PROBE CARDS" },
    { code: "28272", label: "MANUFACTURE OF BONDING TOOLS" },
    { code: "28273", label: "MANUFACTURE AND REPAIR OF SEMICONDUCTOR ASSEMBLY AND TESTING EQUIPMENT (INCLUDING COMPUTER BURN-IN SYSTEM)" },
    { code: "28274", label: "MANUFACTURE AND REPAIR OF SEMICONDUCTOR FOUNDRY EQUIPMENT" },
    { code: "28291", label: "MANUFACTURE AND REPAIR OF WATER/WASTE WATER TREATMENT EQUIPMENT" },
    { code: "28292", label: "MANUFACTURE AND REPAIR OF PLASTIC PROCESSING MACHINERY" },
    { code: "28293", label: "MANUFACTURE AND REPAIR OF WOODWORKING MACHINERY" },
    {
        code: "28299",
        label: "MANUFACTURE AND REPAIR OF OTHER SPECIAL PURPOSE MACHINERY N.E.C. (INCLUDING PLATING EQUIPMENT, INDUSTRIAL PAINT MIXERS AND CHEMICAL MIXING EQUIPMENT)"
    },
    { code: "28300", label: "INSTALLATION OF INDUSTRIAL MACHINERY AND EQUIPMENT, MECHANICAL ENGINEERING WORKS" },
    { code: "29100", label: "MANUFACTURE AND ASSEMBLY OF MOTOR VEHICLES" },
    { code: "29200", label: "MANUFACTURE OF MOTOR VEHICLE BODIES (COACHWORK), TRAILERS AND SEMI-TRAILERS" },
    {
        code: "29300",
        label: "MANUFACTURE OF PARTS AND ACCESSORIES FOR MOTOR VEHICLES (EG ENGINE PARTS, BRAKES, CLUTCHES, AXLES, GEAR BOXES)"
    },
    {
        code: "30110",
        label: "BUILDING AND REPAIRING OF SHIPS, TANKERS AND OTHER OCEAN-GOING VESSELS (INCLUDING CONVERSION OF SHIPS INTO OFF-SHORE STRUCTURES)"
    },
    { code: "30120", label: "BUILDING AND REPAIR OF PLEASURE CRAFTS, LIGHTERS AND BOATS" },
    {
        code: "30200",
        label: "MANUFACTURE AND REPAIR OF RAILWAY AND TRAMWAY LOCOMOTIVES AND ROLLING STOCK (INCLUDING SPECIALISED PARTS EXCEPT ENGINES, ELECTRIC MOTORS AND SIGNALLING EQUIPMENT)"
    },
    { code: "30301", label: "MANUFACTURE AND ASSEMBLY OF AIRCRAFT AND SPACECRAFT (INCLUDING AIRCRAFT ENGINES AND OTHER PARTS)" },
    { code: "30302", label: "REPAIR AND SERVICING OF AIRCRAFT AND SPACECRAFT (INCLUDING AIRCRAFT ENGINES AND OTHER PARTS)" },
    { code: "30400", label: "MANUFACTURE OF MILITARY FIGHTING VEHICLES" },
    { code: "30910", label: "MANUFACTURE AND ASSEMBLY OF MOTORCYCLES AND SCOOTERS (INCLUDING ENGINES AND OTHER PARTS AND ACCESSORIES)" },
    {
        code: "30920",
        label: "MANUFACTURE AND ASSEMBLY OF BICYCLES, TRICYCLES, TRISHAWS AND INVALID CARRIAGES (INCLUDING PARTS AND ACCESSORIES)"
    },
    { code: "30990", label: "MANUFACTURE OF OTHER TRANSPORT EQUIPMENT N.E.C. (EG CARTS, WAGONS)" },
    { code: "31001", label: "MANUFACTURE OF FURNITURE AND FIXTURES OF WOOD (INCLUDING UPHOLSTERY)" },
    { code: "31002", label: "MANUFACTURE OF FURNITURE OF RATTAN AND CANE" },
    { code: "31003", label: "MANUFACTURE OF FURNITURE AND FIXTURES PRIMARILY OF METAL" },
    { code: "31004", label: "MANUFACTURE OF FURNITURE OF OTHER MATERIALS EXCEPT PRIMARILY OF STONE, CERAMIC OR CONCRETE" },
    { code: "31005", label: "MANUFACTURE OF WINDOW AND DOOR SCREENS AND SHADES" },
    { code: "31006", label: "MANUFACTURE OF MATTRESSES INCLUDING THOSE OF FOAM RUBBER" },
    { code: "31009", label: "MANUFACTURE OF FURNITURE N.E.C." },
    { code: "32111", label: "MANUFACTURE OF JEWELLERY EXCEPT COSTUME JEWELLERY" },
    { code: "32112", label: "MANUFACTURE OF PEWTER WARE" },
    { code: "32119", label: "MANUFACTURE OF JEWELLERY AND RELATED ARTICLES N.E.C. (EXCEPT COSTUME JEWELLERY)" },
    { code: "32120", label: "MANUFACTURE OF COSTUME JEWELLERY AND RELATED ARTICLES" },
    { code: "32200", label: "MANUFACTURE OF MUSICAL INSTRUMENTS" },
    { code: "32300", label: "MANUFACTURE OF SPORTING AND ATHLETIC GOODS (INCLUDING GYM, DIVING AND UNDERWATER EQUIPMENT)" },
    { code: "32400", label: "MANUFACTURE OF GAMES AND TOYS" },
    { code: "32501", label: "MANUFACTURE OF MEDICAL RESEARCH AND CLINICAL DIAGNOSTIC INSTRUMENTS AND SUPPLIES (EG REAGENTS)" },
    {
        code: "32502",
        label: "MANUFACTURE OF MEDICAL DISPOSABLES AND SURGICAL SUPPLIES (EG TEST KITS, SYRINGES, TUBES, FLUID ADMINISTRATION SETS)"
    },
    { code: "32503", label: "MANUFACTURE OF IMPLANTABLES AND ARTIFICIAL LIMBS (EG HEART VALVES, STENTS, ORTHOPAEDIC IMPLANTS)" },
    { code: "32504", label: "MANUFACTURE OF OPHTHALMIC GOODS (EG SPECTACLES, CONTACT LENSES AND PARTS)" },
    { code: "32509", label: "MANUFACTURE OF MEDICAL AND DENTAL TOOLS, INSTRUMENTS AND SUPPLIES N.E.C." },
    { code: "32901", label: "MANUFACTURE OF MATCHES" },
    { code: "32902", label: "MANUFACTURE OF UMBRELLAS" },
    { code: "32903", label: "MANUFACTURE OF PENS, PENCILS, STENCILS AND OTHER OFFICE MATERIALS" },
    { code: "32904", label: "MANUFACTURE OF WIGS AND RELATED ARTICLES" },
    { code: "32905", label: "MANUFACTURE OF IDENTIFICATION PLATES, BADGES, EMBLEMS AND TAGS" },
    { code: "32906", label: "MANUFACTURE OF SIGNS AND ADVERTISING DISPLAYS (INCLUDING NEON-LIGHTING)" },
    { code: "32909", label: "OTHER MANUFACTURING INDUSTRIES N.E.C." },
    { code: "35101", label: "GENERATION OF ELECTRICITY BY FOSSIL FUELS" },
    { code: "35102", label: "GENERATION OF ELECTRICITY BY OTHER SOURCES (EG SOLAR POWER, BIOFUELS ETC)" },
    { code: "35103", label: "TRANSMISSION, DISTRIBUTION AND SALE OF ELECTRICITY" },
    { code: "35104", label: "OTHER RELATED SERVICES (EG ELECTRICITY BROKERS, METER READING)" },
    { code: "35201", label: "MANUFACTURE OF GAS; DISTRIBUTION OF GASEOUS FUELS THROUGH MAINS" },
    { code: "35202", label: "PROCESSING OF NATURAL GAS" },
    { code: "35203", label: "OTHER RELATED SERVICES (EG ARRANGING FOR SALE OF NATURAL GAS)" },
    { code: "35300", label: "STEAM AND AIR-CONDITIONING SUPPLY" },
    { code: "36000", label: "COLLECTION, PURIFICATION AND DISTRIBUTION OF WATER (INCLUDING DESALINATION OF WATER)" },
    { code: "37000", label: "OPERATION OF SEWER SYSTEMS (INCLUDING SEWER TREATMENT FACILITIES)" },
    { code: "38100", label: "COLLECTION OF WASTE" },
    { code: "38200", label: "TREATMENT AND DISPOSAL OF WASTE (INCLUDING REMEDIATION ACTIVITIES)" },
    { code: "38301", label: "RECYCLING OF METAL WASTE AND SCRAP" },
    { code: "38309", label: "RECYCLING OF NON-METAL WASTE N.E.C. (EG MARINE CLAY AND OIL SLUDGE)" },
    { code: "41001", label: "GENERAL CONTRACTORS (BUILDING CONSTRUCTION INCLUDING MAJOR UPGRADING WORKS)" },
    { code: "41002", label: "STRUCTURAL REPAIR CONTRACTORS" },
    { code: "41009", label: "BUILDING CONSTRUCTION N.E.C." },
    { code: "42101", label: "GENERAL CONTRACTORS (NON-BUILDING CONSTRUCTION)" },
    { code: "42102", label: "ROAD CONSTRUCTION" },
    { code: "42103", label: "BRIDGE, TUNNEL, VIADUCT AND ELEVATED HIGHWAY CONSTRUCTION" },
    { code: "42201", label: "WATER AND GAS PIPE-LINE AND SEWER CONSTRUCTION" },
    { code: "42202", label: "COMMUNICATIONS AND POWER LINE CONSTRUCTION" },
    { code: "42901", label: "LAND RECLAMATION WORKS" },
    { code: "42902", label: "DAM AND DRAINAGE CONSTRUCTION" },
    { code: "42903", label: "MARINE CONSTRUCTION (EG HARBOURS, PIERS, DOCKS, WHARVES)" },
    { code: "42909", label: "CONSTRUCTION OF OTHER CIVIL ENGINEERING PROJECTS N.E.C. (EG PLAYGROUND SYSTEMS)" },
    { code: "43110", label: "WRECKING AND DEMOLITION WORKS" },
    { code: "43121", label: "SOIL INVESTIGATION, TREATMENT AND STABILISATION (INCLUDING GROUTING AND GUNITING)" },
    { code: "43122", label: "EXCAVATION AND EARTHMOVING WORKS" },
    { code: "43129", label: "SITE PREPARATION N.E.C." },
    { code: "43210", label: "ELECTRICAL WORKS" },
    { code: "43220", label: "PLUMBING, HEATING (NON-ELECTRIC) AND AIR-CONDITIONING" },
    { code: "43291", label: "INSTALLATION AND ERECTION OF BUILDING EQUIPMENT (EG LIFTS, ESCALATORS, TRAVELLATORS)" },
    { code: "43292", label: "INSTALLATION OF FIRE PROTECTION AND SECURITY ALARM SYSTEMS" },
    { code: "43293", label: "INSTALLATION OF BUILDING AUTOMATED SYSTEMS FOR REMOTE MONITORING" },
    { code: "43294", label: "INSTALLATION OF AWNING AND WINDOW SHADES" },
    { code: "43295", label: "INSTALLATION OF THERMAL AND SOUND INSULATION (INCLUDING SOLAR CONTROL FILMS)" },
    { code: "43296", label: "SIGNCRAFT INSTALLATION" },
    { code: "43299", label: "OTHER CONSTRUCTION INSTALLATION N.E.C." },
    { code: "43301", label: "RENOVATION CONTRACTORS" },
    { code: "43302", label: "TILE SETTING AND PLASTERING" },
    { code: "43303", label: "JOINERY AND OTHER WOODWORKS (EG LAMINATED OR PARQUET FLOORING)" },
    { code: "43304", label: "PAINTING AND DECORATING" },
    { code: "43305", label: "GLASS AND GLAZING WORKS (INCLUDING MIRROR AND SHOWER SCREEN INSTALLATION)" },
    { code: "43306", label: "CURTAIN WALLING/CLADDING WORKS" },
    { code: "43307", label: "INSTALLATION OF DOORS, GATES, GRILLES AND WINDOWS" },
    { code: "43309", label: "BUILDING COMPLETION AND FINISHING N.E.C." },
    { code: "43901", label: "FOUNDATION WORKS (INCLUDING MICROPILING, CONVENTIONAL PILING AND UNDERPINNING)" },
    { code: "43902", label: "BRICK LAYING, STONE SETTING AND CEMENT WORKS" },
    { code: "43903", label: "ROOFING WORKS (INCLUDING TIMBER CARCASSING)" },
    { code: "43904", label: "PRODUCTION OF PRE-CAST CONCRETE COMPONENTS" },
    { code: "43905", label: "SCAFFOLDING WORKS" },
    { code: "43906", label: "SANDBLASTING/SHOTBLASTING WORKS (EXCEPT SHIPS)" },
    { code: "43909", label: "OTHER SPECIALISED CONSTRUCTION AND RELATED ACTIVITIES N.E.C." },
    { code: "46100", label: "WHOLESALE ON A FEE OR CONTRACT BASIS (EG COMMISSION AGENTS)" },
    { code: "46211", label: "WHOLESALE OF CUT FLOWERS AND PLANTS" },
    { code: "46212", label: "WHOLESALE OF AQUARIUM FISHES (INCLUDING FOOD AND ACCESSORIES)" },
    { code: "46213", label: "WHOLESALE OF PET BIRDS AND ANIMALS (INCLUDING FOOD AND ACCESSORIES)" },
    { code: "46219", label: "WHOLESALE OF AGRICULTURAL RAW MATERIALS AND LIVE ANIMALS EXCEPT TROPICAL PRODUCE N.E.C." },
    { code: "46221", label: "WHOLESALE OF RUBBER (INCLUDING RUBBER BROKERS)" },
    { code: "46222", label: "WHOLESALE OF PEPPER AND OTHER SPICES" },
    { code: "46223", label: "WHOLESALE OF COFFEE, COCOA AND TEA" },
    { code: "46224", label: "WHOLESALE OF COCONUT" },
    { code: "46225", label: "WHOLESALE OF PALM OIL" },
    { code: "46229", label: "WHOLESALE OF TROPICAL PRODUCE N.E.C." },
    { code: "46301", label: "WHOLESALE OF FRUITS AND VEGETABLES" },
    { code: "46302", label: "WHOLESALE OF LIVESTOCK, MEAT, POULTRY, EGGS AND SEAFOOD" },
    { code: "46303", label: "WHOLESALE OF CEREALS, SUGAR, OILS, SAUCES AND DAIRY PRODUCTS" },
    { code: "46304", label: "WHOLESALE OF CONFECTIONERY AND BAKERY PRODUCTS" },
    { code: "46305", label: "WHOLESALE OF ICE-CREAM" },
    { code: "46306", label: "WHOLESALE OF HEALTH SUPPLEMENTS" },
    { code: "46307", label: "WHOLESALE OF LIQUOR AND SOFT DRINKS" },
    { code: "46308", label: "WHOLESALE OF TOBACCO PRODUCTS" },
    { code: "46309", label: "WHOLESALE OF FOOD, BEVERAGES AND TOBACCO N.E.C." },
    { code: "46411", label: "WHOLESALE OF TEXTILES" },
    { code: "46412", label: "WHOLESALE OF WEARING APPAREL FOR ADULTS" },
    { code: "46413", label: "WHOLESALE OF CHILDREN AND INFANTS' WEAR (INCLUDING PRODUCTS AND ACCESSORIES FOR INFANTS)" },
    { code: "46414", label: "WHOLESALE OF FOOTWEAR" },
    { code: "46415", label: "WHOLESALE OF BAGS, LUGGAGE AND TRAVEL ACCESSORIES" },
    { code: "46416", label: "WHOLESALE OF SEWING AND CLOTHING ACCESSORIES (EG BUTTON, THREAD, LACE, ZIP)" },
    { code: "46421", label: "WHOLESALE OF JEWELLERY" },
    { code: "46422", label: "WHOLESALE OF COSTUME JEWELLERY" },
    { code: "46423", label: "WHOLESALE OF WATCHES AND CLOCKS" },
    { code: "46424", label: "WHOLESALE OF COSMETICS AND TOILETRIES" },
    { code: "46429", label: "WHOLESALE OF PERSONAL EFFECTS N.E.C." },
    { code: "46431", label: "WHOLESALE OF FURNITURE (INCLUDING MATTRESSES, CUSHIONS)" },
    { code: "46432", label: "WHOLESALE OF FURNISHINGS (INCLUDING CURTAINS, CARPETS, WALLPAPER)" },
    { code: "46433", label: "WHOLESALE OF LIGHTING AND LIGHTING ACCESSORIES" },
    { code: "46434", label: "WHOLESALE OF CROCKERY, CUTLERY AND KITCHEN UTENSILS" },
    { code: "46435", label: "WHOLESALE OF HOUSEHOLD ELECTRICAL APPLIANCES AND EQUIPMENT (INCLUDING HOUSEHOLD AIR-CONDITIONERS)" },
    {
        code: "46436",
        label: "WHOLESALE OF AUDIO AND VIDEO EQUIPMENT EXCEPT ELECTRICAL AND ELECTRONIC COMPONENTS (EG RADIO AND TELEVISION SETS, SOUND REPRODUCING AND RECORDING EQUIPMENT)"
    },
    { code: "46437", label: "WHOLESALE OF MUSICAL INSTRUMENTS AND SCORES" },
    { code: "46439", label: "WHOLESALE OF FURNITURE, HOME FURNISHINGS AND OTHER HOUSEHOLD EQUIPMENT N.E.C." },
    { code: "46441", label: "WHOLESALE OF SPORTING GOODS AND EQUIPMENT (INCLUDING BICYCLES AND HEALTHCARE EQUIPMENT)" },
    { code: "46442", label: "WHOLESALE OF MUSIC AND VIDEO RECORDINGS (EG RECORD ALBUMS, COMPACT DISCS, VCDS, DVDS)" },
    { code: "46443", label: "WHOLESALE OF TOYS AND GAMES" },
    { code: "46444", label: "WHOLESALE OF COMPUTER GAMES (INCLUDING ELECTRONIC GAMES AND VIDEO GAME CONSOLES)" },
    { code: "46449", label: "WHOLESALE OF SPORTING AND OTHER RECREATIONAL GOODS N.E.C." },
    { code: "46451", label: "WHOLESALE OF ANTIQUES AND WORKS OF ART" },
    { code: "46452", label: "WHOLESALE OF HANDICRAFTS AND GIFTS" },
    { code: "46453", label: "WHOLESALE OF ARTIFICIAL FLOWERS AND PLANTS" },
    { code: "46459", label: "WHOLESALE OF HANDICRAFTS AND FANCY GOODS N.E.C." },
    { code: "46461", label: "WHOLESALE OF MEDICINAL AND PHARMACEUTICAL PRODUCTS (WESTERN)" },
    { code: "46462", label: "WHOLESALE OF MEDICINE AND HERBS (OTHER THAN WESTERN)" },
    { code: "46471", label: "WHOLESALE OF PAPER AND PAPER PRODUCTS" },
    { code: "46472", label: "WHOLESALE OF PACKAGING MATERIALS" },
    { code: "46473", label: "WHOLESALE OF STATIONERY" },
    { code: "46474", label: "WHOLESALE OF BOOKS AND MAGAZINES" },
    { code: "46479", label: "WHOLESALE OF PAPER, PAPER AND CELLOPHANE PRODUCTS AND STATIONERY N.E.C." },
    { code: "46491", label: "WHOLESALE OF OPTICAL EQUIPMENT AND SUPPLIES (EXCLUDING BINOCULARS)" },
    { code: "46492", label: "WHOLESALE OF PHOTOGRAPHIC EQUIPMENT AND SUPPLIES (INCLUDING BINOCULARS)" },
    { code: "46499", label: "WHOLESALE OF OTHER HOUSEHOLD GOODS N.E.C." },
    { code: "46511", label: "WHOLESALE OF COMPUTER HARDWARE AND PERIPHERAL EQUIPMENT" },
    { code: "46512", label: "WHOLESALE OF COMPUTER SOFTWARE (EXCEPT GAMES)" },
    { code: "46513", label: "WHOLESALE OF COMPUTER ACCESSORIES (EG MEMORY CARDS, COMPUTER CABLES)" },
    { code: "46521", label: "WHOLESALE OF TELECOMMUNICATIONS EQUIPMENT" },
    { code: "46522", label: "WHOLESALE OF ELECTRONIC COMPONENTS" },
    {
        code: "46523",
        label: "WHOLESALE OF HANDPHONES AND OTHER TELECOMMUNICATIONS APPARATUS (EG PALMTOPS, SMART WATCHES, WEARABLE COMPUTER AND ELECTRONIC BOOKS)"
    },
    { code: "46530", label: "WHOLESALE OF AGRICULTURAL MACHINERY, EQUIPMENT AND SUPPLIES" },
    { code: "46541", label: "WHOLESALE OF INDUSTRIAL MACHINERY AND EQUIPMENT" },
    { code: "46542", label: "WHOLESALE OF CONSTRUCTION EQUIPMENT (EG CONCRETE MIXER)" },
    { code: "46543", label: "WHOLESALE OF LIFTS, ESCALATORS AND INDUSTRIAL AND OFFICE AIR-CONDITIONING EQUIPMENT" },
    { code: "46544", label: "WHOLESALE OF ELECTRICAL AND WIRING ACCESSORIES" },
    { code: "46549", label: "WHOLESALE OF INDUSTRIAL, CONSTRUCTION AND RELATED MACHINERY AND EQUIPMENT N.E.C." },
    { code: "46551", label: "WHOLESALE OF MARINE EQUIPMENT AND ACCESSORIES (INCLUDING MARINE NAVIGATIONAL EQUIPMENT AND RADAR)" },
    { code: "46552", label: "WHOLESALE OF AIRCRAFT EQUIPMENT AND SUPPLIES (INCLUDING AERONAUTICAL EQUIPMENT)" },
    { code: "46559", label: "WHOLESALE OF TRANSPORT EQUIPMENT EXCEPT MOTOR VEHICLES AND MOTORCYCLES N.E.C." },
    { code: "46561", label: "WHOLESALE OF MOTOR VEHICLES EXCEPT MOTORCYCLES AND SCOOTERS" },
    { code: "46562", label: "WHOLESALE OF MOTORCYCLES AND SCOOTERS" },
    { code: "46563", label: "WHOLESALE OF PARTS AND ACCESSORIES FOR VEHICLES" },
    { code: "46591", label: "WHOLESALE OF OFFICE MACHINES AND EQUIPMENT (INCLUDING ACCESSORIES)" },
    { code: "46592", label: "WHOLESALE OF MEDICAL, PROFESSIONAL, SCIENTIFIC AND PRECISION EQUIPMENT" },
    { code: "46593", label: "WHOLESALE OF COMMERCIAL FOOD SERVICE EQUIPMENT (EG HOTEL KITCHEN EQUIPMENT)" },
    { code: "46594", label: "WHOLESALE OF SERVICE ESTABLISHMENT EQUIPMENT AND SUPPLIES (EG BEAUTY SALON EQUIPMENT)" },
    { code: "46595", label: "WHOLESALE OF SECURITY AND FIRE-FIGHTING EQUIPMENT" },
    { code: "46599", label: "WHOLESALE OF OTHER MACHINERY AND EQUIPMENT N.E.C." },
    { code: "46611", label: "WHOLESALE OF CRUDE PETROLEUM" },
    { code: "46612", label: "WHOLESALE OF MINERAL FUELS AND LUBRICANTS" },
    { code: "46619", label: "WHOLESALE OF SOLID, LIQUID AND GASEOUS FUELS AND RELATED PRODUCTS N.E.C. (EG BITUMEN)" },
    { code: "46620", label: "WHOLESALE OF METALS AND METAL ORES EXCEPT GENERAL HARDWARE (EG STEEL PIPES)" },
    { code: "46631", label: "WHOLESALE OF LOGS, SAWN TIMBER, PLYWOOD AND RELATED PRODUCTS" },
    { code: "46632", label: "WHOLESALE OF GENERAL HARDWARE (EG LOCKS, HINGES)" },
    { code: "46633", label: "WHOLESALE OF STRUCTURAL CLAY AND CONCRETE PRODUCTS (EG MOSAIC TILES, BRICKS)" },
    { code: "46634", label: "WHOLESALE OF PAINTS (INCLUDING VARNISHES AND SUPPLIES)" },
    { code: "46635", label: "WHOLESALE OF GLASS" },
    {
        code: "46639",
        label: "WHOLESALE OF CONSTRUCTION MATERIALS, HARDWARE, PLUMBING AND HEATING EQUIPMENT AND SUPPLIES N.E.C. (EG CEMENT, SAND)"
    },
    { code: "46641", label: "WHOLESALE OF BASIC INDUSTRIAL CHEMICALS (EXCEPT FERTILISERS)" },
    { code: "46642", label: "WHOLESALE OF CHEMICAL FERTILISERS" },
    { code: "46643", label: "WHOLESALE OF PETROCHEMICAL PRODUCTS" },
    { code: "46649", label: "WHOLESALE OF CHEMICALS AND CHEMICAL PRODUCTS N.E.C." },
    { code: "46651", label: "WHOLESALE OF SCRAP, JUNK AND WASTE DEALERS" },
    { code: "46659", label: "WHOLESALE OF OTHER INTERMEDIATE PRODUCTS, WASTE AND SCRAP N.E.C." },
    { code: "46661", label: "SHIP CHANDLERS" },
    { code: "46662", label: "SHIP BUNKERING" },
    { code: "46691", label: "WHOLESALE OF ANIMAL FEED" },
    { code: "46692", label: "WHOLESALE OF LEATHER AND PVC MATERIALS" },
    { code: "46693", label: "WHOLESALE OF JOSS PAPER, JOSS STICKS AND OTHER CEREMONIAL PRODUCTS" },
    { code: "46694", label: "WHOLESALE OF RATTAN" },
    { code: "46695", label: "WHOLESALE OF INDUSTRIAL ICE (DRY ICE)" },
    { code: "46699", label: "WHOLESALE OF OTHER SPECIFIC COMMODITIES N.E.C." },
    { code: "46900", label: "GENERAL WHOLESALE TRADE (INCLUDING GENERAL IMPORTERS AND EXPORTERS)" },
    { code: "47111", label: "SUPERMARKETS" },
    { code: "47112", label: "MINI-MARTS, CONVENIENCE STORES AND PROVISION SHOPS" },
    { code: "47191", label: "DEPARTMENT STORES" },
    { code: "47192", label: "DEPARTMENT STORES CUM SUPERMARKETS (INCLUDING HYPERMARKETS)" },
    { code: "47199", label: "RETAIL SALE IN OTHER NON-SPECIALISED STORES N.E.C." },
    { code: "47211", label: "RETAIL SALE OF FRUITS AND VEGETABLES" },
    { code: "47212", label: "RETAIL SALE OF MEAT, POULTRY, EGGS AND SEAFOOD" },
    { code: "47213", label: "RETAIL SALE OF CONFECTIONERY AND BAKERY PRODUCTS (NOT MANUFACTURED ON SITE)" },
    { code: "47214", label: "RETAIL SALE OF HEALTH SUPPLEMENTS" },
    { code: "47219", label: "RETAIL SALE OF FOOD N.E.C." },
    { code: "47220", label: "RETAIL SALE OF BEVERAGES" },
    { code: "47230", label: "RETAIL SALE OF TOBACCO PRODUCTS" },
    { code: "47311", label: "RETAIL SALE OF MOTOR VEHICLES EXCEPT MOTORCYCLES AND SCOOTERS" },
    { code: "47312", label: "RETAIL SALE OF MOTORCYCLES AND SCOOTERS" },
    { code: "47313", label: "RETAIL SALE OF TYRES AND BATTERIES" },
    { code: "47314", label: "RETAIL SALE OF SPARE PARTS AND ACCESSORIES FOR MOTOR VEHICLES" },
    { code: "47320", label: "RETAIL SALE OF AUTOMOTIVE FUEL (EG PETROL KIOSKS, CNG REFILLING STATIONS)" },
    { code: "47411", label: "RETAIL SALE OF HANDPHONES AND OTHER TELECOMMUNICATIONS APPARATUS" },
    { code: "47412", label: "RETAIL SALE OF COMPUTER HARDWARE AND ACCESSORIES AND COMPUTER SOFTWARE (EXCEPT GAMES)" },
    { code: "47413", label: "RETAIL SALE OF COMPUTER GAMES (INCLUDING ELECTRONIC GAMES AND VIDEO GAME CONSOLES)" },
    { code: "47414", label: "RETAIL SALE OF COMPUTER AND OFFICE EQUIPMENT CONSUMABLES (EG PRINTER CARTRIDGES)" },
    {
        code: "47420",
        label: "RETAIL SALE OF AUDIO AND VIDEO EQUIPMENT (EG RADIO AND TELEVISION SETS, SOUND REPRODUCING AND RECORDING EQUIPMENT)"
    },
    { code: "47510", label: "RETAIL SALE OF TEXTILES" },
    { code: "47521", label: "RETAIL SALE OF PAINTS" },
    { code: "47522", label: "RETAIL SALE OF HARDWARE (EG CHAINS, CHANGKOLS, AXES)" },
    { code: "47529", label: "RETAIL SALE OF HARDWARE, PAINT AND GLASS N.E.C. (EG WOOD, GLASS, SANITARY WARE, DO-IT-YOURSELF MATERIALS)" },
    { code: "47531", label: "RETAIL SALE OF FURNITURE (INCLUDING MATTRESSES, CUSHIONS)" },
    { code: "47532", label: "RETAIL SALE OF FURNISHINGS (EG CURTAINS, CARPETS, PILLOW CASES)" },
    { code: "47533", label: "RETAIL SALE OF LIGHTING AND LIGHTING ACCESSORIES" },
    { code: "47534", label: "RETAIL SALE OF CROCKERY, CUTLERY AND KITCHEN UTENSILS" },
    {
        code: "47535",
        label: "RETAIL SALE OF HOUSEHOLD ELECTRICAL APPLIANCES AND EQUIPMENT (EG VACUUM CLEANERS, WASHING MACHINES, REFRIGERATORS)"
    },
    { code: "47536", label: "RETAIL SALE OF MUSICAL INSTRUMENTS AND SCORES" },
    { code: "47537", label: "RETAIL SALE OF SECURITY AND FIRE-FIGHTING EQUIPMENT" },
    {
        code: "47539",
        label: "RETAIL SALE OF ELECTRICAL HOUSEHOLD APPLIANCES, FURNITURE, LIGHTING EQUIPMENT AND OTHER HOUSEHOLD ARTICLES N.E.C."
    },
    { code: "47610", label: "RETAIL SALE OF BOOKS, NEWSPAPERS AND STATIONERY (INCLUDING NEWSVENDORS)" },
    { code: "47620", label: "RETAIL SALE OF MUSIC AND VIDEO RECORDINGS (EG RECORD ALBUMS, COMPACT DISCS, VCDS, DVDS)" },
    { code: "47630", label: "RETAIL SALE OF SPORTS APPAREL AND EQUIPMENT (INCLUDING BICYCLES, BOATS AND HEALTHCARE EQUIPMENT)" },
    { code: "47640", label: "RETAIL SALE OF GAMES AND TOYS" },
    { code: "47711", label: "RETAIL SALE OF WEARING APPAREL FOR ADULTS" },
    { code: "47712", label: "RETAIL SALE OF CHILDREN AND INFANTS' WEAR (INCLUDING PRODUCTS AND ACCESSORIES FOR INFANTS)" },
    { code: "47713", label: "RETAIL SALE OF FOOTWEAR" },
    { code: "47714", label: "RETAIL SALE OF BAGS, LUGGAGE AND TRAVEL ACCESSORIES" },
    { code: "47715", label: "RETAIL SALE OF SEWING AND CLOTHING ACCESSORIES (EG BUTTON, THREAD, LACE, ZIP)" },
    { code: "47719", label: "RETAIL SALE OF CLOTHING, FOOTWEAR AND LEATHER ARTICLES N.E.C." },
    { code: "47721", label: "RETAIL SALE OF COSMETICS AND TOILETRIES (INCLUDING SKIN CARE PRODUCTS)" },
    { code: "47722", label: "PHARMACIES AND DRUG STORES (WESTERN)" },
    { code: "47723", label: "CHINESE MEDICINE SHOPS" },
    { code: "47729", label: "RETAIL SALE OF PHARMACEUTICAL AND MEDICAL GOODS N.E.C. (EG JAMU SHOPS)" },
    { code: "47731", label: "RETAIL SALE OF JEWELLERY" },
    { code: "47732", label: "RETAIL SALE OF COSTUME JEWELLERY" },
    { code: "47733", label: "RETAIL SALE OF WATCHES AND CLOCKS" },
    { code: "47739", label: "RETAIL SALE OF PERSONAL EFFECTS N.E.C." },
    { code: "47741", label: "RETAIL SALE OF ANTIQUES AND WORKS OF ART" },
    { code: "47742", label: "RETAIL SALE OF HANDICRAFTS, COLLECTIBLES AND GIFTS" },
    { code: "47743", label: "RETAIL SALE OF CUT FLOWERS (INCLUDING WREATHS)" },
    { code: "47744", label: "RETAIL SALE OF ARTIFICIAL FLOWERS AND PLANTS" },
    { code: "47745", label: "RETAIL SALE OF AQUARIUM FISHES (INCLUDING FOOD AND ACCESSORIES)" },
    { code: "47746", label: "RETAIL SALE OF PET BIRDS AND ANIMALS (INCLUDING FOOD AND ACCESSORIES)" },
    { code: "47749", label: "RETAIL SALE OF HANDICRAFTS AND FANCY GOODS, FLOWERS, PLANTS AND PET ANIMALS N.E.C." },
    { code: "47751", label: "RETAIL SALE OF SPECTACLES AND OTHER OPTICAL GOODS" },
    { code: "47752", label: "RETAIL SALE OF CAMERAS AND OTHER PHOTOGRAPHIC GOODS" },
    { code: "47759", label: "RETAIL SALE OF OPTICAL AND PHOTOGRAPHIC GOODS N.E.C." },
    { code: "47761", label: "RETAIL SALE OF JOSS PAPER AND OTHER CEREMONIAL PRODUCTS" },
    { code: "47762", label: "RETAIL SALE OF LIQUEFIED PETROLEUM GAS (LPG)" },
    { code: "47769", label: "RETAIL SALE OF SPECIFIC COMMODITIES N.E.C. (EG JUTE BAGS)" },
    { code: "47770", label: "RETAIL SALE OF SECOND-HAND GOODS IN STORES" },
    { code: "47801", label: "STALLS (INCLUDING PUSHCARTS) SELLING UNCOOKED FOODSTUFFS" },
    { code: "47802", label: "STALLS (INCLUDING PUSHCARTS) SELLING OTHER COMMODITIES (OTHER THAN UNCOOKED FOOD)" },
    { code: "47910", label: "RETAIL SALE VIA INTERNET" },
    { code: "47991", label: "RETAIL SALE VIA VENDING MACHINES" },
    {
        code: "47992",
        label: "OTHER RETAIL SALE NOT IN STORES, STALLS OR MARKETS (EG SALE VIA DOOR-TO-DOOR CANVASSING, MAIL ORDER HOUSES, TV)"
    },
    { code: "49101", label: "RAILROAD SERVICES" },
    { code: "49102", label: "MASS RAPID TRANSIT SYSTEMS (INCLUDING LIGHT RAIL)" },
    { code: "49211", label: "PUBLIC BUS SERVICES (SCHEDULED SERVICES)" },
    { code: "49212", label: "CHARTERED BUS SERVICES (INCLUDING SCHOOL BUSES)" },
    { code: "49213", label: "INTER-COUNTRY BUS SERVICES" },
    { code: "49214", label: "TAXI SERVICES" },
    { code: "49219", label: "PASSENGER LAND TRANSPORT N.E.C. (EG PRIVATE CARS FOR HIRE WITH OPERATOR AND TRISHAWS)" },
    { code: "49220", label: "AERIAL CABLEWAYS (INCLUDING CABLE CAR SERVICES)" },
    { code: "49231", label: "FREIGHT TRANSPORT BY ROAD" },
    { code: "49232", label: "MOVING SERVICES (EG DELIVERY SERVICES, BAGGAGE TRANSFER SERVICES, FURNITURE MOVING SERVICES)" },
    { code: "49239", label: "FREIGHT LAND TRANSPORT N.E.C. (EG RENTAL AND LEASING OF LORRIES AND TRUCKS WITH OPERATOR)" },
    { code: "49300", label: "TRANSPORT VIA PIPELINES" },
    { code: "50011", label: "INTERNATIONAL CRUISE SERVICES" },
    { code: "50012", label: "OTHER SIGHT-SEEING CRUISE SERVICES (EG HARBOUR AND RIVER CRUISES)" },
    { code: "50013", label: "PASSENGER FERRY SERVICES" },
    { code: "50014", label: "CHARTERING OF SHIPS AND BOATS WITH CREW (PASSENGER)" },
    { code: "50019", label: "PASSENGER WATER TRANSPORT N.E.C." },
    { code: "50021", label: "SHIPPING LINES" },
    { code: "50022", label: "BRANCHES OF FOREIGN SHIPPING LINES" },
    { code: "50023", label: "OPERATORS OF BARGES, TUGBOATS AND BUMBOATS (FREIGHT)" },
    { code: "50024", label: "CHARTERING OF SHIPS, BARGES AND BOATS WITH CREW (FREIGHT)" },
    { code: "50029", label: "FREIGHT WATER TRANSPORT N.E.C." },
    { code: "51001", label: "AIRLINES (PASSENGER)" },
    { code: "51002", label: "AIRLINES (FREIGHT)" },
    { code: "51003", label: "BRANCHES OF FOREIGN AIRLINES (PASSENGER)" },
    { code: "51004", label: "BRANCHES OF FOREIGN AIRLINES (FREIGHT)" },
    { code: "51005", label: "AIRCRAFT CHARTERING WITH OPERATOR" },
    { code: "51009", label: "AIR TRANSPORT SERVICES N.E.C." },
    { code: "52101", label: "GENERAL WAREHOUSING" },
    { code: "52102", label: "COLD STORAGE" },
    { code: "52103", label: "STORAGE FOR CLASS CARGO (IE HAZARDOUS MATERIALS)" },
    { code: "52109", label: "SPECIALISED STORAGE N.E.C." },
    { code: "52211", label: "CARPARK MANAGEMENT AND OPERATION SERVICES" },
    { code: "52212", label: "TAXI BOOKING SERVICES" },
    { code: "52213", label: "TOWING SERVICES" },
    { code: "52219", label: "SUPPORTING SERVICES TO LAND TRANSPORT N.E.C." },
    { code: "52221", label: "REPRESENTATIVE OFFICES OF FOREIGN SHIPPING LINES" },
    { code: "52222", label: "SHIPPING AGENCIES (FREIGHT)" },
    { code: "52223", label: "PORT OPERATORS" },
    { code: "52224", label: "LIGHTERAGE SERVICES" },
    { code: "52225", label: "SALVAGING OF DISTRESSED VESSELS AND CARGOS" },
    { code: "52226", label: "SHIP MANAGEMENT SERVICES" },
    { code: "52227", label: "SHIP BROKERING SERVICES" },
    { code: "52229", label: "SUPPORTING SERVICES TO WATER TRANSPORT N.E.C." },
    { code: "52231", label: "REPRESENTATIVE OFFICES OF FOREIGN AIRLINES" },
    { code: "52232", label: "AIRLINE AGENCIES (FREIGHT)" },
    { code: "52233", label: "AIRPORT OPERATION SERVICES" },
    { code: "52234", label: "AIRPORT TERMINAL SERVICES" },
    { code: "52239", label: "SUPPORTING SERVICES TO AIR TRANSPORT N.E.C." },
    { code: "52241", label: "CARGO SURVEYING SERVICES" },
    { code: "52242", label: "CONTAINER SERVICES (EXCLUDING RENTAL OF CONTAINERS)" },
    { code: "52243", label: "CRANE SERVICES (LOADING AND UNLOADING OF CARGO)" },
    { code: "52244", label: "STEVEDORING SERVICES" },
    { code: "52251", label: "CLASSIFICATION SOCIETIES" },
    { code: "52252", label: "MARINE SURVEYING SERVICES OTHER THAN CLASSIFICATION SOCIETIES" },
    { code: "52291", label: "VALUE ADDED LOGISTICS PROVIDERS" },
    { code: "52292", label: "FREIGHT FORWARDING, PACKING AND CRATING SERVICES" },
    { code: "52299", label: "OTHER TRANSPORTATION SUPPORT ACTIVITIES N.E.C." },
    { code: "53100", label: "NATIONAL POST ACTIVITIES (EG POSTAL SERVICES)" },
    { code: "53200", label: "COURIER ACTIVITIES OTHER THAN NATIONAL POST ACTIVITIES" },
    { code: "55101", label: "HOTELS WITH RESTAURANT" },
    { code: "55102", label: "HOTELS WITHOUT RESTAURANT" },
    { code: "55103", label: "CHALETS" },
    { code: "55109", label: "OTHER SHORT TERM ACCOMMODATION ACTIVITIES N.E.C. (EG BACKPACKERS/TRAVELLERS' HOSTELS, GUESTHOUSES ETC)" },
    { code: "55901", label: "LODGING AND BOARDING HOUSES" },
    { code: "55909", label: "OTHER ACCOMMODATION N.E.C." },
    { code: "56111", label: "RESTAURANTS" },
    { code: "56112", label: "CAFES AND COFFEE HOUSES" },
    { code: "56121", label: "FAST FOOD OUTLETS" },
    { code: "56122", label: "FOOD COURTS, COFFEE SHOPS, AND EATING HOUSES (WITH MAINLY FOOD AND BEVERAGE INCOME)" },
    { code: "56123", label: "SNACK BARS AND FOOD KIOSKS (MAINLY FOR TAKEAWAY, INCLUDING DESSERT/BUBBLE TEA OUTLETS)" },
    { code: "56129", label: "OTHER FOOD AND BEVERAGE SERVING PREMISES N.E.C." },
    { code: "56130", label: "PUBS (INCLUDING BARS)" },
    { code: "56140", label: "STALLS SELLING COOKED FOOD AND PREPARED DRINKS (INCLUDING STALLS AT FOOD COURTS AND MOBILE FOOD HAWKERS)" },
    { code: "56201", label: "FOOD CATERERS" },
    { code: "56202", label: "CANTEENS" },
    { code: "58110", label: "PUBLISHING OF BOOKS, BROCHURES, MUSICAL BOOKS AND OTHER PUBLICATIONS" },
    { code: "58120", label: "PUBLISHING OF DIRECTORIES AND MAILING LISTS" },
    { code: "58131", label: "PUBLISHING OF NEWSPAPERS" },
    { code: "58132", label: "PUBLISHING OF JOURNALS, PERIODICALS AND MAGAZINES" },
    { code: "58190", label: "OTHER PUBLISHING ACTIVITIES" },
    { code: "58201", label: "PUBLISHING OF COMPUTER GAMES" },
    { code: "58202", label: "PUBLISHING OF OTHER SOFTWARE (NON-COMPUTER GAMES)" },
    { code: "59111", label: "MOTION PICTURE/MOVIE PRODUCTION" },
    { code: "59112", label: "PRODUCTION OF ADVERTISEMENTS, CORPORATE VIDEOS AND EVENT VIDEOS" },
    { code: "59113", label: "PRODUCTION OF DRAMAS, VARIETY SHOWS AND DOCUMENTARIES (INCLUDING PRODUCTION OF TELEVISION PROGRAMME)" },
    { code: "59114", label: "ANIMATION PRODUCTION" },
    { code: "59119", label: "MOTION PICTURE, VIDEO, TELEVISION AND OTHER PROGRAMME PRODUCTION ACTIVITIES N.E.C." },
    { code: "59120", label: "MOTION PICTURE, VIDEO, TELEVISION AND OTHER PROGRAMME POST-PRODUCTION ACTIVITIES" },
    { code: "59131", label: "MOTION PICTURE/MOVIE DISTRIBUTION" },
    { code: "59132", label: "DISTRIBUTION OF DRAMAS, VARIETY SHOWS AND DOCUMENTARIES (INCLUDING TELEVISION PROGRAMME)" },
    { code: "59139", label: "MOTION PICTURE, VIDEO, TELEVISION AND OTHER PROGRAMME DISTRIBUTION ACTIVITIES N.E.C." },
    { code: "59141", label: "CINEMA SERVICES" },
    { code: "59149", label: "MOTION PICTURE PROJECTION ACTIVITIES N.E.C." },
    { code: "59190", label: "OTHER MOTION PICTURE, VIDEO, TELEVISION AND PROGRAMME RELATED ACTIVITIES" },
    { code: "59201", label: "SOUND RECORDING PRODUCTION" },
    { code: "59202", label: "MUSIC PUBLISHING AND DISTRIBUTION ACTIVITIES" },
    { code: "60100", label: "RADIO PROGRAMME PRODUCTION AND BROADCASTING" },
    {
        code: "60200",
        label: "TELEVISION PROGRAMMING AND BROADCASTING (INCLUDING CABLE, SATELLITE, TERRESTRIAL TELEVISION, INTERNET AND MOBILE)"
    },
    {
        code: "61011",
        label: "WIRED TELECOMMUNICATIONS NETWORK OPERATION (INCLUDING FIXED-LINE, FIBRE OPTICS, LOCAL/INTERNATIONAL PSTN AND LEASED CIRCUITS)"
    },
    { code: "61012", label: "MOBILE CELLULAR AND OTHER WIRELESS TELECOMMUNICATIONS NETWORK OPERATION" },
    { code: "61013", label: "SATELLITE TELECOMMUNICATIONS NETWORK OPERATION" },
    {
        code: "61091",
        label: "TELECOMMUNICATIONS RESELLERS/THIRD PARTY TELECOMMUNICATIONS PROVIDERS (INCLUDING VALUE-ADDED NETWORK OPERATORS)"
    },
    { code: "61092", label: "INTERNET ACCESS PROVIDERS, INCLUDE ISPS" },
    {
        code: "61099",
        label: "OTHER TELECOMMUNICATIONS ACTIVITIES N.E.C. (EG PROVISION OF VOIP (VOICE OVER INTERNET PROTOCOL SERVICES) AND CYBER 'CAFES' (OFFERING INTERNET ACCESS ONLY))"
    },
    { code: "62011", label: "DEVELOPMENT OF E-COMMERCE APPLICATIONS" },
    { code: "62012", label: "DEVELOPMENT OF COMPUTER GAMES" },
    { code: "62013", label: "DEVELOPMENT OF SOFTWARE FOR INTERACTIVE DIGITAL MEDIA (EXCEPT GAMES)" },
    { code: "62019", label: "DEVELOPMENT OF OTHER SOFTWARE AND PROGRAMMING ACTIVITIES N.E.C." },
    { code: "62021", label: "HARDWARE CONSULTANCY (INCLUDING SYSTEMS CONSULTANCY)" },
    { code: "62022", label: "SOFTWARE CONSULTANCY" },
    { code: "62023", label: "COMPUTER FACILITIES MANAGEMENT ACTIVITIES" },
    { code: "62024", label: "COMPUTER SYSTEMS INTEGRATION ACTIVITIES" },
    { code: "62090", label: "OTHER INFORMATION TECHNOLOGY AND COMPUTER SERVICE ACTIVITIES (EG DISASTER RECOVERY SERVICES)" },
    { code: "63111", label: "WEB HOSTING AND OTHER HOSTING SERVICES (EG CLOUD HOSTING, SERVER HOSTING AND DATA HOSTING)" },
    { code: "63112", label: "DATA ENTRY SERVICES" },
    {
        code: "63119",
        label: "DATA PROCESSING AND RELATED ACTIVITIES N.E.C. (EG DATA TABULATION SERVICES, COMPUTER TIME SHARING SERVICES, APPLICATION SERVICE PROVIDERS, DATA STORAGE AND STREAMING SERVICES)"
    },
    { code: "63120", label: "WEB PORTALS (INCLUDING SOCIAL NETWORKING SITES)" },
    { code: "63901", label: "NEWS AGENCY ACTIVITIES" },
    { code: "63909", label: "OTHER INFORMATION SERVICE ACTIVITIES N.E.C." },
    { code: "64110", label: "CENTRAL BANK" },
    { code: "64121", label: "DOMESTIC BANKING UNITS (DBU) OF FULL BANKS" },
    { code: "64122", label: "ASIAN CURRENCY UNITS (ACU) OF FULL BANKS" },
    { code: "64131", label: "DOMESTIC BANKING UNITS (DBU) OF WHOLESALE BANKS" },
    { code: "64132", label: "ASIAN CURRENCY UNITS (ACU) OF WHOLESALE BANKS" },
    { code: "64141", label: "DOMESTIC BANKING UNITS (DBU) OF OFFSHORE BANKS" },
    { code: "64142", label: "ASIAN CURRENCY UNITS (ACU) OF OFFSHORE BANKS" },
    { code: "64151", label: "DOMESTIC BANKING UNITS (DBU) OF MERCHANT BANKS" },
    { code: "64152", label: "ASIAN CURRENCY UNITS (ACU) OF MERCHANT BANKS" },
    { code: "64160", label: "FINANCE COMPANIES (WITH DEPOSIT TAKING FUNCTIONS)" },
    { code: "64190", label: "OTHER MONETARY INTERMEDIATION" },
    { code: "64201", label: "BANK/FINANCIAL HOLDING COMPANIES" },
    { code: "64202", label: "OTHER HOLDING COMPANIES" },
    {
        code: "64300",
        label: "TRUSTS, FUNDS AND SIMILAR FINANCIAL ENTITIES (EG COLLECTIVE PORTFOLIO INVESTMENT FUNDS (EXCLUDING THOSE WITH RENTAL INCOME))"
    },
    { code: "64910", label: "FINANCIAL LEASING COMPANIES" },
    { code: "64921", label: "THRIFT AND LOAN SOCIETIES AND CREDIT ASSOCIATIONS" },
    { code: "64922", label: "CREDIT CARD SERVICES" },
    { code: "64923", label: "MUTUAL BENEFITS ORGANISATIONS" },
    { code: "64924", label: "MONEY-LENDING" },
    { code: "64925", label: "PAWNBROKERAGE" },
    { code: "64929", label: "OTHER CREDIT AGENCIES N.E.C. (EG MOTOR FINANCE)" },
    { code: "64991", label: "FACTORING COMPANIES" },
    { code: "64992", label: "REPRESENTATIVE OFFICES OF FOREIGN BANKS" },
    { code: "64993", label: "MONEY-CHANGING SERVICES" },
    { code: "64994", label: "REMITTANCE SERVICES" },
    { code: "64995", label: "TREASURY CENTRES" },
    { code: "64999", label: "OTHER FINANCIAL SERVICE ACTIVITIES, EXCEPT INSURANCE AND PENSION FUNDING ACTIVITIES N.E.C." },
    { code: "65110", label: "LIFE INSURANCE" },
    { code: "65121", label: "MARINE INSURANCE" },
    { code: "65122", label: "CAPTIVE INSURANCE" },
    { code: "65123", label: "IMPORT, EXPORT AND CREDIT INSURANCE" },
    { code: "65124", label: "GENERAL INSURANCE (EXCEPT MARINE AND IMPORT, EXPORT & CREDIT INSURANCE)" },
    { code: "65201", label: "LIFE REINSURANCE" },
    { code: "65202", label: "GENERAL REINSURANCE" },
    { code: "65301", label: "PROVIDENT FUNDING" },
    { code: "65302", label: "PENSION FUNDING" },
    { code: "66111", label: "SECURITIES EXCHANGE" },
    { code: "66119", label: "ADMINISTRATION OF FINANCIAL MARKETS N.E.C." },
    { code: "66121", label: "STOCK, SHARE AND BOND BROKERS AND DEALERS" },
    { code: "66122", label: "FOREIGN EXCHANGE BROKERS AND DEALERS" },
    { code: "66123", label: "GOLD BULLION BROKERS AND DEALERS" },
    { code: "66124", label: "COMMODITY AND FUTURES BROKERS AND DEALERS" },
    { code: "66125", label: "CARBON CREDIT BROKERS/TRADERS" },
    { code: "66129", label: "SECURITY DEALINGS AND COMMODITY CONTRACTS BROKERAGE ACTIVITIES N.E.C." },
    { code: "66191", label: "TRUSTEE, FIDUCIARY AND CUSTODY SERVICES FIRMS (INCLUDING NOMINEE COMPANIES, TRUSTEES AND REIT TRUSTEES)" },
    { code: "66192", label: "CORPORATE FINANCE ADVISORY SERVICES" },
    { code: "66193", label: "CLEARING AND SETTLEMENT OF FINANCIAL INSTRUMENTS" },
    { code: "66194", label: "ACTIVITIES AUXILIARY TO FUND MANAGEMENT ACTIVITIES (EG INDEPENDENT FUND ADMINISTRATION FIRMS)" },
    { code: "66199", label: "OTHER ACTIVITIES AUXILIARY TO FINANCIAL SERVICE ACTIVITIES N.E.C. (EG MORTGAGE ADVISORY FIRMS)" },
    { code: "66210", label: "RISK AND DAMAGE EVALUATION (EG LOSS ADJUSTING, CLAIMS ADJUSTING)" },
    { code: "66221", label: "INSURANCE AGENCIES AND AGENTS (EXCLUDING FINANCIAL ADVISORY FIRMS AND ADVISERS)" },
    { code: "66222", label: "FINANCIAL ADVISORY FIRMS AND ADVISERS (INCLUDING FIRMS PROVIDING FINANCIAL PLANNING SERVICES)" },
    { code: "66223", label: "INSURANCE BROKERS" },
    { code: "66291", label: "REPRESENTATIVE OFFICES OF FOREIGN INSURERS AND PROFESSIONAL REINSURERS" },
    { code: "66292", label: "CAPTIVE MANAGERS" },
    { code: "66299", label: "OTHER ACTIVITIES AUXILIARY TO INSURANCE AND PENSION FUNDING N.E.C. (EG ACTIVITIES OF ACTUARIES)" },
    { code: "66301", label: "ASSET/PORTFOLIO MANAGEMENT" },
    { code: "66302", label: "HEDGE FUND MANAGEMENT" },
    { code: "66303", label: "PROPERTY FUND MANAGEMENT (INCLUDING REIT MANAGEMENT AND DIRECT PROPERTY FUND MANAGEMENT)" },
    { code: "66304", label: "PRIVATE EQUITY FIRMS (INCLUDING VENTURE CAPITAL COMPANIES)" },
    { code: "66309", label: "FUND MANAGEMENT ACTIVITIES N.E.C." },
    { code: "68101", label: "REAL ESTATE DEVELOPERS" },
    { code: "68102", label: "OPERATING OF SERVICED APARTMENTS" },
    { code: "68103", label: "LETTING AND OPERATING OF SELF-OWNED REAL ESTATE EXCEPT HOTELS, LODGING AND BOARDING HOUSES" },
    { code: "68104", label: "LETTING AND OPERATING OF FOOD COURTS, COFFEE SHOPS AND EATING HOUSES (WITH MAINLY RENTAL INCOME)" },
    { code: "68105", label: "COLLECTIVE PORTFOLIO INVESTMENT FUNDS WITH RENTAL INCOME" },
    { code: "68106", label: "MANAGEMENT OF SELF-OWNED STRATA TITLED PROPERTY" },
    { code: "68109", label: "REAL ESTATE ACTIVITIES WITH OWN OR LEASED PROPERTY N.E.C." },
    { code: "68201", label: "REAL ESTATE AGENCIES AND VALUATION SERVICES" },
    { code: "68202", label: "TOWN COUNCILS" },
    { code: "68203", label: "RESIDENTIAL REAL ESTATE MANAGEMENT OTHER THAN TOWN COUNCILS" },
    { code: "68204", label: "COMMERCIAL AND INDUSTRIAL REAL ESTATE MANAGEMENT" },
    { code: "68209", label: "REAL ESTATE ACTIVITIES ON A FEE OR CONTRACT BASIS N.E.C." },
    { code: "69100", label: "LEGAL ACTIVITIES" },
    { code: "69201", label: "ACCOUNTING AND AUDITING SERVICES (INCLUDING TAXATION ADVISORY SERVICES)" },
    { code: "69202", label: "BOOK-KEEPING SERVICES" },
    {
        code: "70101",
        label: "ACTIVITIES OF HEAD AND REGIONAL HEAD OFFICES; CENTRALISED ADMINISTRATIVE OFFICES AND SUBSIDIARY MANAGEMENT OFFICES"
    },
    { code: "70102", label: "BUSINESS REPRESENTATIVE OFFICES" },
    { code: "70201", label: "BUSINESS AND MANAGEMENT CONSULTANCY SERVICES (GENERAL)" },
    { code: "70202", label: "MANAGEMENT CONSULTANCY SERVICES FOR HEALTHCARE ORGANISATIONS" },
    { code: "70203", label: "HOTEL MANAGEMENT CONSULTANCY SERVICES" },
    { code: "70204", label: "HUMAN RESOURCE CONSULTANCY SERVICES" },
    { code: "70205", label: "PUBLIC RELATIONS CONSULTANCY SERVICES" },
    { code: "70209", label: "BUSINESS AND MANAGEMENT CONSULTANCY SERVICES N.E.C." },
    { code: "71111", label: "ARCHITECTURAL SERVICES" },
    { code: "71112", label: "LANDSCAPE DESIGN AND LANDSCAPE ARCHITECTURE" },
    { code: "71113", label: "QUANTITY SURVEYING SERVICES" },
    { code: "71114", label: "LAND SURVEYING SERVICES" },
    { code: "71119", label: "OTHER SURVEYING SERVICES N.E.C. (EG GEOPHYSICAL, GEOLOGIC, SEISMIC, HYDROGRAPHIC SURVEYING SERVICES)" },
    { code: "71121", label: "GENERAL BUILDING ENGINEERING DESIGN AND CONSULTANCY SERVICES" },
    { code: "71122", label: "PROCESS AND INDUSTRIAL PLANT ENGINEERING DESIGN AND CONSULTANCY SERVICES" },
    { code: "71123", label: "ENGINEERING DESIGN AND CONSULTANCY SERVICES IN ENERGY MANAGEMENT AND CLEAN ENERGY SYSTEMS" },
    { code: "71124", label: "ENVIRONMENTAL ENGINEERING DESIGN AND CONSULTANCY SERVICES (EXCEPT CLEAN ENERGY)" },
    { code: "71125", label: "INFRASTRUCTURE ENGINEERING DESIGN AND CONSULTANCY SERVICES" },
    {
        code: "71126",
        label: "ENGINEERING DESIGN AND CONSULTANCY SERVICES SUPPORTING MINING, OIL AND GAS EXTRACTION AND OFFSHORE EXPLORATION ACTIVITIES"
    },
    { code: "71129", label: "ENGINEERING DESIGN AND CONSULTANCY ACTIVITIES N.E.C." },
    { code: "71200", label: "TECHNICAL TESTING AND ANALYSIS SERVICES (INCLUDING CERTIFICATION OF PRODUCTS AND SERVICES)" },
    { code: "72101", label: "RESEARCH AND EXPERIMENTAL DEVELOPMENT ON BIOTECHNOLOGY, LIFE AND MEDICAL SCIENCE" },
    { code: "72102", label: "RESEARCH AND EXPERIMENTAL DEVELOPMENT ON ELECTRONICS" },
    { code: "72103", label: "RESEARCH AND EXPERIMENTAL DEVELOPMENT ON CHEMICALS" },
    { code: "72104", label: "RESEARCH AND EXPERIMENTAL DEVELOPMENT ON ENGINEERING" },
    { code: "72105", label: "RESEARCH AND EXPERIMENTAL DEVELOPMENT ON IT" },
    { code: "72106", label: "RESEARCH AND EXPERIMENTAL DEVELOPMENT ON ENVIRONMENT AND CLEAN TECHNOLOGIES" },
    { code: "72107", label: "RESEARCH AND EXPERIMENTAL DEVELOPMENT ON MEDICAL TECHNOLOGIES" },
    { code: "72109", label: "RESEARCH AND EXPERIMENTAL DEVELOPMENT ON NATURAL SCIENCES N.E.C." },
    { code: "72200", label: "RESEARCH AND EXPERIMENTAL DEVELOPMENT ON SOCIAL SCIENCES AND HUMANITIES" },
    { code: "73100", label: "ADVERTISING ACTIVITIES" },
    { code: "73201", label: "INFOCOMM MARKET RESEARCH" },
    { code: "73202", label: "OTHER MARKET RESEARCH AND PUBLIC OPINION POLLING (NON-INFOCOMM)" },
    { code: "74111", label: "ELECTRONICS-RELATED INDUSTRIAL DESIGN SERVICES" },
    { code: "74112", label: "TRANSPORT-RELATED INDUSTRIAL DESIGN SERVICES" },
    { code: "74113", label: "FURNITURE DESIGN SERVICES" },
    { code: "74119", label: "PRODUCT AND INDUSTRIAL DESIGN ACTIVITIES N.E.C." },
    { code: "74191", label: "INTERIOR DESIGN SERVICES" },
    { code: "74192", label: "ART AND GRAPHIC DESIGN SERVICES" },
    { code: "74193", label: "FASHION (INCLUDING ACCESSORIES) DESIGN SERVICES" },
    { code: "74194", label: "EXHIBITION STAND DESIGN SERVICES" },
    { code: "74199", label: "OTHER SPECIALISED DESIGN ACTIVITIES N.E.C." },
    { code: "74201", label: "PHOTO TAKING SERVICES (EG PORTRAIT OR STUDIO PHOTOGRAPHY)" },
    { code: "74202", label: "PHOTO PROCESSING AND FINISHING SERVICES" },
    { code: "74209", label: "PHOTOGRAPHIC ACTIVITIES N.E.C." },
    { code: "74901", label: "TRANSLATION SERVICES" },
    { code: "74902", label: "ARBITRATION AND MEDIATION SERVICES" },
    { code: "74903", label: "BROKERAGE AND CONSULTANCY SERVICES OF INTELLECTUAL PROPERTY ASSETS" },
    { code: "74904", label: "AGROTECHNOLOGY CONSULTANCY SERVICES" },
    { code: "74905", label: "CARBON CONSULTANCY SERVICES" },
    { code: "74906", label: "AGENTS FOR ARTISTES, ATHLETES, MODELS AND OTHER PERFORMERS" },
    { code: "74909", label: "OTHER PROFESSIONAL, SCIENTIFIC AND TECHNICAL ACTIVITIES N.E.C." },
    { code: "75000", label: "VETERINARY ACTIVITIES" },
    { code: "77101", label: "RENTING AND LEASING OF PRIVATE CARS WITHOUT OPERATOR" },
    {
        code: "77109",
        label: "RENTING AND LEASING OF LAND TRANSPORT EQUIPMENT WITHOUT OPERATOR N.E.C. (INCLUDING LORRIES, TRUCKS, CARAVANS, SCOOTERS, CONTAINERS, TRAILERS)"
    },
    { code: "77210", label: "RENTING AND LEASING OF RECREATIONAL AND SPORTS GOODS (EG PLEASURE BOATS, BICYCLES)" },
    { code: "77220", label: "RENTING OF VCDS AND DVDS" },
    { code: "77291", label: "RENTING AND LEASING OF FURNITURE, UTENSILS AND OTHER HOUSEHOLD EQUIPMENT" },
    { code: "77292", label: "RENTING OF ATTIRE (EG COSTUMES)" },
    {
        code: "77299",
        label: "RENTING AND LEASING OF OTHER PERSONAL AND HOUSEHOLD GOODS N.E.C. (EG BOOKS, MUSIC INSTRUMENTS, ELECTRONIC EQUIPMENT FOR HOUSEHOLD USE)"
    },
    { code: "77310", label: "RENTING OF WATER TRANSPORT EQUIPMENT WITHOUT OPERATOR (EG COMMERCIAL BOATS AND SHIPS WITHOUT OPERATOR)" },
    { code: "77320", label: "RENTING OF AIR TRANSPORT EQUIPMENT WITHOUT OPERATOR (EG AIRPLANES WITHOUT OPERATOR)" },
    { code: "77330", label: "RENTING OF CONSTRUCTION AND CIVIL ENGINEERING MACHINERY AND EQUIPMENT" },
    { code: "77341", label: "RENTING OF COMPUTERS AND PERIPHERAL EQUIPMENT" },
    { code: "77342", label: "RENTING OF OFFICE MACHINERY AND EQUIPMENT" },
    { code: "77391", label: "RENTING AND LEASING OF PROFESSIONAL RADIO AND TELEVISION SETS AND SOUND REPRODUCING AND RECORDING EQUIPMENT" },
    { code: "77392", label: "RENTING OF INDUSTRIAL MACHINERY AND EQUIPMENT" },
    { code: "77399", label: "RENTING OF OTHER MACHINERY, EQUIPMENT AND TANGIBLE GOODS N.E.C. (EG AGRICULTURAL MACHINERY AND EQUIPMENT)" },
    { code: "77400", label: "LEASING OF NON-FINANCIAL INTANGIBLE ASSETS (EG PATENTS, TRADEMARKS, BRAND NAMES ETC)" },
    { code: "78101", label: "IT MANPOWER CONTRACTING SERVICES" },
    { code: "78102", label: "LABOUR CONTRACTING SERVICES (EXCLUDING IT MANPOWER)" },
    { code: "78103", label: "MAID AGENCIES" },
    { code: "78104", label: "EMPLOYMENT AGENCIES (EXCLUDING MAID AGENCIES)" },
    { code: "78105", label: "EXECUTIVE SEARCH SERVICES" },
    { code: "78300", label: "MANAGEMENT OF HUMAN RESOURCE FUNCTIONS" },
    { code: "79101", label: "TRAVEL AGENCIES AND TOUR OPERATORS (MAINLY INBOUND)" },
    { code: "79102", label: "TRAVEL AGENCIES AND TOUR OPERATORS (MAINLY OUTBOUND)" },
    { code: "79103", label: "TICKETING AGENCIES (INCLUDING AIRLINE, TOUR BUS AND CRUISE SHIP)" },
    {
        code: "79900",
        label: "OTHER RESERVATION SERVICE ACTIVITIES (EG TIMESHARE, ON-LINE HOTEL RESERVATION SERVICES, RESERVATION OF TICKETS FOR PERFORMANCES ETC)"
    },
    { code: "80001", label: "DETECTIVE AND INVESTIGATION AGENCIES" },
    { code: "80002", label: "SECURITY SERVICES" },
    { code: "80009", label: "SECURITY AND INVESTIGATION ACTIVITIES N.E.C." },
    { code: "81211", label: "GENERAL CLEANING SERVICES EXCEPT HOUSEHOLDS (INCLUDING CLEANING OF PUBLIC AREAS AND JANITORIAL SERVICES)" },
    { code: "81212", label: "DOMESTIC/HOUSEHOLD CLEANING SERVICES" },
    { code: "81291", label: "PEST CONTROL SERVICES NOT IN CONNECTION WITH AGRICULTURE" },
    { code: "81292", label: "MAINTENANCE OF SWIMMING POOLS, SPAS AND FOUNTAINS" },
    { code: "81299", label: "OTHER CLEANING SERVICES N.E.C. (EG CLEANING OF TRAINS, BUSES, AIRCRAFTS, INDUSTRIAL MACHINERY)" },
    {
        code: "81300",
        label: "LANDSCAPE PLANTING, CARE AND MAINTENANCE SERVICE ACTIVITIES (EG GARDEN INSTALLATION AND MAINTENANCE, GRASS CUTTING, TREE FELLING, PRUNING)"
    },
    { code: "82110", label: "OFFICE ADMINISTRATIVE SERVICES ON A FEE OR CONTRACT BASIS (EG BILLING AND RECORD KEEPING)" },
    { code: "82191", label: "STENOGRAPHIC AND SECRETARIAL SERVICES" },
    { code: "82192", label: "DUPLICATING AND PHOTO-COPYING SERVICES" },
    { code: "82199", label: "OTHER SPECIALISED OFFICE SUPPORT ACTIVITIES N.E.C." },
    { code: "82200", label: "CALL CENTRES" },
    { code: "82301", label: "EXHIBITION ORGANISERS" },
    { code: "82302", label: "CONVENTION/CONFERENCE ORGANISERS" },
    { code: "82303", label: "EVENT/CONCERT ORGANISERS" },
    { code: "82304", label: "EXHIBITION STAND CONTRACTORS" },
    { code: "82911", label: "DEBT COLLECTION SERVICES" },
    { code: "82912", label: "CREDIT RATING AGENCIES" },
    { code: "82920", label: "PACKAGING ACTIVITIES" },
    { code: "82991", label: "ACTIVITIES OF AUCTION HOUSES" },
    { code: "82999", label: "OTHER BUSINESS SUPPORT SERVICE ACTIVITIES (EG JUNKETS, ADMINISTRATION OF LOYALTY PROGRAMMES)" },
    { code: "84110", label: "EXECUTIVE, LEGISLATIVE AND OTHER GENERAL PUBLIC ADMINISTRATION (EG ISTANA, PARLIAMENT, TAX AUTHORITY)" },
    { code: "84120", label: "PUBLIC ADMINISTRATION OF ECONOMIC AND SOCIAL PROGRAMMES" },
    { code: "84210", label: "FOREIGN AFFAIRS" },
    { code: "84221", label: "ARMED FORCES" },
    { code: "84229", label: "DEFENCE ACTIVITIES N.E.C." },
    { code: "84231", label: "JUDICIARY AND RELATED SERVICES" },
    { code: "84232", label: "POLICE" },
    { code: "84233", label: "PRISONS" },
    { code: "84234", label: "OTHER PLACES OF DETENTION, CORRECTION AND REHABILITATION" },
    { code: "84235", label: "CIVIL DEFENCE" },
    { code: "84239", label: "PUBLIC ORDER AND SAFETY ACTIVITIES N.E.C." },
    { code: "85101", label: "NURSERIES AND KINDERGARTENS" },
    { code: "85102", label: "PRIMARY SCHOOLS" },
    { code: "85103", label: "INTERNATIONAL AND FOREIGN SYSTEM SCHOOLS (PRE-PRIMARY AND PRIMARY)" },
    { code: "85104", label: "SCHOOLS FOR THE HANDICAPPED AND EDUCATIONALLY SUB-NORMAL (PRE-PRIMARY AND PRIMARY)" },
    { code: "85211", label: "SECONDARY SCHOOLS" },
    { code: "85212", label: "JUNIOR COLLEGES AND CENTRALISED PRE-UNIVERSITY INSTITUTES (POST-SECONDARY NON-TERTIARY)" },
    { code: "85213", label: "INTERNATIONAL AND FOREIGN SYSTEM SCHOOLS (SECONDARY AND POST-SECONDARY NON-TERTIARY)" },
    { code: "85214", label: "SCHOOLS FOR THE HANDICAPPED AND EDUCATIONALLY SUB-NORMAL (SECONDARY AND POST-SECONDARY NON-TERTIARY)" },
    { code: "85215", label: "COMMERCIAL SCHOOLS OFFERING GENERAL SECONDARY AND POST-SECONDARY NON-TERTIARY EDUCATION PROGRAMMES" },
    { code: "85220", label: "TECHNICAL AND VOCATIONAL SECONDARY AND POST-SECONDARY NON-TERTIARY EDUCATION" },
    { code: "85301", label: "POLYTECHNICS" },
    { code: "85302", label: "UNIVERSITIES" },
    { code: "85303", label: "TEACHERS' TRAINING INSTITUTE" },
    { code: "85304", label: "COMMERCIAL SCHOOLS OFFERING HIGHER EDUCATION PROGRAMMES" },
    { code: "85410", label: "SPORTS AND RECREATION INSTRUCTION (EG YOGA, SPORTS, MARTIAL ARTS, DIVING, AEROBICS)" },
    { code: "85420", label: "MUSIC, DANCING, ART, SPEECH AND DRAMA INSTRUCTION" },
    { code: "85491", label: "CORPORATE TRAINING SERVICES AND MOTIVATIONAL COURSE PROVIDERS" },
    { code: "85492", label: "LANGUAGE INSTRUCTION" },
    { code: "85493", label: "DRIVING INSTRUCTION" },
    { code: "85494", label: "ACADEMIC TUTORING SERVICES (EG TUITION CENTRES, PRIVATE TUTORING SERVICES)" },
    { code: "85499", label: "OTHER EDUCATION N.E.C." },
    { code: "85501", label: "STUDENT RECRUITMENT AGENCIES" },
    { code: "85502", label: "EXAMINATION AND ACCREDITATION AGENCIES FOR EDUCATION SERVICES" },
    { code: "85509", label: "EDUCATIONAL SUPPORT SERVICES N.E.C. (EG TUITION MATCHING SERVICES)" },
    { code: "86101", label: "ACUTE HOSPITALS" },
    { code: "86102", label: "COMMUNITY HOSPITALS" },
    { code: "86109", label: "OTHER HOSPITALS N.E.C. (EG PSYCHIATRIC HOSPITAL)" },
    { code: "86201", label: "CLINICS AND OTHER GENERAL MEDICAL SERVICES (WESTERN)" },
    { code: "86202", label: "CLINICS AND OTHER GENERAL MEDICAL SERVICES (NON-WESTERN)" },
    { code: "86203", label: "SPECIALISED MEDICAL SERVICES (INCLUDING DAY SURGICAL CENTRES)" },
    { code: "86204", label: "DENTAL SERVICES" },
    { code: "86901", label: "MEDICAL LABORATORIES" },
    { code: "86902", label: "X-RAY LABORATORIES AND OTHER DIAGNOSTIC IMAGING CENTRES" },
    { code: "86903", label: "AMBULANCE AND MEDICAL EVACUATION SERVICES" },
    { code: "86904", label: "HOME HEALTHCARE SERVICES" },
    { code: "86905", label: "DIALYSIS SERVICES" },
    { code: "86909", label: "OTHER HEALTH SERVICES N.E.C. (EG REHABILITATION ACTIVITIES EG PHYSIOTHERAPY, CHIROPRACTIC, SPEECH THERAPY)" },
    { code: "87010", label: "NURSING AND PERSONAL CARE FACILITIES (INCLUDING NURSING HOMES AND HOSPICES)" },
    { code: "87021", label: "RESIDENTIAL CARE SERVICES FOR THE ELDERLY (EG HOME FOR THE AGED)" },
    { code: "87022", label: "RESIDENTIAL CARE SERVICES FOR CHILDREN (EG CHILDREN'S HOMES, ORPHANAGES)" },
    {
        code: "87029",
        label: "OTHER RESIDENTIAL CARE SERVICES N.E.C. (EG CRISIS SHELTERS, HALFWAY HOUSES FOR SUBSTANCE ABUSERS, RESIDENTIAL CARE SERVICES FOR THE PHYSICALLY DISABLED, INTELLECTUALLY DISABLED AND COMMUNITY MENTAL HEALTH PATIENTS, ETC)"
    },
    { code: "88101", label: "SOCIAL SERVICES FOR THE ELDERLY (EG BEFRIENDER SERVICES, MEAL SERVICES, DROP-IN CENTRES)" },
    { code: "88102", label: "SOCIAL SERVICES FOR PERSONS WITH DISABILITIES (EG DAY CARE CENTRES FOR PERSONS WITH DISABILITIES)" },
    { code: "88911", label: "CHILD CARE SERVICES FOR PRE-SCHOOL CHILDREN (INCLUDING OWN-ACCOUNT BABYSITTING)" },
    {
        code: "88912",
        label: "CHILD/STUDENT CARE SERVICES FOR SCHOOL-GOING CHILDREN (EG BEFORE AND AFTER-SCHOOL CARE CENTRES, STUDENT CARE CENTRES)"
    },
    { code: "88913", label: "SOCIAL SERVICES FOR CHILDREN AND YOUTHS (EG YOUTH OUTREACH SERVICES, ADOPTION SERVICES)" },
    { code: "88919", label: "SOCIAL SERVICES WITHOUT ACCOMMODATION FOR CHILDREN, YOUTH AND FAMILIES N.E.C." },
    { code: "88921", label: "COMMUNITY CENTRES/CLUBS, COMMUNITY DEVELOPMENT COUNCILS AND RELATED ACTIVITIES" },
    { code: "88922", label: "RESIDENTS' COMMITTEES AND RESIDENTIAL ASSOCIATIONS (INCLUDING CITIZENS' CONSULTATIVE COMMITTEES)" },
    { code: "88929", label: "COMMUNITY ACTIVITIES N.E.C." },
    { code: "88991", label: "JOB TRAINING AND VOCATIONAL REHABILITATION SERVICES" },
    { code: "88992", label: "CHARITABLE AND OTHER SUPPORTING ACTIVITIES AIMED AT HUMANITARIAN WORK" },
    { code: "88999", label: "OTHER SOCIAL SERVICES WITHOUT ACCOMMODATION N.E.C." },
    { code: "90001", label: "PRODUCTION OF LIVE THEATRICAL PRESENTATIONS (EG STAGE PLAYS, MUSICALS AND THEATRE PRODUCTIONS)" },
    { code: "90002", label: "THEATRES AND CONCERT HALLS" },
    { code: "90003", label: "OPERAS, WAYANG AND PUPPET SHOWS" },
    { code: "90004", label: "ORCHESTRAS, MUSICAL BANDS, CHOIRS AND DANCE GROUPS" },
    {
        code: "90009",
        label: "DRAMATIC ARTS, MUSIC AND OTHER ARTS PRODUCTION-RELATED ACTIVITIES N.E.C. (EG STAGE, LIGHTING AND SOUND SERVICES)"
    },
    { code: "91010", label: "LIBRARIES AND ARCHIVES ACTIVITIES" },
    { code: "91021", label: "MUSEUMS" },
    { code: "91022", label: "ART GALLERIES (EXCLUDING RETAIL)" },
    {
        code: "91029",
        label: "PRESERVATION OF HISTORICAL SITES, BUILDINGS, ARTEFACTS AND PAINTINGS, CULTURAL VILLAGES AND OTHER RELATED ACTIVITIES N.E.C."
    },
    { code: "91030", label: "BOTANICAL AND ZOOLOGICAL GARDENS AND NATURE RESERVES ACTIVITIES" },
    { code: "92001", label: "HORSE-RACING AND OTHER BETTING ACTIVITIES" },
    { code: "92002", label: "CASINOS" },
    { code: "93111", label: "FITNESS CENTRES AND GYMNASIUMS" },
    { code: "93119", label: "OPERATION OF SPORTS FACILITIES N.E.C. (EG BOWLING ALLEYS, TENNIS CENTRES, BILLIARD HALLS, FOOTBALL STADIUM)" },
    { code: "93121", label: "SPORTS CLUBS/ASSOCIATIONS" },
    { code: "93122", label: "MARTIAL ARTS AND PUGILISTIC CLUBS" },
    { code: "93129", label: "ACTIVITIES OF SPORTS CLUBS AND RELATED ACTIVITIES N.E.C." },
    { code: "93201", label: "AMUSEMENT THEME PARKS" },
    { code: "93202", label: "GAME ARCADE, ONLINE GAME AGGREGATOR, LAN GAME OPERATORS AND GAMING CENTRES" },
    { code: "93203", label: "CABARETS, NIGHT CLUBS, DISCOTHEQUES, DANCE CLUBS AND KARAOKE LOUNGES" },
    { code: "93204", label: "RECREATION CLUBS (INCLUDING COUNTRY CLUBS)" },
    {
        code: "93209",
        label: "OTHER AMUSEMENT AND RECREATION ACTIVITIES N.E.C. (INCLUDING RECREATION PARKS/BEACHES AND RECREATIONAL FISHING)"
    },
    { code: "94110", label: "ACTIVITIES OF BUSINESS AND EMPLOYERS' MEMBERSHIP ORGANISATIONS" },
    {
        code: "94120",
        label: "ACTIVITIES OF PROFESSIONAL MEMBERSHIP ORGANISATIONS (EG MEDICAL ASSOCIATIONS, LAW SOCIETIES, ACCOUNTANCY BODIES)"
    },
    { code: "94200", label: "ACTIVITIES OF TRADE UNIONS" },
    { code: "94911", label: "CHURCHES" },
    { code: "94912", label: "MOSQUES" },
    { code: "94913", label: "BUDDHIST/TAOIST TEMPLES" },
    { code: "94914", label: "HINDU/SIKH TEMPLES" },
    { code: "94919", label: "ACTIVITIES OF RELIGIOUS ORGANISATIONS N.E.C." },
    { code: "94920", label: "ACTIVITIES OF POLITICAL ORGANISATIONS" },
    { code: "94991", label: "PHILANTHROPIC TRUSTS, FOUNDATIONS AND RELATED ACTIVITIES" },
    { code: "94992", label: "ETHNIC ASSOCIATIONS (INCLUDING CLAN ASSOCIATIONS, HUAY KUANS)" },
    {
        code: "94993",
        label: "ASSOCIATIONS FOR HOBBIES, RECREATIONAL, CULTURAL AND EXTRA-CURRICULAR ACTIVITIES (EG SCOUTS/GIRL GUIDES ASSOCIATION, BOOK CLUBS AND PHOTO, MUSIC, ART AND CRAFT CLUBS)"
    },
    { code: "94994", label: "STUDENT/ALUMNI BODIES AND RELATED ASSOCIATIONS (EG PARENT-TEACHER ASSOCIATIONS, OLD BOYS' ASSOCIATIONS)" },
    { code: "94995", label: "ORGANISATIONS FOR THE PROTECTION OF THE ENVIRONMENT AND ANIMALS" },
    { code: "94999", label: "ACTIVITIES OF OTHER MEMBERSHIP ORGANISATIONS N.E.C." },
    { code: "95110", label: "REPAIR AND MAINTENANCE OF COMPUTER HARDWARE, DATA PROCESSING EQUIPMENT AND COMPUTER PERIPHERALS" },
    { code: "95120", label: "REPAIR OF COMMUNICATIONS EQUIPMENT (EG MOBILE PHONES, FAX MACHINES AND COMMUNICATIONS TRANSMISSION EQUIPMENT)" },
    { code: "95210", label: "REPAIR OF AUDIO AND VIDEO EQUIPMENT (EG TELEVISION SETS, RADIOS, TAPE RECORDERS AND PLAYERS)" },
    {
        code: "95220",
        label: "REPAIR OF DOMESTIC ELECTRICAL/ELECTRONIC APPLIANCES EXCEPT AUDIO AND VIDEO EQUIPMENT (EG REFRIGERATORS, WASHING MACHINES AND ROOM AIR-CONDITIONERS)"
    },
    { code: "95230", label: "REPAIR OF FOOTWEAR AND LEATHER GOODS" },
    { code: "95240", label: "REPAIR AND RESTORATION OF CABINETS, FURNITURE, UPHOLSTERY, WINDOW SHADES AND OTHER FIXTURES" },
    { code: "95291", label: "REPAIR OF BICYCLES AND TRICYCLES" },
    { code: "95292", label: "REPAIR OF WATCHES AND CLOCKS" },
    { code: "95293", label: "REPAIR OF JEWELLERY" },
    { code: "95299", label: "REPAIR OF OTHER PERSONAL AND HOUSEHOLD GOODS N.E.C. (EG CAMERAS, MUSICAL INSTRUMENTS)" },
    { code: "95301", label: "REPAIR AND MAINTENANCE OF MOTOR VEHICLES (INCLUDING INSTALLATION OF PARTS & ACCESSORIES)" },
    { code: "95302", label: "CAR WASHING AND RELATED SERVICES" },
    { code: "95303", label: "VEHICLE INSPECTION AND VALUATION SERVICES" },
    { code: "96011", label: "LAUNDRY AND DRY CLEANING SERVICES EXCEPT COIN LAUNDRIES" },
    { code: "96012", label: "COIN LAUNDRIES" },
    { code: "96021", label: "HAIRDRESSING SALONS/SHOPS (INCLUDING BARBER SHOPS)" },
    { code: "96022", label: "BEAUTY SALONS AND SPAS (INCLUDING SLIMMING, SKIN CARE AND HAIR CARE CENTRES)" },
    { code: "96023", label: "MANICURE AND PEDICURE SERVICES" },
    { code: "96024", label: "MASSAGE PARLOURS AND FOOT REFLEXOLOGY" },
    { code: "96029", label: "BEAUTY AND OTHER PERSONAL CARE SERVICES N.E.C." },
    { code: "96030", label: "FUNERAL AND RELATED ACTIVITIES (INCLUDING EMBALMING, CREMATING AND CEMETERY SERVICES, UPKEEP OF CEMETERIES)" },
    { code: "96040", label: "WEDDING AND RELATED ACTIVITIES (INCLUDING BRIDAL STUDIOS AND WEDDING PLANNERS)" },
    { code: "96091", label: "FRIENDSHIP, MATCH-MAKING AND DATING SERVICES" },
    { code: "96092", label: "SOCIAL ESCORT SERVICES" },
    { code: "96093", label: "ASTROLOGY, PALMISTRY AND OTHER FORTUNE TELLING SERVICES" },
    { code: "96094", label: "TRAINING OF PETS AND ANIMALS" },
    { code: "96095", label: "CARE SERVICES FOR PETS AND ANIMALS" },
    { code: "96099", label: "OTHER PERSONAL SERVICE ACTIVITIES N.E.C." },
    { code: "97001", label: "ACTIVITIES OF HOUSEHOLDS AS EMPLOYERS OF DOMESTIC WORKERS" },
    { code: "97002", label: "ACTIVITIES OF HOUSEHOLDS AS EMPLOYERS OF OTHER DOMESTIC PERSONNEL (EG HOUSEKEEPERS)" },
    { code: "99010", label: "FOREIGN EMBASSIES AND TRADE REPRESENTATIVE OFFICES" },
    { code: "99020", label: "FOREIGN ARMED FORCES" },
    { code: "99090", label: "OTHER EXTRA-TERRITORIAL ORGANISATIONS AND BODIES" },
    { code: "00000", label: "ACTIVITIES NOT ADEQUATELY DEFINED" },
    { code: "UNKNOWN", label: "UNKNOWN" }
];
exports.ssocs = [
    { code: "00002", label: "SSOC TEST 00002" },
    { code: "11110", label: "LEGISLATOR" },
    { code: "11121", label: "SENIOR GOVERNMENT OFFICIAL" },
    { code: "11122", label: "SENIOR STATUTORY BOARD OFFICIAL" },
    { code: "11140", label: "SENIOR OFFICIAL OF POLITICAL PARTY ORGANISATION" },
    { code: "11150", label: "SENIOR OFFICIAL OF EMPLOYERS, WORKERS' AND OTHER ECONOMIC-INTEREST ORGANISATION" },
    { code: "11160", label: "SENIOR OFFICIAL OF HUMANITARIAN AND OTHER SPECIAL-INTEREST ORGANISATION" },
    { code: "11201", label: "MANAGING DIRECTOR/CHIEF EXECUTIVE OFFICER" },
    { code: "11202", label: "COMPANY DIRECTOR" },
    { code: "11203", label: "CHIEF OPERATING OFFICER/GENERAL MANAGER" },
    { code: "12111", label: "BUDGETING AND FINANCIAL ACCOUNTING MANAGER (INCLUDING FINANCIAL CONTROLLER)" },
    { code: "12112", label: "ADMINISTRATION MANAGER" },
    { code: "12121", label: "PERSONNEL/HUMAN RESOURCE MANAGER" },
    { code: "12122", label: "INDUSTRIAL RELATIONS MANAGER" },
    { code: "12123", label: "TRAINING MANAGER" },
    { code: "12130", label: "POLICY AND PLANNING MANAGER" },
    { code: "12191", label: "PREMISES AND FACILITIES MAINTENANCE MANAGER (INCLUDING BUILDING SECURITY MANAGER)" },
    { code: "12192", label: "LANDSCAPE OPERATIONS MANAGER" },
    { code: "12193", label: "WORKING PROPRIETOR (BUSINESS SERVICES AND ADMINISTRATIVE SERVICES)" },
    { code: "12199", label: "OTHER BUSINESS SERVICES AND ADMINISTRATION MANAGERS N.E.C." },
    { code: "12211", label: "SALES AND MARKETING MANAGER" },
    { code: "12212", label: "BUSINESS DEVELOPMENT MANAGER" },
    { code: "12220", label: "ADVERTISING/PUBLIC RELATIONS MANAGER" },
    { code: "12230", label: "RESEARCH AND DEVELOPMENT MANAGER" },
    { code: "12241", label: "CUSTOMER SERVICE MANAGER" },
    { code: "12242", label: "CALL CENTRE MANAGER" },
    { code: "13101", label: "PRODUCTION MANAGER IN AGRICULTURE AND FISHERIES" },
    { code: "13102", label: "WORKING PROPRIETOR (AGRICULTURE AND FISHERIES)" },
    { code: "13211", label: "MANUFACTURING PLANT/PRODUCTION MANAGER" },
    { code: "13212", label: "WORKING PROPRIETOR (MANUFACTURING)" },
    { code: "13231", label: "BUILDING AND CONSTRUCTION PROJECT MANAGER" },
    { code: "13232", label: "WORKING PROPRIETOR (CONSTRUCTION)" },
    { code: "13241", label: "SUPPLY AND DISTRIBUTION/LOGISTICS/WAREHOUSING MANAGER" },
    { code: "13242", label: "PROCUREMENT/PURCHASING MANAGER" },
    { code: "13243", label: "TRANSPORT OPERATIONS MANAGER" },
    { code: "13244", label: "POSTAL SERVICE MANAGER" },
    { code: "13245", label: "WORKING PROPRIETOR (TRANSPORT, STORAGE AND COURIER)" },
    { code: "13291", label: "TECHNICAL/ENGINEERING SERVICES MANAGER (EG SHIPYARD MANAGER)" },
    { code: "13292", label: "QUALITY ASSURANCE MANAGER" },
    { code: "13299", label: "OTHER PRODUCTION AND OPERATIONS MANAGERS N.E.C. (EG MINING MANAGER)" },
    { code: "13301", label: "CHIEF INFORMATION OFFICER/CHIEF TECHNOLOGY OFFICER/CHIEF SECURITY OFFICER" },
    { code: "13302", label: "SOFTWARE AND APPLICATIONS MANAGER" },
    { code: "13303", label: "NETWORK AND COMMUNICATIONS MANAGER" },
    { code: "13304", label: "IT SERVICE MANAGER" },
    { code: "13305", label: "WORKING PROPRIETOR (INFORMATION AND COMMUNICATIONS TECHNOLOGY SERVICE)" },
    { code: "13410", label: "CHILD CARE SERVICES MANAGER" },
    { code: "13420", label: "HEALTH SERVICES MANAGER" },
    { code: "13430", label: "AGED CARE SERVICES MANAGER" },
    { code: "13440", label: "SOCIAL WELFARE MANAGER" },
    { code: "13451", label: "SCHOOL PRINCIPAL" },
    {
        code: "13459",
        label: "OTHER EDUCATION MANAGERS (INCLUDING REGISTRARS, DEANS OF EDUCATION INSTITUTIONS AND HEADS OF TRAINING INSTITUTIONS)"
    },
    { code: "13460", label: "FINANCIAL/INSURANCE SERVICES MANAGER (EG FINANCIAL INSTITUTION BRANCH MANAGER)" },
    { code: "13491", label: "WORKING PROPRIETOR (PROFESSIONAL, FINANCIAL, COMMUNITY AND SOCIAL SERVICES)" },
    { code: "13499", label: "OTHER PROFESSIONAL, FINANCIAL, COMMUNITY AND SOCIAL SERVICES MANAGERS" },
    { code: "14111", label: "HOTEL OPERATIONS/LODGING SERVICES MANAGER" },
    { code: "14112", label: "WORKING PROPRIETOR (LODGING SERVICES)" },
    { code: "14121", label: "RESTAURANT MANAGER" },
    { code: "14122", label: "CATERING SERVICES MANAGER" },
    { code: "14123", label: "WORKING PROPRIETOR (RESTAURANT AND OTHER CATERING SERVICES)" },
    { code: "14201", label: "RETAIL/SHOP SALES MANAGER" },
    { code: "14202", label: "WHOLESALE TRADE MANAGER" },
    { code: "14203", label: "WORKING PROPRIETOR (RETAIL TRADE)" },
    { code: "14204", label: "WORKING PROPRIETOR (WHOLESALE TRADE)" },
    { code: "14310", label: "SPORTS CENTRE MANAGER" },
    { code: "14321", label: "CASINO OPERATIONS MANAGER" },
    { code: "14322", label: "AMUSEMENT/THEME PARK MANAGER" },
    { code: "14323", label: "CINEMA MANAGER" },
    { code: "14324", label: "PARK/GARDEN/NATURE RESERVE MANAGER" },
    { code: "14325", label: "DISCOTHEQUE/KARAOKE/NIGHTCLUB MANAGER" },
    { code: "14326", label: "WELLNESS CENTRE MANAGER (EG HAIR/BEAUTY/SLIMMING/SPA/MANICURE/ MASSAGE)" },
    { code: "14327", label: "COMMUNITY/COUNTRY CLUB MANAGER" },
    { code: "14329", label: "OTHER RECREATION CENTRE MANAGERS" },
    { code: "14330", label: "ARTS AND CULTURAL CENTRE MANAGER (INCLUDING GALLERY AND MUSEUM MANAGER)" },
    { code: "14391", label: "WORKING PROPRIETOR (SPORTS, RECREATION, ARTS AND OTHER SERVICES)" },
    { code: "14392", label: "TRAVEL AGENCY MANAGER" },
    { code: "14399", label: "OTHER SERVICES MANAGERS N.E.C." },
    { code: "21110", label: "PHYSICIST/ASTRONOMER" },
    { code: "21120", label: "METEOROLOGIST" },
    { code: "21130", label: "CHEMIST" },
    { code: "21141", label: "GEOLOGIST" },
    { code: "21142", label: "GEOPHYSICIST" },
    { code: "21149", label: "OTHER PHYSICAL SCIENCE PROFESSIONALS" },
    { code: "21211", label: "MATHEMATICIAN" },
    { code: "21212", label: "OPERATIONS RESEARCH ANALYST" },
    { code: "21213", label: "ACTUARY" },
    { code: "21220", label: "STATISTICIAN" },
    { code: "21231", label: "STATISTICAL OFFICER" },
    { code: "21232", label: "RESEARCH OFFICER (STATISTICAL)" },
    { code: "21239", label: "OTHER STATISTICAL, MATHEMATICAL AND ACTUARIAL PROFESSIONALS" },
    { code: "21311", label: "BIOLOGIST (GENERAL)" },
    { code: "21312", label: "BOTANIST" },
    { code: "21313", label: "ZOOLOGIST" },
    { code: "21319", label: "OTHER BIOLOGISTS, BOTANISTS, ZOOLOGISTS AND RELATED PROFESSIONALS" },
    { code: "21321", label: "AGRONOMIST" },
    { code: "21322", label: "HORTICULTURIST/ARBORIST" },
    { code: "21323", label: "PLANT PATHOLOGIST" },
    { code: "21324", label: "SOIL SCIENTIST" },
    { code: "21325", label: "FLORICULTURIST/ORCHIDOLOGIST" },
    { code: "21326", label: "PLANT TISSUE CULTURIST" },
    { code: "21327", label: "AQUACULTURIST" },
    { code: "21329", label: "OTHER FARMING, FORESTRY AND FISHERY ADVISERS" },
    { code: "21331", label: "ENVIRONMENTAL OFFICER (ENVIRONMENTAL PROTECTION)" },
    { code: "21332", label: "ENVIRONMENT RESEARCH SCIENTIST (EG ECOLOGIST)" },
    { code: "21333", label: "ENERGY MANAGER" },
    { code: "21339", label: "OTHER ENVIRONMENTAL PROTECTION AND RELATED PROFESSIONALS" },
    { code: "21341", label: "PHARMACOLOGIST" },
    { code: "21342", label: "ANATOMIST" },
    { code: "21343", label: "BIOCHEMIST" },
    { code: "21344", label: "PHYSIOLOGIST" },
    { code: "21345", label: "ANIMAL SCIENTIST" },
    { code: "21346", label: "MEDICAL SCIENTIST" },
    { code: "21347", label: "CLINICAL RESEARCH PROFESSIONALS" },
    { code: "21349", label: "OTHER PHARMACOLOGISTS AND RELATED PROFESSIONALS" },
    { code: "21411", label: "MANUFACTURING ENGINEER (GENERAL)" },
    { code: "21412", label: "PRODUCTION ENGINEER" },
    { code: "21413", label: "AUTOMATION ENGINEER" },
    { code: "21414", label: "QUALITY CONTROL/ASSURANCE ENGINEER" },
    { code: "21419", label: "OTHER INDUSTRIAL AND PRODUCTION ENGINEERS" },
    { code: "21421", label: "CIVIL ENGINEER (GENERAL)" },
    { code: "21422", label: "STRUCTURAL ENGINEER (GENERAL)" },
    { code: "21423", label: "BUILDING CONSTRUCTION ENGINEER" },
    { code: "21424", label: "SOIL MECHANIC/PILING ENGINEER" },
    { code: "21429", label: "OTHER CIVIL ENGINEERS" },
    { code: "21431", label: "ENVIRONMENTAL ENGINEER" },
    { code: "21432", label: "SEWERAGE/SANITARY ENGINEER" },
    { code: "21441", label: "MECHANICAL ENGINEER (GENERAL)" },
    { code: "21442", label: "INDUSTRIAL MACHINERY AND TOOLS ENGINEER" },
    { code: "21443", label: "MARINE ENGINEER (SHORE-BASED)" },
    { code: "21444", label: "NAVAL ARCHITECT" },
    { code: "21445", label: "AERONAUTICAL ENGINEER" },
    { code: "21446", label: "AUTOMOTIVE ENGINEER" },
    { code: "21447", label: "AIR-CONDITIONING/REFRIGERATION ENGINEER" },
    { code: "21449", label: "OTHER MECHANICAL ENGINEERS" },
    { code: "21451", label: "CHEMICAL ENGINEER (GENERAL)" },
    { code: "21452", label: "CHEMICAL ENGINEER (PETROLEUM)" },
    { code: "21453", label: "CHEMICAL ENGINEER (PETROCHEMICALS)" },
    { code: "21459", label: "OTHER CHEMICAL ENGINEERS" },
    { code: "21461", label: "PETROLEUM/NATURAL GAS ENGINEER" },
    { code: "21462", label: "METALLURGIST" },
    { code: "21469", label: "OTHER MINING ENGINEERS, METALLURGISTS AND RELATED PROFESSIONALS" },
    { code: "21491", label: "BIOMEDICAL ENGINEER" },
    { code: "21492", label: "MATERIALS ENGINEER" },
    { code: "21493", label: "INDUSTRIAL SAFETY ENGINEER" },
    { code: "21494", label: "QUANTITY SURVEYOR" },
    { code: "21495", label: "CERAMICS/GLASS TECHNOLOGIST" },
    { code: "21496", label: "FOOD AND DRINK TECHNOLOGIST" },
    { code: "21497", label: "OPTICAL ENGINEER (INCLUDING LASER ENGINEER)" },
    { code: "21498", label: "SAFETY AND SECURITY CONSULTANT" },
    { code: "21499", label: "OTHER ENGINEERING PROFESSIONALS N.E.C." },
    { code: "21511", label: "ELECTRICAL ENGINEER (GENERAL)" },
    { code: "21512", label: "POWER GENERATION AND DISTRIBUTION ENGINEER" },
    { code: "21513", label: "LIFT ENGINEER" },
    { code: "21519", label: "OTHER ELECTRICAL ENGINEERS" },
    { code: "21521", label: "ELECTRONICS ENGINEER (GENERAL)" },
    { code: "21522", label: "COMPUTER ENGINEER" },
    { code: "21523", label: "SEMI-CONDUCTOR ENGINEER" },
    { code: "21524", label: "AUDIO AND VIDEO EQUIPMENT ENGINEER" },
    { code: "21525", label: "INSTRUMENTATION ENGINEER" },
    { code: "21526", label: "EMBEDDED SYSTEMS ENGINEER" },
    { code: "21529", label: "OTHER ELECTRONICS ENGINEERS" },
    { code: "21530", label: "TELECOMMUNICATIONS ENGINEER" },
    { code: "21610", label: "BUILDING ARCHITECT" },
    { code: "21620", label: "LANDSCAPE ARCHITECT" },
    { code: "21631", label: "FASHION/GARMENT DESIGNER (INCLUDING JEWELLERY DESIGNER)" },
    { code: "21632", label: "PRODUCT AND INDUSTRIAL DESIGNER" },
    { code: "21641", label: "TOWN PLANNER" },
    { code: "21649", label: "OTHER RELATED PLANNERS (EG TRAFFIC PLANNER)" },
    { code: "21651", label: "SURVEYOR (GENERAL)" },
    { code: "21652", label: "LAND SURVEYOR" },
    { code: "21653", label: "HYDROGRAPHIC SURVEYOR" },
    { code: "21654", label: "CARTOGRAPHER" },
    { code: "21659", label: "OTHER SURVEYORS AND CARTOGRAPHERS" },
    { code: "21661", label: "GRAPHIC DESIGNER" },
    { code: "21662", label: "MULTIMEDIA (INCLUDING COMPUTER GAMES) DESIGNER" },
    { code: "21663", label: "MULTIMEDIA ARTIST" },
    { code: "21664", label: "ANIMATOR" },
    { code: "21665", label: "INTERACTION/USER EXPERIENCE DESIGNER" },
    { code: "21666", label: "COMMERCIAL ARTIST" },
    { code: "21669", label: "OTHER GRAPHIC AND MULTIMEDIA DESIGNERS AND ARTISTS" },
    { code: "21711", label: "CHIEF ENGINEER (SHIP)" },
    { code: "21712", label: "MARINE SUPERINTENDENT ENGINEER" },
    { code: "21713", label: "SHIP CAPTAIN" },
    { code: "21714", label: "MARINE SUPERINTENDENT (DECK)" },
    { code: "21721", label: "COMMERCIAL AIRLINE PILOT" },
    { code: "21722", label: "AIRCRAFT PILOT (EXCEPT COMMERCIAL AIRLINE AND AIR FORCE)" },
    { code: "21723", label: "FLIGHT NAVIGATOR" },
    { code: "21724", label: "FLIGHT ENGINEER" },
    { code: "21725", label: "FLYING INSTRUCTOR (EXCEPT AIR FORCE)" },
    { code: "21729", label: "OTHER AIRCRAFT PILOTS AND RELATED ASSOCIATE PROFESSIONALS" },
    { code: "22110", label: "GENERAL PRACTITIONER/PHYSICIAN" },
    { code: "22121", label: "CARDIOLOGIST" },
    { code: "22122", label: "DERMATOLOGIST" },
    { code: "22123", label: "GASTROENTEROLOGIST" },
    { code: "22124", label: "INTERNAL MEDICINE PHYSICIAN" },
    { code: "22125", label: "MEDICAL ONCOLOGIST" },
    { code: "22126", label: "PAEDIATRICIAN" },
    { code: "22127", label: "RESPIRATORY PHYSICIAN" },
    { code: "22128", label: "PSYCHIATRIST" },
    {
        code: "22129",
        label: "OTHER SPECIALIST MEDICAL PRACTITIONERS (MEDICAL) (EG ENDOCRINOLOGIST, GERIATRICIAN, HAEMATOLOGIST, INFECTIOUS DISEASES PHYSICIAN, NEUROLOGIST, NUCLEAR MEDICINE PHYSICIAN, REHABILITATION PHYSICIAN, RENAL PHYSICIAN, RHEUMATOLOGIST)"
    },
    { code: "22131", label: "GENERAL SURGEON" },
    { code: "22132", label: "CARDIOTHORACIC SURGEON" },
    { code: "22133", label: "HAND SURGEON" },
    { code: "22134", label: "NEUROSURGEON" },
    { code: "22135", label: "ORTHOPAEDIC SURGEON" },
    { code: "22136", label: "PAEDIATRIC SURGEON" },
    { code: "22137", label: "PLASTIC SURGEON" },
    { code: "22138", label: "UROLOGIST" },
    { code: "22139", label: "OTHER SPECIALIST MEDICAL PRACTITIONERS (SURGICAL)" },
    { code: "22141", label: "ANAESTHESIOLOGIST" },
    { code: "22142", label: "DIAGNOSTIC RADIOLOGIST" },
    { code: "22143", label: "EMERGENCY PHYSICIAN" },
    { code: "22144", label: "OBSTETRICIAN/GYNAECOLOGIST" },
    { code: "22145", label: "OPHTHALMOLOGIST" },
    { code: "22146", label: "PATHOLOGIST" },
    { code: "22147", label: "PUBLIC HEALTH PHYSICIAN" },
    { code: "22148", label: "OTORHINOLARYNGOLOGIST/EAR, NOSE, THROAT (ENT) SPECIALIST" },
    { code: "22151", label: "SPORTS PHYSICIAN" },
    {
        code: "22159",
        label: "OTHER SPECIALIST MEDICAL PRACTITIONERS (OTHER SPECIALISATIONS) (EG OCCUPATIONAL PHYSICIAN, RADIATION ONCOLOGIST)"
    },
    {
        code: "22200",
        label: "REGISTERED NURSE AND OTHER NURSING PROFESSIONALS (EG CLINICAL NURSE, NURSE EDUCATOR, EXCLUDING ENROLLED NURSE)"
    },
    { code: "22301", label: "TRADITIONAL CHINESE MEDICINE PRACTITIONER" },
    { code: "22302", label: "TRADITIONAL CHINESE MEDICINE ACUPUNCTURIST" },
    { code: "22500", label: "VETERINARIAN" },
    { code: "22611", label: "DENTIST (GENERAL)" },
    { code: "22612", label: "SPECIALISED DENTIST (EG ORTHODONTIST)" },
    { code: "22621", label: "PHARMACIST (PATIENT CARE)" },
    { code: "22629", label: "OTHER PHARMACISTS" },
    { code: "22631", label: "OCCUPATIONAL HEALTH PROFESSIONAL (EG OCCUPATIONAL HYGIENISTS AND OCCUPATIONAL HYGIENE OFFICER)" },
    { code: "22632", label: "ENVIRONMENTAL OFFICER (PUBLIC HEALTH)" },
    { code: "22639", label: "OTHER ENVIRONMENTAL AND OCCUPATIONAL HEALTH AND HYGIENE PROFESSIONALS" },
    { code: "22641", label: "PHYSIOTHERAPIST" },
    { code: "22649", label: "OTHER PHYSICAL THERAPISTS AND RELATED PROFESSIONALS" },
    { code: "22651", label: "DIETITIAN" },
    { code: "22652", label: "NUTRITIONIST" },
    { code: "22661", label: "AUDIOLOGIST" },
    { code: "22662", label: "SPEECH THERAPIST" },
    { code: "22670", label: "OPTOMETRIST" },
    { code: "22680", label: "OCCUPATIONAL THERAPIST" },
    { code: "22691", label: "OSTEOPATH" },
    { code: "22692", label: "CHIROPRACTOR" },
    { code: "22693", label: "PODIATRIST" },
    { code: "22694", label: "MEDICAL DIAGNOSTIC RADIOGRAPHER" },
    { code: "22695", label: "RADIATION THERAPIST" },
    { code: "22699", label: "OTHER HEALTH PROFESSIONALS N.E.C." },
    { code: "23101", label: "UNIVERSITY LECTURER" },
    { code: "23102", label: "POLYTECHNIC LECTURER" },
    { code: "23103", label: "TEACHING ASSISTANT/TUTOR IN UNIVERSITIES" },
    { code: "23109", label: "OTHER UNIVERSITY, POLYTECHNIC AND HIGHER EDUCATION TEACHERS" },
    { code: "23200", label: "JUNIOR COLLEGE AND PRE-UNIVERSITY TEACHER (INCLUDING INTEGRATED PROGRAMME YEAR 5-6 TEACHER)" },
    { code: "23300", label: "TECHNICAL/VOCATIONAL/COMMERCIAL EDUCATION INSTITUTE TEACHER AND TRAINER" },
    { code: "23400", label: "SECONDARY SCHOOL TEACHER (INCLUDING INTEGRATED PROGRAMME YEAR 1-4 TEACHER)" },
    { code: "23500", label: "PRIMARY SCHOOL TEACHER" },
    { code: "23611", label: "EDUCATION METHODS ADVISER" },
    { code: "23612", label: "TEACHING AID SPECIALIST (INCLUDING AUDIO-VISUAL AID SPECIALIST)" },
    { code: "23619", label: "OTHER EDUCATION METHODS SPECIALISTS" },
    { code: "23621", label: "TEACHER OF THE BLIND" },
    { code: "23622", label: "TEACHER OF THE DEAF" },
    { code: "23623", label: "TEACHER OF THE MENTALLY HANDICAPPED" },
    {
        code: "23624",
        label: "SPECIAL EDUCATION TEACHERS FOR INFANTS AND CHILDREN (EG EARLY INTERVENTION PROGRAMME FOR INFANTS AND CHILDREN TEACHERS)"
    },
    { code: "23629", label: "OTHER SPECIAL EDUCATION TEACHERS" },
    { code: "23690", label: "OTHER TEACHING PROFESSIONALS N.E.C." },
    { code: "24111", label: "ACCOUNTANT (EXCLUDING TAX ACCOUNTANT)" },
    { code: "24112", label: "AUDITOR (ACCOUNTING)" },
    { code: "24113", label: "TAX ACCOUNTANT" },
    { code: "24120", label: "FINANCIAL/INVESTMENT ADVISER (EG RELATIONSHIP MANAGER)" },
    { code: "24131", label: "FINANCIAL ANALYST (EG EQUITIES ANALYST, CREDIT ANALYST, INVESTMENT RESEARCH ANALYST)" },
    { code: "24132", label: "COMPLIANCE OFFICER/RISK ANALYST (FINANCIAL)" },
    { code: "24133", label: "FUND/PORTFOLIO MANAGER (INCLUDING ASSET ALLOCATOR)" },
    { code: "24134", label: "TREASURY MANAGER" },
    { code: "24139", label: "OTHER FINANCIAL ANALYSTS AND RELATED PROFESSIONALS (EG FINANCIAL PRODUCT STRUCTURER/PRODUCT CONTROLLER)" },
    { code: "24141", label: "SECURITIES AND FINANCE DEALER/BROKER" },
    { code: "24142", label: "FOREIGN EXCHANGE DEALER/BROKER" },
    { code: "24143", label: "FINANCIAL DERIVATIVES DEALER/BROKER" },
    { code: "24144", label: "COMMODITIES DERIVATIVES BROKER" },
    { code: "24149", label: "OTHER FINANCE DEALERS AND BROKERS" },
    { code: "24150", label: "INSURANCE UNDERWRITER" },
    { code: "24211", label: "MANAGEMENT CONSULTANT" },
    { code: "24212", label: "BUSINESS CONSULTANT" },
    { code: "24220", label: "POLICY ADMINISTRATION PROFESSIONAL (EG POLICY ANALYST)" },
    { code: "24231", label: "HUMAN RESOURCE CONSULTANT (EXCLUDING EXECUTIVE SEARCH CONSULTANT)" },
    { code: "24232", label: "EXECUTIVE SEARCH CONSULTANT" },
    { code: "24291", label: "RESEARCH OFFICER (NON-STATISTICAL)" },
    { code: "24299", label: "OTHER ADMINISTRATION PROFESSIONALS N.E.C." },
    { code: "24311", label: "CREATIVE DIRECTOR (ADVERTISING)" },
    { code: "24312", label: "MARKET RESEARCH ANALYST" },
    { code: "24320", label: "PUBLIC RELATIONS/CORPORATE COMMUNICATIONS PROFESSIONAL" },
    { code: "24331", label: "TECHNICAL SALES PROFESSIONALS" },
    { code: "24332", label: "MEDICAL AND PHARMACEUTICAL PRODUCTS SALES PROFESSIONALS" },
    { code: "24333", label: "ICT SALES PROFESSIONALS" },
    { code: "24334", label: "SALES PROFESSIONALS (INSTITUTIONAL SALES OF FINANCIAL PRODUCTS)" },
    { code: "24339", label: "OTHER SPECIALISED GOODS SALES PROFESSIONALS" },
    { code: "24341", label: "TRADE BROKER (INCLUDING OIL AND BUNKER TRADER)" },
    { code: "24342", label: "SHIP BROKER" },
    { code: "24343", label: "SHIP CHARTERER" },
    { code: "25111", label: "SYSTEMS DESIGNER/ANALYST" },
    { code: "25112", label: "IT BUSINESS PROCESS CONSULTANT/BUSINESS ANALYST" },
    { code: "25113", label: "ENTERPRISE/SOLUTION ARCHITECT" },
    { code: "25121", label: "SOFTWARE DEVELOPER" },
    { code: "25122", label: "WEB AND MOBILE APPLICATIONS DEVELOPER" },
    { code: "25123", label: "MULTIMEDIA (INCLUDING COMPUTER GAMES) DEVELOPER" },
    { code: "25140", label: "APPLICATIONS/SYSTEMS PROGRAMMER" },
    { code: "25151", label: "INFORMATION TECHNOLOGY TESTING/QUALITY ASSURANCE SPECIALIST" },
    { code: "25152", label: "INFORMATION TECHNOLOGY AUDITOR" },
    { code: "25160", label: "INFORMATION TECHNOLOGY PROJECT MANAGER" },
    { code: "25190", label: "SOFTWARE AND APPLICATIONS DEVELOPER AND ANALYST N.E.C." },
    { code: "25211", label: "DATABASE ADMINISTRATOR" },
    { code: "25212", label: "DATABASE ARCHITECT" },
    { code: "25220", label: "NETWORK, SERVERS AND COMPUTER SYSTEMS ADMINISTRATOR" },
    { code: "25230", label: "NETWORK/INFRASTRUCTURE ARCHITECT, ENGINEER AND SPECIALIST" },
    { code: "25240", label: "INFORMATION TECHNOLOGY SECURITY SPECIALIST" },
    { code: "25291", label: "DATA SCIENTIST" },
    { code: "25299", label: "DATABASE AND NETWORK PROFESSIONAL N.E.C." },
    { code: "26111", label: "ADVOCATE/SOLICITOR (PRACTISING)" },
    { code: "26112", label: "IN-HOUSE LEGAL COUNSEL (EXCEPT JUDICIARY, MINISTRIES AND STATUTORY BOARDS)" },
    { code: "26119", label: "OTHER LAWYERS (EG PROSECUTORS, LEGAL COUNSEL IN MINISTRIES AND STATUTORY BOARDS)" },
    { code: "26120", label: "JUDGE (INCLUDING REGISTRAR IN JUDICIARY)" },
    { code: "26211", label: "ARCHIVIST" },
    { code: "26212", label: "CURATOR (ART GALLERY AND MUSEUM)" },
    { code: "26213", label: "CONSERVATOR (ART WORKS)" },
    { code: "26221", label: "LIBRARIAN" },
    { code: "26229", label: "OTHER INFORMATION PROFESSIONALS" },
    { code: "26310", label: "ECONOMIST" },
    { code: "26321", label: "SOCIOLOGIST" },
    { code: "26322", label: "ANTHROPOLOGIST" },
    { code: "26323", label: "SOCIAL RESEARCH ANALYST" },
    { code: "26331", label: "HISTORIAN" },
    { code: "26332", label: "POLITICAL SCIENTIST" },
    { code: "26339", label: "OTHER SOCIAL SCIENCE PROFESSIONALS (EG PHILOSOPHER)" },
    { code: "26340", label: "PSYCHOLOGIST" },
    { code: "26351", label: "SOCIAL WORKER (GENERAL)" },
    { code: "26352", label: "SOCIAL WORKER (DELINQUENCY)" },
    { code: "26353", label: "MEDICAL SOCIAL WORKER" },
    { code: "26354", label: "COUNSELLOR (REHABILITATION)" },
    { code: "26355", label: "COUNSELLOR (DRUGS AND ALCOHOL)" },
    { code: "26356", label: "COUNSELLOR (FAMILY)" },
    { code: "26357", label: "SCHOOL COUNSELLOR" },
    { code: "26359", label: "OTHER SOCIAL WORK AND COUNSELLING PROFESSIONALS" },
    { code: "26411", label: "AUTHOR" },
    { code: "26412", label: "SCRIPT WRITER" },
    { code: "26413", label: "ADVERTISING COPYWRITER" },
    { code: "26414", label: "TECHNICAL WRITER" },
    { code: "26415", label: "CONTINUITY AND SCRIPT EDITOR" },
    { code: "26416", label: "BOOK EDITOR" },
    { code: "26419", label: "OTHER AUTHORS AND RELATED WRITERS" },
    { code: "26421", label: "JOURNALIST" },
    { code: "26422", label: "EDITOR (NEWS AND PERIODICALS)" },
    { code: "26431", label: "TRANSLATOR" },
    { code: "26432", label: "INTERPRETER" },
    { code: "26511", label: "SCULPTOR" },
    { code: "26512", label: "PAINTER" },
    { code: "26513", label: "CARTOONIST" },
    { code: "26519", label: "OTHER VISUAL ARTISTS" },
    { code: "26521", label: "INSTRUMENTALIST" },
    { code: "26522", label: "COMPOSER/ORCHESTRATOR" },
    { code: "26523", label: "CONDUCTOR/DIRECTOR OF ORCHESTRA/BAND/CHOIR" },
    { code: "26524", label: "SINGER" },
    { code: "26529", label: "OTHER MUSICIANS, COMPOSERS AND SINGERS" },
    { code: "26531", label: "DANCER" },
    { code: "26532", label: "CHOREOGRAPHER" },
    { code: "26541", label: "PRODUCER (STAGE, FILM, TELEVISION, COMPUTER GAMES, VIDEO AND RADIO)" },
    { code: "26542", label: "DIRECTOR (STAGE, FILM, TELEVISION AND RADIO)" },
    { code: "26543", label: "ARTISTIC DIRECTOR (STAGE, FILM, TELEVISION AND RADIO)" },
    { code: "26544", label: "PRODUCER/DIRECTOR OF COMMERCIALS" },
    { code: "26545", label: "EDITOR (RADIO, TELEVISION AND VIDEO)" },
    { code: "26549", label: "OTHER FILM, STAGE AND RELATED DIRECTORS AND PRODUCERS" },
    { code: "26550", label: "ACTOR" },
    { code: "26561", label: "RADIO PRESENTER" },
    { code: "26562", label: "TELEVISION PRESENTER" },
    { code: "26563", label: "DUBBING ARTISTE" },
    { code: "26569", label: "OTHER RADIO AND TELEVISION PRESENTERS AND RELATED PROFESSIONALS" },
    { code: "29011", label: "MINISTER OF RELIGION" },
    { code: "29019", label: "OTHER RELIGIOUS PROFESSIONALS" },
    { code: "29090", label: "OTHER PROFESSIONALS N.E.C. (EG PATENT AGENT, TRADEMARK AGENT, INTELLECTUAL PROPERTY STRATEGIST)" },
    { code: "31001", label: "ASSISTANT CIVIL AND STRUCTURAL ENGINEER" },
    { code: "31002", label: "ASSISTANT ELECTRICAL ENGINEER" },
    { code: "31003", label: "ASSISTANT ELECTRONICS ENGINEER" },
    { code: "31004", label: "ASSISTANT MECHANICAL ENGINEER" },
    { code: "31005", label: "ASSISTANT CHEMICAL ENGINEER" },
    { code: "31006", label: "ASSISTANT MANUFACTURING ENGINEER" },
    { code: "31009", label: "OTHER ASSISTANT ENGINEERS" },
    { code: "31111", label: "CHEMISTRY TECHNICIAN" },
    { code: "31112", label: "PHYSICS TECHNICIAN" },
    { code: "31119", label: "OTHER CHEMICAL AND PHYSICAL SCIENCE TECHNICIANS" },
    { code: "31121", label: "CIVIL ENGINEERING TECHNICIAN" },
    { code: "31122", label: "STRUCTURAL ENGINEERING TECHNICIAN" },
    { code: "31123", label: "BUILDING TECHNICIAN" },
    { code: "31124", label: "LAND SURVEYING TECHNICIAN" },
    { code: "31125", label: "RESIDENT TECHNICAL OFFICER" },
    { code: "31129", label: "OTHER CIVIL ENGINEERING AND RELATED TECHNICIANS" },
    { code: "31131", label: "ELECTRICAL ENGINEERING TECHNICIAN (GENERAL)" },
    { code: "31132", label: "ELECTRICAL ENGINEERING TECHNICIAN (HIGH VOLTAGE)" },
    { code: "31139", label: "OTHER ELECTRICAL ENGINEERING TECHNICIANS" },
    { code: "31141", label: "ELECTRONICS ENGINEERING TECHNICIAN (GENERAL)" },
    { code: "31142", label: "SEMI-CONDUCTOR TECHNICIAN" },
    { code: "31143", label: "AUDIO AND VIDEO EQUIPMENT TECHNICIAN" },
    { code: "31144", label: "INSTRUMENTATION TECHNICIAN" },
    { code: "31149", label: "OTHER ELECTRONICS ENGINEERING TECHNICIANS" },
    { code: "31151", label: "MECHANICAL ENGINEERING TECHNICIAN (GENERAL)" },
    { code: "31152", label: "AERONAUTICAL ENGINEERING TECHNICIAN" },
    { code: "31153", label: "AUTOMOTIVE ENGINEERING TECHNICIAN" },
    { code: "31154", label: "AIR-CONDITIONING/REFRIGERATION ENGINEERING TECHNICIAN" },
    { code: "31155", label: "MACHINING/TOOLING TECHNICIAN" },
    { code: "31156", label: "TOOL/MOULD DESIGNER" },
    { code: "31157", label: "MARINE SURVEYOR (SHIP AND NAUTICAL)" },
    { code: "31158", label: "AIRWORTHINESS SURVEYOR" },
    { code: "31159", label: "OTHER MECHANICAL ENGINEERING TECHNICIANS" },
    { code: "31161", label: "CHEMICAL ENGINEERING TECHNICIAN (GENERAL)" },
    { code: "31162", label: "CHEMICAL ENGINEERING TECHNICIAN (PETROLEUM AND NATURAL GAS)" },
    { code: "31163", label: "CHEMICAL ENGINEERING TECHNICIAN (PETROCHEMICALS)" },
    { code: "31169", label: "OTHER CHEMICAL ENGINEERING TECHNICIANS" },
    { code: "31171", label: "MANUFACTURING ENGINEERING TECHNICIAN (GENERAL)" },
    { code: "31172", label: "PRODUCTION ENGINEERING TECHNICIAN" },
    { code: "31173", label: "AUTOMATION DESIGNER" },
    { code: "31174", label: "AUTOMATION TECHNICIAN" },
    { code: "31175", label: "QUALITY ASSURANCE TECHNICIAN" },
    { code: "31179", label: "OTHER MANUFACTURING ENGINEERING TECHNICIANS" },
    { code: "31181", label: "DRAUGHTSMAN (GENERAL)" },
    { code: "31182", label: "MECHANICAL DRAUGHTSMAN" },
    { code: "31183", label: "ELECTRICAL/ELECTRONICS DRAUGHTSMAN" },
    { code: "31184", label: "CIVIL/STRUCTURAL ENGINEERING DRAUGHTSMAN" },
    { code: "31185", label: "ARCHITECTURAL DRAUGHTSMAN" },
    { code: "31186", label: "MARINE DRAUGHTSMAN" },
    { code: "31189", label: "OTHER DRAUGHTSMEN (EG CARTOGRAPHICAL DRAUGHTSMAN)" },
    { code: "31191", label: "MECHATRONICS TECHNICIAN" },
    { code: "31192", label: "REFINING/SMELTING TECHNICIAN" },
    { code: "31193", label: "PHYSICAL METALLURGY TECHNICIAN" },
    { code: "31194", label: "PETROLEUM AND NATURAL GAS EXTRACTION TECHNICIAN" },
    { code: "31195", label: "ELECTRONIC PRE-PRESS TECHNICIAN" },
    { code: "31196", label: "PRECISION OPTICS TECHNICIAN" },
    { code: "31197", label: "QUANTITY SURVEYING TECHNICIAN" },
    { code: "31199", label: "OTHER PHYSICAL AND ENGINEERING SCIENCE TECHNICIANS N.E.C." },
    { code: "31411", label: "BIOLOGICAL TECHNICIAN" },
    { code: "31412", label: "FOOD SCIENCE TECHNICIAN" },
    { code: "31413", label: "CLINICAL RESEARCH COORDINATOR" },
    { code: "31419", label: "OTHER LIFE SCIENCE TECHNICIANS" },
    { code: "31421", label: "HORTICULTURAL TECHNICIAN (INCLUDING IRRIGATION SPECIALIST)" },
    { code: "31422", label: "PLANT TISSUE CULTURE TECHNICIAN" },
    { code: "31423", label: "FARMING TECHNICIAN (ANIMAL PRODUCTION)" },
    { code: "31429", label: "OTHER AGRONOMY, HORTICULTURAL AND FARMING RELATED TECHNICIANS" },
    { code: "31510", label: "MARINE ENGINEERING OFFICER" },
    { code: "31521", label: "SHIP'S NAVIGATING OFFICER (INCLUDING CHIEF, SECOND AND THIRD OFFICER)" },
    { code: "31522", label: "SHIP PILOT" },
    { code: "31529", label: "OTHER SHIPS' DECK OFFICERS AND PILOTS" },
    { code: "31540", label: "AIR TRAFFIC CONTROLLER" },
    { code: "31560", label: "SEA TRAFFIC CONTROLLER" },
    { code: "31571", label: "AIR TRANSPORT SERVICE SUPERVISOR" },
    { code: "31572", label: "MRT SERVICE SUPERVISOR" },
    { code: "31573", label: "ROAD TRANSPORT SUPERVISOR" },
    { code: "31574", label: "PORT/SHIPPING OPERATIONS SUPERVISOR" },
    { code: "31579", label: "OTHER TRANSPORT OPERATIONS SUPERVISORS" },
    { code: "31591", label: "PORT MASTER/DOCKMASTER" },
    { code: "31592", label: "PORT CAPTAIN" },
    { code: "31593", label: "FLIGHT OPERATIONS OFFICER" },
    { code: "31594", label: "AIR CARGO OFFICER" },
    { code: "31595", label: "LOAD-SHEET OFFICER (AIRCRAFT)" },
    { code: "31596", label: "MRT OPERATIONS OFFICER" },
    { code: "31599", label: "OTHER TRANSPORT CONTROLLERS AND RELATED WORKERS N.E.C." },
    { code: "31601", label: "PREMISES AND FACILITIES MAINTENANCE OFFICER" },
    { code: "31602", label: "LANDSCAPE OPERATIONS OFFICER" },
    { code: "31603", label: "PARKS OFFICER" },
    { code: "31711", label: "FIRE AND SAFETY INSPECTOR" },
    { code: "31719", label: "OTHER BUILDING AND FIRE INSPECTORS" },
    { code: "31720", label: "SAFETY INSPECTOR (VEHICLES, PROCESSES AND PRODUCTS)" },
    { code: "32111", label: "SONOGRAPHER" },
    { code: "32112", label: "MEDICAL X-RAY TECHNICIAN" },
    { code: "32119", label: "OTHER MEDICAL IMAGING, THERAPEUTIC EQUIPMENT TECHNICIANS AND RELATED ASSOCIATE PROFESSIONALS" },
    { code: "32120", label: "MEDICAL AND PATHOLOGY LABORATORY TECHNICIAN" },
    { code: "32130", label: "PHARMACY TECHNICIAN" },
    { code: "32141", label: "PROSTHEIST/ORTHOPAEDIC TECHNICIAN" },
    { code: "32142", label: "ORTHOTIST/ORTHOPAEDIC APPLIANCE MAKER AND REPAIRER" },
    { code: "32143", label: "DENTAL TECHNICIAN" },
    { code: "32200", label: "ENROLLED/ASSISTANT NURSE (EXCLUDING REGISTERED NURSE)" },
    { code: "32300", label: "TRADITIONAL AND COMPLEMENTARY MEDICINE ASSOCIATE PROFESSIONAL (EG HOMEOPATH AND NATUROPATH)" },
    { code: "32400", label: "VETERINARY TECHNICIAN/ASSISTANT" },
    { code: "32511", label: "DENTAL ASSISTANT" },
    { code: "32512", label: "ORAL HEALTH THERAPIST (EG DENTAL THERAPISTS AND DENTAL HYGIENISTS)" },
    { code: "32530", label: "COMMUNITY HEALTH WORKER" },
    { code: "32540", label: "OPTICIAN" },
    { code: "32551", label: "MASSAGE THERAPIST" },
    { code: "32559", label: "OTHER PHYSIOTHERAPY TECHNICIANS AND RELATED ASSOCIATED PROFESSIONALS" },
    { code: "32571", label: "ENVIRONMENTAL INSPECTOR (ENVIRONMENTAL PUBLIC HEALTH)" },
    { code: "32572", label: "OCCUPATIONAL HEALTH INSPECTOR" },
    { code: "32591", label: "PARAMEDIC" },
    { code: "32599", label: "OTHER HEALTH ASSOCIATE PROFESSIONALS N.E.C." },
    { code: "33120", label: "CREDIT AND LOANS OFFICER" },
    { code: "33130", label: "ACCOUNTING ASSOCIATE PROFESSIONAL (EG ASSISTANT ACCOUNTANT, AUDIT (ACCOUNTING) EXECUTIVE)" },
    { code: "33151", label: "APPRAISER/VALUER (EXCLUDING INTANGIBLE ASSET VALUER)" },
    { code: "33152", label: "ASSESSOR" },
    { code: "33153", label: "INTANGIBLE ASSET VALUER (EG INTELLECTUAL PROPERTY VALUATION ANALYST)" },
    { code: "33211", label: "INSURANCE SALES AGENT/BROKER (INCLUDING INDEPENDENT FINANCIAL PLANNER)" },
    { code: "33219", label: "OTHER INSURANCE REPRESENTATIVES AND RELATED ASSOCIATE PROFESSIONALS" },
    { code: "33221", label: "BUSINESS DEVELOPMENT EXECUTIVE" },
    { code: "33222", label: "AFTER SALES ADVISER/CLIENT ACCOUNT SERVICE EXECUTIVE" },
    { code: "33223", label: "MARKETING AND SALES EXECUTIVE (FOOD & BEVERAGE SERVICES)" },
    { code: "33229", label: "OTHER COMMERCIAL AND MARKETING SALES EXECUTIVES" },
    { code: "33231", label: "BUYER" },
    { code: "33232", label: "PURCHASING AGENT" },
    { code: "33291", label: "INTELLECTUAL PROPERTY BROKERS AND TRANSACTION SPECIALISTS" },
    { code: "33299", label: "SALES AND RELATED ASSOCIATE PROFESSIONAL N.E.C." },
    { code: "33311", label: "CLEARING AND FORWARDING AGENT" },
    { code: "33312", label: "SHIP AGENT" },
    { code: "33320", label: "EXHIBITION/CONFERENCE/EVENT PLANNER (INCLUDING WEDDING PLANNER/COORDINATOR)" },
    { code: "33330", label: "EMPLOYMENT AGENT/LABOUR CONTRACTOR" },
    { code: "33340", label: "REAL ESTATE AGENT" },
    { code: "33391", label: "AUCTIONEER" },
    { code: "33392", label: "ADVERTISING SALESMAN" },
    { code: "33393", label: "INTERNATIONAL MARKET AGENT/REPRESENTATIVE (EG JUNKET OPERATOR)" },
    { code: "33399", label: "OTHER BUSINESS SERVICES AGENTS N.E.C. (EG SPORTS AGENT, ARTISTE AGENT)" },
    { code: "33451", label: "PERSONNEL/HUMAN RESOURCE OFFICER" },
    { code: "33452", label: "INDUSTRIAL RELATIONS OFFICER" },
    { code: "33453", label: "TRAINING OFFICER" },
    { code: "33454", label: "CREWING EXECUTIVE (SHIP)" },
    { code: "33491", label: "MANAGEMENT EXECUTIVE" },
    { code: "33492", label: "OPERATIONS OFFICER (EXCEPT TRANSPORT OPERATIONS)" },
    { code: "33499", label: "OTHER ADMINISTRATIVE AND RELATED ASSOCIATE PROFESSIONALS N.E.C. (EG CAREER CONSULTANT/ADVISOR/COACH)" },
    { code: "33510", label: "CUSTOMS/IMMIGRATION OFFICER" },
    { code: "33550", label: "POLICE INSPECTOR" },
    { code: "33591", label: "GOVERNMENT TAX AND EXCISE OFFICIAL" },
    { code: "33592", label: "GOVERNMENT SOCIAL BENEFITS OFFICIAL" },
    { code: "33593", label: "GOVERNMENT LICENSING OFFICIAL" },
    { code: "33599", label: "OTHER GOVERNMENT ASSOCIATE PROFESSIONALS N.E.C." },
    { code: "34110", label: "LEGAL ASSOCIATE PROFESSIONAL (EG PARALEGAL)" },
    { code: "34121", label: "YOUTH WORKER" },
    { code: "34129", label: "OTHER SOCIAL WORK ASSOCIATE PROFESSIONALS" },
    { code: "34210", label: "ATHLETE/SPORTSMAN" },
    { code: "34221", label: "SPORTS COACH" },
    { code: "34222", label: "MARTIAL ARTS INSTRUCTOR" },
    { code: "34223", label: "PHYSICAL FITNESS INSTRUCTOR (INCLUDING YOGA INSTRUCTOR AND AEROBICS INSTRUCTOR)" },
    { code: "34224", label: "SPORTS OFFICIAL" },
    {
        code: "34229",
        label: "OTHER RELATED INSTRUCTORS AND ASSOCIATE PROFESSIONALS (EG ADVENTURE TRAINING INSTRUCTOR AND SCUBA DIVING INSTRUCTOR)"
    },
    { code: "34310", label: "PHOTOGRAPHER" },
    { code: "34321", label: "INTERIOR DESIGNER" },
    { code: "34322", label: "LANDSCAPE DESIGNER" },
    { code: "34323", label: "DISPLAY ARTIST" },
    { code: "34324", label: "DECORATOR AND RELATED WORKER (EG WINDOW DRESSER AND SET DESIGNER)" },
    { code: "34331", label: "LIBRARY OFFICER" },
    { code: "34332", label: "GALLERY, MUSEUM AND RELATED TECHNICIAN" },
    { code: "34340", label: "CHEF" },
    { code: "34391", label: "TATTOOIST" },
    { code: "34399", label: "OTHER ARTISTIC AND CULTURAL ASSOCIATE PROFESSIONALS N.E.C." },
    { code: "34401", label: "CLOWN" },
    { code: "34402", label: "MAGICIAN" },
    { code: "34403", label: "ACROBAT" },
    { code: "34404", label: "AERIALIST" },
    { code: "34405", label: "DISC JOCKEY" },
    { code: "34409", label: "OTHER CREATIVE AND PERFORMING ARTS ASSOCIATE PROFESSIONALS" },
    { code: "35110", label: "COMPUTER SYSTEMS OPERATOR" },
    { code: "35120", label: "COMPUTER TECHNICIAN (INCLUDING IT USER HELPDESK TECHNICIAN)" },
    { code: "35140", label: "WEBSITE ADMINISTRATOR/WEBMASTER" },
    { code: "35211", label: "BROADCASTING OPERATIONS TECHNICIAN" },
    { code: "35212", label: "VIDEO CAMERA OPERATOR" },
    { code: "35213", label: "TELEVISION/MOTION PICTURE CAMERA OPERATOR" },
    { code: "35214", label: "RADIO AND TELEVISION STUDIO EQUIPMENT OPERATOR" },
    { code: "35215", label: "SOUND RECORDING EQUIPMENT OPERATOR" },
    { code: "35216", label: "CINEMA PROJECTIONIST" },
    { code: "35219", label: "OTHER BROADCASTING TECHNICIANS AND AUDIO-VISUAL OPERATORS (EG MICROPHONE OPERATOR)" },
    { code: "35220", label: "TELECOMMUNICATIONS TECHNICIAN" },
    { code: "35231", label: "TELECOMMUNICATIONS SERVICE SUPERVISOR" },
    { code: "35232", label: "RADIO-TELEPHONE OPERATOR (LAND-BASED)" },
    { code: "35233", label: "SHIP'S RADIO OFFICER" },
    { code: "35234", label: "FLIGHT RADIO OPERATOR" },
    { code: "35239", label: "OTHER TELECOMMUNICATIONS EQUIPMENT OPERATORS" },
    { code: "35290", label: "OPTICAL AND ELECTRONIC EQUIPMENT OPERATOR N.E.C." },
    { code: "36100", label: "PRE-PRIMARY EDUCATION TEACHER" },
    { code: "36201", label: "LANGUAGE INSTRUCTOR (EXTRACURRICULUM)" },
    { code: "36202", label: "ART AND CRAFT INSTRUCTOR (EXTRACURRICULUM)" },
    { code: "36203", label: "INFORMATION TECHNOLOGY TRAINER (EXTRACURRICULUM)" },
    { code: "36204", label: "MUSIC INSTRUCTOR (EXTRACURRICULUM)" },
    { code: "36205", label: "DANCE INSTRUCTOR (EXTRACURRICULUM)" },
    { code: "36206", label: "SPEECH AND DRAMA INSTRUCTOR (EXTRACURRICULUM)" },
    { code: "36209", label: "OTHER EXTRACURRICULUM INSTRUCTORS" },
    { code: "36910", label: "PRIVATE TUTOR (ACADEMIC)" },
    { code: "36991", label: "RELIEF TEACHER" },
    { code: "36999", label: "OTHER TEACHING ASSOCIATE PROFESSIONALS N.E.C." },
    { code: "39910", label: "NON-ORDAINED RELIGIOUS ASSOCIATE PROFESSIONAL" },
    { code: "39990", label: "OTHER ASSOCIATE PROFESSIONALS N.E.C." },
    { code: "40000", label: "CLERICAL SUPERVISOR" },
    { code: "41101", label: "OFFICE CLERK (GENERAL)" },
    { code: "41102", label: "FILING AND COPYING CLERK" },
    { code: "41103", label: "PERSONNEL/HUMAN RESOURCE CLERK" },
    { code: "41109", label: "OTHER ADMINISTRATIVE CLERKS (EG PUBLIC RELATIONS CLERK)" },
    { code: "41201", label: "SECRETARY" },
    { code: "41202", label: "VERBATIM REPORTER" },
    { code: "41311", label: "STENOGRAPHER" },
    { code: "41312", label: "TYPIST" },
    { code: "41319", label: "OTHER WORD PROCESSORS AND RELATED OPERATORS" },
    { code: "41320", label: "DATA ENTRY CLERK" },
    { code: "42111", label: "BANK TELLER" },
    { code: "42112", label: "POSTAL SERVICE COUNTER CLERK" },
    { code: "42113", label: "MONEY CHANGER" },
    { code: "42119", label: "OTHER TELLERS AND COUNTER CLERKS" },
    { code: "42131", label: "PAWNBROKER" },
    { code: "42132", label: "MONEYLENDER" },
    { code: "42141", label: "BILL COLLECTOR" },
    { code: "42149", label: "OTHER BILL COLLECTORS AND RELATED WORKERS" },
    { code: "42210", label: "TRAVEL AGENCY/SERVICE CLERK" },
    { code: "42230", label: "TELEPHONE OPERATOR" },
    { code: "42241", label: "RECEPTIONIST (GENERAL)" },
    { code: "42242", label: "HOTEL RECEPTIONIST" },
    { code: "42243", label: "MEDICAL/DENTAL RECEPTIONIST" },
    { code: "42244", label: "AIRPORT RECEPTIONIST/CLERK" },
    { code: "42245", label: "CUSTOMER SERVICE OFFICER/CLERK" },
    { code: "42246", label: "CONTACT CENTRE INFORMATION CLERK" },
    { code: "42249", label: "OTHER RECEPTIONISTS AND INFORMATION CLERKS" },
    { code: "42290", label: "CLIENT INFORMATION CLERK N.E.C." },
    { code: "43111", label: "BOOKKEEPER" },
    { code: "43112", label: "LEDGER AND ACCOUNTS CLERK" },
    { code: "43113", label: "AUDIT CLERK" },
    { code: "43114", label: "PAYROLL/WAGES CLERK" },
    { code: "43115", label: "BILLING CLERK" },
    { code: "43116", label: "PURCHASING CLERK" },
    { code: "43119", label: "OTHER ACCOUNTING CLERKS (EG COST CLERK)" },
    { code: "43121", label: "BANK OPERATIONS CLERK" },
    { code: "43122", label: "INSURANCE/UNDERWRITING CLERK" },
    { code: "43123", label: "SECURITIES CLERK" },
    { code: "43129", label: "OTHER FINANCE AND INSURANCE CLERKS (EG CREDIT CLERK)" },
    { code: "43141", label: "STATISTICAL CLERK (GENERAL)" },
    { code: "43142", label: "ENUMERATOR/MARKET RESEARCH INTERVIEWER" },
    { code: "43149", label: "OTHER STATISTICAL CLERKS" },
    { code: "43151", label: "DATA PROCESSING CONTROL CLERK" },
    { code: "43159", label: "OTHER COMPUTER OPERATIONS CLERKS" },
    { code: "43211", label: "STOCK RECORDS CLERK" },
    { code: "43212", label: "STOREKEEPER" },
    { code: "43219", label: "OTHER STOCK CLERKS" },
    { code: "43221", label: "MATERIAL PLANNING CLERK" },
    { code: "43222", label: "PRODUCTION PLANNING CLERK" },
    { code: "43229", label: "OTHER PRODUCTION CLERKS" },
    { code: "43231", label: "SHIPPING CLERK" },
    { code: "43232", label: "LAND TRANSPORT CLERK" },
    { code: "43233", label: "AIR TRANSPORT CLERK" },
    { code: "43239", label: "OTHER TRANSPORT CLERKS" },
    { code: "44110", label: "LIBRARY CLERK" },
    { code: "44170", label: "LEGAL CLERK" },
    { code: "44191", label: "PROOFREADING CLERK" },
    { code: "44199", label: "OTHER CLERICAL SUPPORT WORKERS N.E.C." },
    { code: "51111", label: "CHIEF STEWARD (SHIP)" },
    { code: "51112", label: "CABIN ATTENDANT/STEWARD" },
    { code: "51121", label: "RAIL STATION SERVICE ASSISTANT" },
    { code: "51122", label: "TICKET INSPECTOR" },
    { code: "51129", label: "OTHER TRANSPORT SERVICE INSPECTORS AND RELATED WORKERS" },
    { code: "51131", label: "TOUR GUIDE" },
    { code: "51132", label: "NATURE GUIDE (INCLUDING ZOO, BIRDPARK AND AQUARIUM)" },
    { code: "51133", label: "THEME PARK GUIDE" },
    { code: "51139", label: "OTHER GUIDES (EG MUSEUM, HISTORICAL SITES)" },
    { code: "51200", label: "COOK" },
    { code: "51311", label: "CAPTAIN WAITER/WAITER SUPERVISOR" },
    { code: "51312", label: "WAITER" },
    { code: "51321", label: "BARTENDER/MIXOLOGIST" },
    { code: "51322", label: "BARISTA" },
    { code: "51330", label: "BAR/LOUNGE HOSTESS" },
    { code: "51390", label: "WAITER AND BARTENDER N.E.C. (EG FOOD CHECKER (CATERING SERVICES))" },
    { code: "51411", label: "HAIR STYLIST/HAIRDRESSER" },
    { code: "51412", label: "BARBER" },
    { code: "51419", label: "OTHER HAIR CARE WORKERS (EG HAIR THERAPIST/CONSULTANT)" },
    { code: "51421", label: "BEAUTICIAN" },
    { code: "51422", label: "MANICURIST" },
    { code: "51423", label: "MAKE-UP ARTIST (STAGE, FILM AND STUDIO)" },
    { code: "51491", label: "MASSEUR (NON-MEDICAL) (INCLUDING FOOT REFLEXOLOGIST)" },
    { code: "51492", label: "SLIMMING CONSULTANT" },
    { code: "51499", label: "OTHER WELLNESS RELATED WORKERS N.E.C." },
    { code: "51501", label: "HOUSEKEEPER (HOTELS AND OTHER ESTABLISHMENTS)" },
    { code: "51502", label: "HOUSE STEWARD" },
    { code: "51503", label: "HOUSEKEEPING MATRON" },
    { code: "51509", label: "OTHER HOUSEKEEPERS AND RELATED WORKERS (EG PERSONAL BUTLER)" },
    { code: "51601", label: "POSTAL/COURIER SERVICE SUPERVISOR" },
    { code: "51602", label: "POSTMAN" },
    { code: "51603", label: "PROCESS SERVER" },
    { code: "51604", label: "DESPATCH WORKER" },
    { code: "51609", label: "OTHER MAIL DISTRIBUTION WORKERS (EG MAIL SORTER)" },
    { code: "51701", label: "GAMING SUPERVISOR (EG PIT MANAGER/SUPERVISOR, SLOT MANAGER/SUPERVISOR AND CASINO SHIFT MANAGER/SUPERVISOR)" },
    { code: "51702", label: "BOOKMAKER/CROUPIER/CASINO DEALER AND RELATED GAMING WORKER" },
    { code: "51910", label: "ASTROLOGER/FORTUNE TELLER AND RELATED WORKER" },
    { code: "51931", label: "UNDERTAKER" },
    { code: "51932", label: "EMBALMER" },
    { code: "51941", label: "PET GROOMER" },
    { code: "51942", label: "KEEPER/TRAINER IN ZOOLOGICAL, BIRD AND AQUATIC PARKS" },
    { code: "51943", label: "KEEPER/TRAINER IN CROCODILE FARM" },
    { code: "51944", label: "HORSE TRAINER" },
    { code: "51945", label: "DOG TRAINER" },
    { code: "51949", label: "OTHER ANIMAL/BIRD KEEPERS AND ANIMAL CARE WORKERS" },
    { code: "51950", label: "DRIVING INSTRUCTOR/TESTER" },
    { code: "51991", label: "SOCIAL ESCORT" },
    { code: "51999", label: "OTHER PERSONAL SERVICE WORKERS N.E.C." },
    { code: "52110", label: "HAWKER/STALL HOLDER (EXCLUDING PREPARED FOOD OR DRINKS)" },
    { code: "52120", label: "HAWKER/STALL HOLDER (PREPARED FOOD OR DRINKS)" },
    { code: "52130", label: "NEWSVENDOR" },
    { code: "52190", label: "OTHER STALL SALES WORKERS" },
    { code: "52201", label: "SALES SUPERVISOR" },
    { code: "52202", label: "SHOP SALES ASSISTANT" },
    { code: "52301", label: "CAGE/COUNT SUPERVISOR" },
    { code: "52302", label: "CASHIER (GENERAL)" },
    { code: "52303", label: "OFFICE CASHIER" },
    { code: "52309", label: "OTHER CASHIERS, TICKET AND RELATED CLERKS" },
    { code: "52411", label: "FASHION MODEL" },
    { code: "52419", label: "OTHER MODELS (EG ARTIST'S MODEL)" },
    { code: "52421", label: "SALES DEMONSTRATOR" },
    { code: "52422", label: "SALESPERSON (DOOR-TO-DOOR)" },
    { code: "52440", label: "TELEMARKETER" },
    { code: "52491", label: "PETROL STATION ATTENDANT" },
    { code: "52492", label: "FOOD SERVICE COUNTER ATTENDANT" },
    { code: "52499", label: "SALES WORKER N.E.C. (EG SHIP CHANDLER)" },
    { code: "53111", label: "BABYSITTER (HOUSEHOLD)" },
    { code: "53112", label: "CONFINEMENT NANNY" },
    { code: "53113", label: "CHILD /AFTER SCHOOL CARE CENTRE WORKER" },
    { code: "53114", label: "CHILD/YOUTH RESIDENTIAL CARE ASSISTANT" },
    { code: "53120", label: "TEACHERS' AIDE" },
    { code: "53201", label: "HEALTHCARE ASSISTANT (EG THERAPY AIDE/ASSISTANT)" },
    { code: "53209", label: "OTHER PERSONAL CARE WORKER (EG OLD FOLKS HOME)" },
    { code: "54110", label: "FIRE-FIGHTING AND RESCUE OFFICER" },
    { code: "54121", label: "POLICE OFFICER" },
    { code: "54122", label: "NARCOTICS OFFICER" },
    { code: "54123", label: "AUXILIARY POLICE OFFICER" },
    { code: "54130", label: "PRISON OFFICER" },
    { code: "54141", label: "SECURITY SUPERVISOR" },
    { code: "54142", label: "PRIVATE SECURITY OFFICER" },
    { code: "54150", label: "LIFEGUARD" },
    { code: "54191", label: "PRIVATE INVESTIGATOR" },
    { code: "54192", label: "INDUSTRIAL INVESTIGATOR" },
    { code: "54193", label: "INSURANCE INVESTIGATOR" },
    { code: "54194", label: "PARK RANGER" },
    { code: "54199", label: "OTHER PROTECTIVE SERVICES AND RELATED WORKERS N.E.C." },
    { code: "59000", label: "SERVICE WORKERS N.E.C." },
    { code: "61111", label: "HYDROPONICS FARM WORKER" },
    { code: "61112", label: "MUSHROOM FARM WORKER" },
    { code: "61119", label: "OTHER VEGETABLE FARM WORKERS" },
    { code: "61131", label: "FLOWER/ORCHID FARM WORKER" },
    { code: "61132", label: "NURSERY WORKER (EG NURSERY TECHNICIAN)" },
    { code: "61133", label: "GARDENERS AND HORTICULTURAL WORKERS (EG LANDSCAPE TECHNICIAN)" },
    { code: "61134", label: "NURSERY SUPERVISOR" },
    { code: "61139", label: "OTHER HORTICULTURAL AND NURSERY FARM WORKERS" },
    { code: "61210", label: "LIVESTOCK/DAIRY FARM WORKER" },
    { code: "61221", label: "POULTRY FARM WORKER (GENERAL)" },
    { code: "61222", label: "POULTRY HATCHERY WORKER" },
    { code: "61223", label: "POULTRY INSEMINATOR" },
    { code: "61229", label: "OTHER POULTRY FARM WORKERS (EG POULTRY VACCINATOR)" },
    { code: "61900", label: "AGRICULTURAL WORKER N.E.C." },
    { code: "62211", label: "FISH/PRAWN FARM WORKER" },
    { code: "62212", label: "AQUARIUM FISH FARM WORKER" },
    { code: "62213", label: "CROCODILE FARM WORKER" },
    { code: "62219", label: "OTHER AQUATIC LIFE CULTIVATION WORKERS (EG OYSTER FARM WORKER)" },
    { code: "62220", label: "COASTAL WATERS/DEEP SEA FISHERY WORKER" },
    { code: "71000", label: "SUPERVISOR/GENERAL FOREMAN (BUILDING AND RELATED TRADES)" },
    { code: "71120", label: "BRICKLAYER/BLOCKLAYER" },
    { code: "71131", label: "STONE CUTTER/CARVER" },
    { code: "71132", label: "STONEMASON" },
    { code: "71141", label: "REINFORCED CONCRETER (GENERAL)" },
    { code: "71142", label: "CONCRETE FORM WORKER" },
    { code: "71143", label: "CEMENT FINISHER/SCREEDER" },
    { code: "71144", label: "CEMENTER (PETROLEUM AND GAS WELLS)" },
    { code: "71149", label: "OTHER CONCRETE PLACERS, CONCRETE FINISHERS AND RELATED WORKERS" },
    { code: "71151", label: "CARPENTER" },
    { code: "71152", label: "JOINER" },
    { code: "71191", label: "SCAFFOLDER" },
    { code: "71192", label: "DEMOLITION WORKER" },
    { code: "71193", label: "CLADDING/CURTAIN WALL ERECTOR" },
    { code: "71199", label: "OTHER BUILDING FRAME AND RELATED TRADES WORKERS N.E.C. (EG STEEPLEJACK)" },
    { code: "71210", label: "ROOFER" },
    { code: "71220", label: "FLOOR/WALL TILER" },
    { code: "71230", label: "PLASTERER" },
    { code: "71241", label: "BUILDING INSULATOR" },
    { code: "71242", label: "BOILER/PIPE INSULATOR" },
    { code: "71243", label: "REFRIGERATION/AIR-CONDITIONING EQUIPMENT INSULATOR" },
    { code: "71244", label: "REFRACTORY WORKER" },
    { code: "71249", label: "OTHER INSULATION WORKERS" },
    { code: "71250", label: "GLAZIER" },
    { code: "71261", label: "PLUMBER" },
    { code: "71262", label: "PIPE FITTER" },
    { code: "71263", label: "PIPE/DRAIN LAYER" },
    { code: "71271", label: "AIR-CONDITIONING/REFRIGERATION EQUIPMENT MECHANICS" },
    { code: "71272", label: "AIR-CONDITIONING/REFRIGERATION PLANT INSTALLER" },
    { code: "71290", label: "BUILDING FINISHER AND RELATED TRADES WORKER N.E.C." },
    { code: "71311", label: "BUILDING PAINTER" },
    { code: "71312", label: "WALL/CEILING PAPERHANGER" },
    { code: "71321", label: "STRUCTURAL STEEL/SHIP PAINTER" },
    { code: "71322", label: "MOTOR VEHICLE SPRAY PAINTER" },
    { code: "71323", label: "SIGN PAINTER" },
    { code: "71324", label: "SPRAY PAINTER (EXCEPT SHIPS, MOTOR VEHICLES AND SIGNS)" },
    { code: "71329", label: "OTHER PAINTERS AND RELATED WORKERS" },
    { code: "71331", label: "BUILDING MAINTENANCE WORKER" },
    { code: "71332", label: "BUILDING STRUCTURE CLEANER AND RELATED WORKER" },
    { code: "72000", label: "SUPERVISOR/GENERAL FOREMAN (METAL, MACHINERY AND RELATED TRADES)" },
    { code: "72111", label: "METAL MOULDER" },
    { code: "72112", label: "COREMAKER" },
    { code: "72121", label: "WELDER" },
    { code: "72122", label: "FLAME CUTTER" },
    { code: "72131", label: "SHEET METAL WORKER (GENERAL)" },
    { code: "72132", label: "BOILERMAKER" },
    { code: "72133", label: "PANEL BEATER" },
    { code: "72139", label: "OTHER SHEET METAL WORKERS" },
    { code: "72141", label: "STRUCTURAL STEEL WORKER (WORKSHOP)/FABRICATOR" },
    { code: "72142", label: "REINFORCING IRON WORKER/STEEL REINFORCEMENT WORKER" },
    { code: "72143", label: "STRUCTURAL STEEL ERECTOR" },
    { code: "72144", label: "METAL SHIPWRIGHT" },
    { code: "72145", label: "SHIP PLATER" },
    { code: "72146", label: "MOULD LOFTER" },
    { code: "72149", label: "OTHER STRUCTURAL METAL PREPARERS AND ERECTORS" },
    { code: "72151", label: "HOISTING EQUIPMENT RIGGER (GENERAL)" },
    { code: "72152", label: "ROPE AND CABLE SPLICER (GENERAL)" },
    { code: "72153", label: "HOISTING EQUIPMENT RIGGER (CONSTRUCTION)" },
    { code: "72154", label: "SHIP RIGGER" },
    { code: "72155", label: "OIL AND GAS WELL DRILLING RIGGER" },
    { code: "72159", label: "OTHER RIGGERS AND CABLE SPLICERS" },
    { code: "72211", label: "BLACKSMITH (GENERAL)" },
    { code: "72212", label: "FORGING-PRESS OPERATOR" },
    { code: "72219", label: "OTHER BLACKSMITHS, HAMMERSMITHS AND FORGING-PRESS WORKERS" },
    { code: "72221", label: "TOOL AND DIE MAKER" },
    { code: "72222", label: "JIG AND GAUGE MAKER" },
    { code: "72223", label: "METAL PATTERN MAKER" },
    { code: "72224", label: "LOCKSMITH" },
    { code: "72229", label: "OTHER TOOLMAKERS AND RELATED WORKERS" },
    { code: "72241", label: "BUFFING/POLISHING MACHINE OPERATOR" },
    { code: "72242", label: "TOOL GRINDER (MACHINE TOOLS)" },
    { code: "72249", label: "OTHER METAL POLISHERS, GRINDERS AND TOOL SHARPENERS" },
    { code: "72311", label: "MOTOR VEHICLE MECHANIC" },
    { code: "72312", label: "MOTOR VEHICLE BODY BUILDER" },
    { code: "72321", label: "AIRCRAFT ENGINE MECHANIC" },
    { code: "72322", label: "AIRCRAFT ENGINE FITTER" },
    { code: "72331", label: "MACHINERY MECHANIC (GENERAL)" },
    { code: "72332", label: "MACHINERY FITTER (GENERAL)" },
    { code: "72333", label: "INDUSTRIAL/OFFICE MACHINERY MECHANIC" },
    { code: "72334", label: "MARINE ENGINE FITTER" },
    { code: "72335", label: "MACHINERY ERECTOR/INSTALLER" },
    { code: "72339", label: "OTHER MACHINERY MECHANICS AND REPAIRERS (EG AGRICULTURAL MACHINERY MECHANIC, BICYCLE REPAIRER)" },
    { code: "73000", label: "SUPERVISOR/GENERAL FOREMAN (PRECISION, HANDICRAFT, PRINTING AND RELATED TRADES)" },
    { code: "73111", label: "WATCH AND CLOCK ASSEMBLER" },
    { code: "73112", label: "WATCH AND CLOCK REPAIRER" },
    { code: "73113", label: "OPTICAL INSTRUMENT MAKER/REPAIRER" },
    { code: "73114", label: "MEDICAL DEVICE ASSEMBLER/REPAIRER" },
    { code: "73119", label: "OTHER PRECISION INSTRUMENT MAKERS AND REPAIRERS" },
    { code: "73120", label: "MUSICAL INSTRUMENT MAKER/REPAIRER/TUNER" },
    { code: "73131", label: "JEWELLERY WORKER (GENERAL)" },
    { code: "73132", label: "GEM SETTER/CUTTER AND POLISHER" },
    { code: "73133", label: "GOLDSMITH/SILVERSMITH" },
    { code: "73134", label: "JEWELLERY ENGRAVER" },
    { code: "73139", label: "OTHER JEWELLERY AND PRECIOUS METAL WORKERS" },
    { code: "73141", label: "POTTERY WORKER" },
    { code: "73142", label: "BRICK AND TILE MOULDER" },
    { code: "73149", label: "OTHER POTTERS AND RELATED WORKERS" },
    { code: "73151", label: "GLASS BLOWER" },
    { code: "73152", label: "GLASS LENS MOULDER" },
    { code: "73153", label: "OPTICAL GLASS CUTTER" },
    { code: "73154", label: "LENS GRINDING MACHINE OPERATOR" },
    { code: "73155", label: "LENS POLISHING MACHINE OPERATOR" },
    { code: "73159", label: "OTHER GLASS MAKERS, CUTTERS, GRINDERS AND FINISHERS" },
    { code: "73161", label: "GLASS ENGRAVER/ETCHER" },
    { code: "73162", label: "GLASS AND CERAMIC PAINTER/DECORATOR" },
    { code: "73169", label: "OTHER ENGRAVERS AND RELATED DECORATIVE PAINTERS" },
    { code: "73211", label: "COMPOSITOR/TYPESETTER" },
    { code: "73212", label: "STEREOTYPER" },
    { code: "73213", label: "ELECTROTYPER" },
    { code: "73214", label: "PHOTO-ENGRAVER" },
    { code: "73215", label: "PHOTOGRAVURE CAMERAMAN" },
    { code: "73216", label: "PHOTOGRAVURE RETOUCHER" },
    { code: "73217", label: "PHOTOGRAVURE ETCHER" },
    { code: "73219", label: "OTHER PRE-PRESS TRADES WORKERS" },
    { code: "73221", label: "SILK SCREEN/BLOCK/TEXTILE PRINTER" },
    { code: "73229", label: "OTHER PRINTERS" },
    { code: "74000", label: "SUPERVISOR/GENERAL FOREMAN (ELECTRICAL AND ELECTRONIC TRADES)" },
    { code: "74110", label: "ELECTRICIAN" },
    { code: "74121", label: "ELECTRICAL FITTER (GENERAL)" },
    { code: "74122", label: "ELECTRICAL LIFT, ESCALATOR AND RELATED EQUIPMENT FITTER" },
    { code: "74123", label: "ELECTRICAL HOUSEHOLD APPLIANCE REPAIRER" },
    { code: "74129", label: "OTHER ELECTRICAL MECHANICS AND FITTERS" },
    { code: "74131", label: "ELECTRICAL LINE INSTALLER" },
    { code: "74132", label: "ELECTRIC CABLE JOINTER" },
    { code: "74139", label: "OTHER ELECTRICAL LINE INSTALLERS AND REPAIRERS" },
    { code: "74211", label: "ELECTRONICS FITTER (GENERAL)" },
    { code: "74212", label: "CONSUMER AUDIO AND VIDEO EQUIPMENT MECHANIC" },
    { code: "74219", label: "OTHER ELECTRONICS FITTERS" },
    { code: "74221", label: "RADIO, TELEVISION AND RADAR BROADCASTING/TRANSMITTING EQUIPMENT FITTER" },
    { code: "74222", label: "COMPUTER AND RELATED ELECTRONIC EQUIPMENT MECHANIC" },
    { code: "74223", label: "TELECOMMUNICATIONS LINEMAN" },
    { code: "74224", label: "TELECOMMUNICATIONS INSTALLER/SERVICER" },
    { code: "75000", label: "SUPERVISOR/GENERAL FOREMAN (FOOD PROCESSING, WOODWORKING, GARMENT, LEATHER AND RELATED TRADES)" },
    { code: "75111", label: "SLAUGHTERER" },
    { code: "75119", label: "OTHER MEAT AND FISH PREPARERS" },
    { code: "75121", label: "BAKER (GENERAL)" },
    { code: "75122", label: "BREAD BAKER" },
    { code: "75123", label: "PASTRY AND CONFECTIONERY MAKER" },
    { code: "75151", label: "COFFEE AND TEA TASTER" },
    { code: "75159", label: "OTHER FOOD AND BEVERAGE TASTERS AND GRADERS" },
    { code: "75190", label: "FOOD PROCESSING AND RELATED TRADES WORKER N.E.C. (EG FRUIT PICKLER)" },
    { code: "75211", label: "KILN DRIER" },
    { code: "75212", label: "WOOD-TREATING WORKER" },
    { code: "75219", label: "OTHER WOOD TREATERS" },
    { code: "75221", label: "CABINET AND FURNITURE MAKER" },
    { code: "75222", label: "WOOD FURNITURE FINISHER" },
    { code: "75223", label: "PICTURE FRAME MAKER" },
    { code: "75229", label: "OTHER CABINET MAKERS AND WOOD RELATED TRADES WORKERS" },
    { code: "75291", label: "RATTAN FURNITURE MAKER" },
    { code: "75299", label: "OTHER FURNITURE MAKERS AND RELATED TRADES WORKERS N.E.C." },
    { code: "75310", label: "TAILOR/DRESSMAKER" },
    { code: "75321", label: "GARMENT CUTTER" },
    { code: "75322", label: "GARMENT PATTERN-MAKER" },
    { code: "75323", label: "GARMENT MARKER" },
    { code: "75329", label: "OTHER GARMENT AND RELATED PATTERN-MAKERS AND CUTTERS" },
    { code: "75341", label: "FURNITURE UPHOLSTERER" },
    { code: "75342", label: "VEHICLE UPHOLSTERER" },
    { code: "75343", label: "MATTRESS MAKER" },
    { code: "75349", label: "OTHER UPHOLSTERERS AND RELATED WORKERS" },
    { code: "75361", label: "SHOEMAKER" },
    { code: "75362", label: "ORTHOPAEDIC FOOTWEAR MAKER" },
    { code: "75363", label: "COBBLER" },
    { code: "75364", label: "LEATHER GOODS MAKER/ASSEMBLER" },
    { code: "75369", label: "OTHER SHOEMAKERS AND RELATED WORKERS" },
    { code: "75390", label: "GARMENT AND RELATED TRADES WORKER N.E.C. (EG FELLMONGER, TENT SEWER, UMBRELLA MAKER)" },
    { code: "75401", label: "FUMIGATORS/PEST AND WEED CONTROLLERS" },
    { code: "75402", label: "UNDERWATER DIVER" },
    { code: "75409", label: "OTHER CRAFT AND RELATED WORKERS N.E.C." },
    { code: "81000", label: "STATIONARY PLANT AND MACHINE SUPERVISOR/GENERAL FOREMAN" },
    { code: "81131", label: "WELL DRILLER (PETROLEUM AND GAS WELLS)" },
    { code: "81132", label: "WELL DRILLER/BORER (EXCEPT OIL AND GAS WELLS)" },
    { code: "81133", label: "DEEP-BORING MACHINE OPERATOR" },
    { code: "81139", label: "OTHER WELL DRILLERS AND BORERS AND OTHER MINING RELATED WORKERS" },
    { code: "81141", label: "PRECAST CONCRETE PRODUCT MAKING MACHINE OPERATOR" },
    { code: "81142", label: "ASBESTOS CEMENT PRODUCT MAKING MACHINE OPERATOR" },
    { code: "81143", label: "TERRAZZO TILE MAKING MACHINE OPERATOR" },
    { code: "81144", label: "CONCRETE MIXING PLANT OPERATOR (INCLUDING CONCRETE MIXER OPERATOR)" },
    { code: "81145", label: "CONCRETE PUMP OPERATOR" },
    { code: "81149", label: "OTHER MINERAL PRODUCTS AND PROCESSING MACHINE OPERATORS" },
    { code: "81211", label: "ORE AND METAL FURNACE OPERATOR (INCLUDING FURNACEMAN)" },
    { code: "81212", label: "CENTRIFUGAL CASTING MACHINE OPERATOR" },
    { code: "81213", label: "DIE CASTING MACHINE OPERATOR" },
    { code: "81214", label: "CONTINUOUS ROD CASTING MACHINE OPERATOR (NON-FERROUS METAL)" },
    { code: "81215", label: "METAL ROLLING MILL WORKER" },
    { code: "81219", label: "OTHER METAL MELTERS, CASTERS AND ROLLING MILL OPERATORS" },
    { code: "81220", label: "METAL HEAT TREATING PLANT OPERATOR" },
    { code: "81231", label: "WIRE DRAWER" },
    { code: "81232", label: "SEAMLESS PIPE AND TUBE DRAWER" },
    { code: "81233", label: "EXTRUDER OPERATOR (METAL)" },
    { code: "81239", label: "OTHER METAL DRAWERS AND EXTRUDERS" },
    { code: "81241", label: "ELECTRO-PLATER" },
    { code: "81242", label: "HOT-DIP PLATER" },
    { code: "81243", label: "WIRE-COATING MACHINE OPERATOR" },
    { code: "81244", label: "GALVANISER" },
    { code: "81245", label: "METAL SPRAYER" },
    { code: "81246", label: "ANODISER" },
    { code: "81247", label: "SANDBLASTER/SHOTBLASTER (METAL)" },
    { code: "81248", label: "METAL CLEANER" },
    { code: "81249", label: "OTHER METAL FINISHING, PLATING AND COATING MACHINE OPERATORS" },
    { code: "81251", label: "METALWORKING MACHINE SETTER-OPERATOR (GENERAL)" },
    { code: "81252", label: "LATHE SETTER-OPERATOR" },
    { code: "81253", label: "MILLING MACHINE SETTER-OPERATOR" },
    { code: "81254", label: "PLANING MACHINE SETTER-OPERATOR" },
    { code: "81255", label: "BORING/DRILLING MACHINE SETTER-OPERATOR" },
    { code: "81256", label: "SHAPING AND HONING MACHINE SETTER-OPERATOR" },
    { code: "81257", label: "PRECISION GRINDING MACHINE SETTER-OPERATOR" },
    { code: "81258", label: "NUMERICAL CONTROL MACHINE SETTER-OPERATOR" },
    { code: "81259", label: "OTHER MACHINE-TOOL SETTER-OPERATORS" },
    { code: "81311", label: "CRUSHING/GRINDING/CHEMICAL MIXING EQUIPMENT OPERATOR" },
    { code: "81312", label: "CHEMICAL HEAT TREATING PLANT OPERATOR" },
    { code: "81313", label: "CHEMICAL FILTERING AND SEPARATING EQUIPMENT OPERATOR" },
    { code: "81314", label: "CHEMICAL STILL/REACTOR OPERATOR" },
    { code: "81315", label: "SYNTHETIC FIBRE MAKING MACHINE OPERATOR" },
    { code: "81319", label: "OTHER CHEMICAL PROCESSING AND CHEMICAL PRODUCTS PLANT AND MACHINE OPERATORS" },
    { code: "81320", label: "PHOTOGRAPHIC PRODUCTS MACHINE OPERATOR" },
    { code: "81331", label: "PHARMACEUTICAL PRODUCTS MACHINE OPERATOR" },
    { code: "81332", label: "SOAP-MAKING MACHINE OPERATOR" },
    { code: "81339", label: "OTHER TOILETRY PRODUCTS MACHINE OPERATORS" },
    { code: "81390", label: "CHEMICAL PROCESSING, CHEMICAL AND PHOTOGRAPHIC PRODUCTS PLANT AND MACHINE OPERATOR N.E.C." },
    { code: "81411", label: "RUBBER MILLMAN" },
    { code: "81412", label: "RUBBER LAMINATING MACHINE OPERATOR" },
    { code: "81419", label: "OTHER RUBBER PRODUCTS MACHINE OPERATORS" },
    { code: "81420", label: "PLASTIC PRODUCTS MACHINE OPERATOR" },
    { code: "81431", label: "CARTON/PAPER BOX MAKING MACHINE OPERATOR" },
    { code: "81432", label: "PAPER PRODUCT MAKING MACHINE OPERATOR" },
    { code: "81439", label: "OTHER PAPER AND PAPERBOARD PRODUCTS MACHINE OPERATORS" },
    { code: "81511", label: "SPINNER (THREAD AND YARN)" },
    { code: "81512", label: "WINDER (THREAD AND YARN)" },
    { code: "81521", label: "WEAVING MACHINE OPERATOR" },
    { code: "81522", label: "KNITTING MACHINE OPERATOR" },
    { code: "81531", label: "SEWING MACHINE OPERATOR" },
    { code: "81532", label: "MACHINE EMBROIDERER" },
    { code: "81541", label: "TEXTILE BLEACHING MACHINE OPERATOR" },
    { code: "81542", label: "DYEING MACHINE OPERATOR" },
    { code: "81543", label: "TEXTILE WASHING/SHRINKING MACHINE OPERATOR" },
    { code: "81549", label: "OTHER BLEACHING, DYEING AND FABRIC CLEANING MACHINE OPERATORS" },
    { code: "81591", label: "LAUNDRY AND DRY CLEANING WORKER (MACHINE, NON-HOUSEHOLD)" },
    {
        code: "81599",
        label: "OTHER TEXTILE, FUR AND LEATHER PRODUCTS MACHINE OPERATORS N.E.C. (EG SHOEMAKING AND RELATED MACHINE OPERATORS)"
    },
    { code: "81611", label: "SAUSAGE MAKING MACHINE OPERATOR" },
    { code: "81619", label: "OTHER MEAT AND FISH PROCESSING MACHINE OPERATORS" },
    { code: "81621", label: "DAIRY PRODUCT PROCESSING MACHINE OPERATOR (GENERAL)" },
    { code: "81622", label: "DAIRY PRODUCT PASTEURISING MACHINE OPERATOR" },
    { code: "81623", label: "BUTTER MAKING MACHINE OPERATOR" },
    { code: "81624", label: "ICE-CREAM MAKING MACHINE OPERATOR" },
    { code: "81625", label: "CHOCOLATE MAKING MACHINE OPERATOR" },
    { code: "81626", label: "CONFECTIONERY MAKING MACHINE OPERATOR" },
    { code: "81629", label: "OTHER DAIRY AND CONFECTIONERY PRODUCTS MACHINE OPERATORS" },
    { code: "81630", label: "GRAIN/SPICE MILLING MACHINE OPERATOR" },
    { code: "81641", label: "BISCUIT MAKING MACHINE OPERATOR" },
    { code: "81642", label: "MACARONI/NOODLE/VERMICELLI MAKING MACHINE OPERATOR" },
    { code: "81649", label: "OTHER BAKED AND CEREAL PRODUCTS MACHINE OPERATORS" },
    { code: "81651", label: "FRUIT-PRESS OPERATOR" },
    { code: "81652", label: "OIL PRESSMAN (EDIBLE OILS)" },
    { code: "81653", label: "REFINING MACHINE OPERATOR (OILS AND FATS)" },
    { code: "81654", label: "HYDROGENATION OPERATOR (OILS AND FATS)" },
    { code: "81655", label: "SAUCE MAKING MACHINE OPERATOR" },
    { code: "81659", label: "OTHER FRUIT, VEGETABLE AND NUT PROCESSING MACHINE OPERATORS" },
    { code: "81660", label: "SUGAR PROCESSING AND REFINING MACHINE OPERATOR" },
    { code: "81671", label: "GERMINATION WORKER (MALTING)" },
    { code: "81672", label: "KILNMAN (MALTING)" },
    { code: "81673", label: "BREWER" },
    { code: "81674", label: "FERMENTING-ROOM MAN" },
    { code: "81675", label: "PASTEURISER ATTENDANT (MALT LIQUOR)" },
    { code: "81676", label: "SYRUP MAKING MACHINE OPERATOR" },
    { code: "81677", label: "COFFEE/TEA BLENDING MACHINE OPERATOR" },
    { code: "81678", label: "COFFEE/COCOA BEAN ROASTING AND GRINDING MACHINE OPERATOR" },
    { code: "81679", label: "OTHER BREWERS AND WINE AND OTHER BEVERAGE MACHINE OPERATORS" },
    { code: "81681", label: "CIGARETTE MAKING MACHINE OPERATOR" },
    { code: "81689", label: "OTHER TOBACCO PRODUCTS MACHINE OPERATORS" },
    { code: "81691", label: "BEAN CURD MAKING MACHINE OPERATOR" },
    { code: "81692", label: "ICE MAKING MACHINE OPERATOR" },
    { code: "81693", label: "FEED MIXING MACHINE OPERATOR" },
    { code: "81694", label: "FISH FEED MAKING MACHINE OPERATOR" },
    { code: "81699", label: "OTHER FOOD AND RELATED PRODUCTS MACHINE OPERATORS N.E.C." },
    { code: "81711", label: "PAPER PULP PLANT OPERATOR" },
    { code: "81712", label: "PAPERMAKING MACHINE OPERATOR" },
    { code: "81719", label: "OTHER PULP AND PAPERMAKING PLANT OPERATORS" },
    { code: "81721", label: "SAWYER" },
    { code: "81722", label: "VENEER CUTTER" },
    { code: "81723", label: "PLYWOOD CORE LAYER" },
    { code: "81724", label: "PLYWOOD PRESS OPERATOR" },
    { code: "81725", label: "WOOD GRADER" },
    { code: "81729", label: "OTHER WOOD PROCESSING PLANT OPERATORS" },
    { code: "81731", label: "WOODWORKING MACHINE SETTER-OPERATOR" },
    { code: "81732", label: "PRECISION WOOD SAWYER" },
    { code: "81739", label: "OTHER WOOD PRODUCTS MACHINE OPERATORS" },
    { code: "81811", label: "GLASS/CERAMICS KILN MACHINE OPERATOR" },
    { code: "81812", label: "FIBREGLASS MAKER" },
    { code: "81819", label: "OTHER GLASS AND CERAMICS PLANT OPERATORS" },
    { code: "81821", label: "BOILER FIREMAN" },
    { code: "81822", label: "SHIP'S FIREMAN" },
    { code: "81823", label: "SHIP'S OILER/GREASER" },
    { code: "81829", label: "OTHER STEAM TURBINE, BOILER AND ENGINE OPERATORS" },
    { code: "81830", label: "PACKING/BOTTLING/LABELLING MACHINE OPERATOR" },
    { code: "81841", label: "PRINTING MACHINE OPERATOR" },
    { code: "81842", label: "BOOKBINDING MACHINE OPERATOR" },
    { code: "81843", label: "BOOK EMBOSSING MACHINE OPERATOR" },
    { code: "81849", label: "OTHER PRINTING, BINDING AND RELATED MACHINE OPERATORS" },
    { code: "81851", label: "STATIONARY ENGINE OPERATOR (GENERAL)" },
    { code: "81852", label: "COMPRESSOR OPERATOR" },
    { code: "81853", label: "PUMPING STATION OPERATOR" },
    { code: "81854", label: "WATER TREATMENT MACHINE OPERATOR (WATERWORKS)" },
    { code: "81855", label: "REFRIGERATION SYSTEM OPERATOR" },
    { code: "81859", label: "OTHER INCINERATION PLANT, WATER TREATMENT AND RELATED MACHINE OPERATORS" },
    { code: "81860", label: "POWER GENERATING PLANT OPERATOR" },
    { code: "81871", label: "PETROLEUM AND NATURAL GAS REFINING PLANT OPERATOR" },
    { code: "81872", label: "CYLINDER FILLER/TESTER (COMPRESSED AND LIQUEFIED GASES)" },
    { code: "81880", label: "AUTOMATED ASSEMBLY LINE/INDUSTRIAL ROBOT OPERATOR" },
    { code: "81890", label: "STATIONARY PLANT AND MACHINE OPERATOR N.E.C." },
    { code: "82000", label: "SUPERVISOR/GENERAL FOREMAN OF ASSEMBLERS AND QUALITY CHECKERS" },
    { code: "82121", label: "ELECTRICAL EQUIPMENT/COMPONENT ASSEMBLER" },
    { code: "82122", label: "ELECTRONIC EQUIPMENT/COMPONENT ASSEMBLER" },
    { code: "82123", label: "BATTERY ASSEMBLER" },
    { code: "82131", label: "ELECTRICAL/ELECTRONIC PRODUCTS QUALITY CHECKER AND TESTER" },
    { code: "82132", label: "MECHANICAL PRODUCTS QUALITY CHECKER AND TESTER" },
    { code: "82139", label: "OTHER QUALITY CHECKERS AND TESTERS" },
    { code: "82191", label: "TOY ASSEMBLER" },
    { code: "82199", label: "OTHER ASSEMBLERS N.E.C. (EG PLASTIC PRODUCTS ASSEMBLER, RUBBER PRODUCTS ASSEMBLER)" },
    { code: "83000", label: "MOBILE MACHINERY SUPERVISOR AND GENERAL FOREMAN" },
    { code: "83110", label: "MRT TRAIN OPERATOR" },
    { code: "83121", label: "RAILWAY BRAKEMAN/SIGNALMAN/SHUNTER" },
    { code: "83129", label: "OTHER RAILWAY BRAKERS AND RELATED WORKERS" },
    { code: "83210", label: "MOTORCYCLE DELIVERY MAN" },
    { code: "83221", label: "TAXI DRIVER" },
    { code: "83222", label: "CHAUFFEUR" },
    { code: "83223", label: "VAN DRIVER" },
    { code: "83224", label: "AMBULANCE DRIVER" },
    { code: "83225", label: "PARKING VALET" },
    { code: "83229", label: "OTHER CAR AND LIGHT GOODS VEHICLE DRIVERS" },
    { code: "83311", label: "BUS DRIVER" },
    { code: "83312", label: "TRAM DRIVER" },
    { code: "83321", label: "LORRY DRIVER" },
    { code: "83322", label: "TRAILER-TRUCK DRIVER (INCLUDING PRIME MOVER DRIVER)" },
    { code: "83323", label: "FIRE-ENGINE DRIVER" },
    { code: "83324", label: "AIRPORT MOBILE EQUIPMENT DRIVER" },
    { code: "83325", label: "CONCRETE MIX TRUCK DRIVER" },
    { code: "83326", label: "WASTE TRUCK DRIVER (INCLUDING HOOKLIFT TRUCKS WITH ROLL-ON CONTAINERS)" },
    { code: "83329", label: "OTHER HEAVY TRUCK AND LORRY DRIVERS" },
    { code: "83421", label: "EXCAVATING/TRENCH DIGGING MACHINE OPERATOR" },
    { code: "83422", label: "BULLDOZER OPERATOR" },
    { code: "83423", label: "DREDGE OPERATOR" },
    { code: "83424", label: "PILE DRIVER/DRILLING MACHINE OPERATOR" },
    { code: "83425", label: "ROAD MAKING MACHINE OPERATOR" },
    { code: "83426", label: "TUNNELLING MACHINE OPERATOR (INCLUDING PIPE JACKING MACHINE OPERATOR)" },
    { code: "83429", label: "OTHER EARTH MOVING AND RELATED MACHINERY OPERATORS" },
    { code: "83431", label: "CRANE/HOIST OPERATOR (GENERAL)" },
    { code: "83432", label: "CRANE OPERATOR (PORT)" },
    { code: "83439", label: "OTHER CRANE, HOIST AND RELATED EQUIPMENT OPERATORS" },
    { code: "83441", label: "FORK LIFT TRUCK OPERATOR" },
    { code: "83449", label: "OTHER LIFTING TRUCK OPERATORS" },
    { code: "83491", label: "MOTORISED SWEEPER OPERATOR" },
    { code: "83499", label: "MOBILE MACHINERY OPERATOR N.E.C. (EG MOBILE FARM PLANT OPERATOR)" },
    { code: "83501", label: "HELMSMAN/STEERSMAN" },
    { code: "83502", label: "DECKHAND (INCLUDING LIGHTERMAN)" },
    { code: "83509", label: "OTHER SHIPS DECK CREW AND RELATED WORKERS" },
    { code: "91000", label: "CLEANING SUPERVISOR" },
    { code: "91121", label: "ROOM STEWARD/CHAMBERMAID" },
    { code: "91122", label: "HOTEL CLEANER" },
    { code: "91129", label: "OTHER CLEANERS AND HELPERS IN HOTELS AND RELATED ESTABLISHMENTS" },
    { code: "91130", label: "OFFICE CLEANER" },
    { code: "91140", label: "INDUSTRIAL ESTABLISHMENT CLEANER" },
    { code: "91151", label: "FOOD AND BEVERAGE ESTABLISHMENT CLEANER (EG RESTAURANTS, FOOD COURTS, HAWKER CENTRES)" },
    { code: "91152", label: "DISH WASHER/PLATE COLLECTOR/TABLE-TOP CLEANER" },
    {
        code: "91160",
        label: "RESIDENTIAL AREA CLEANER (EG HDB ESTATES, CONDOMINIUMS, PRIVATE APARTMENTS, COMMON AREAS WITHIN RESIDENTIAL ESTATES)"
    },
    { code: "91170", label: "CLEANER IN OPEN AREAS (EG BUS STOPS, DRAINS, WATERWAYS, OVERHEAD BRIDGES, ROADS, EXPRESSWAYS, PARKS, BEACHES)" },
    { code: "91190", label: "CLEANER IN OTHER ESTABLISHMENTS (EG SHOPPING MALLS, SCHOOLS, HOSPITALS, PLACES OF WORSHIP)" },
    { code: "91210", label: "HAND LAUNDERER/PRESSER (NON-HOUSEHOLD)" },
    { code: "91220", label: "MOTOR VEHICLE CLEANER/POLISHER" },
    { code: "91230", label: "WINDOW CLEANER" },
    { code: "91291", label: "SHIP/SHIP TANK CLEANER" },
    { code: "91292", label: "AIRCRAFT CLEANER" },
    { code: "91293", label: "RAILWAY CARRIAGE CLEANER (INCLUDE MRT, LRT AND MONORAIL)" },
    { code: "91299", label: "OTHER CLEANING WORKERS N.E.C." },
    { code: "91301", label: "DOMESTIC HELPER (GENERAL)" },
    { code: "91309", label: "OTHER DOMESTIC HELPERS AND CLEANERS" },
    { code: "92141", label: "GARDEN LABOURER" },
    { code: "92142", label: "GRASS CUTTER" },
    { code: "92143", label: "TREE CUTTER" },
    { code: "92149", label: "OTHER PARK AND GARDEN MAINTENANCE WORKERS (INCLUDING LANDSCAPE WORKER)" },
    { code: "92190", label: "AGRICULTURAL AND FISHERY LABOURER AND RELATED WORKER N.E.C. (EG FARM LABOURER)" },
    { code: "93100", label: "CIVIL ENGINEERING/BUILDING CONSTRUCTION LABOURER" },
    { code: "93201", label: "HAND PACKER" },
    { code: "93209", label: "MANUFACTURING LABOURER AND RELATED WORKER N.E.C. (EG RUBBER SHEETS CLIPPER AND SORTER)" },
    { code: "93310", label: "HAND/PEDAL VEHICLE DRIVER" },
    { code: "93331", label: "STEVEDORE" },
    { code: "93332", label: "RAILWAY/ROAD VEHICLE LOADER" },
    { code: "93333", label: "AIRCRAFT LOADER (EG AIRPORT BAGGAGE/CARGO HANDLER)" },
    { code: "93334", label: "GODOWN LABOURER" },
    { code: "93335", label: "LORRY ATTENDANT" },
    { code: "93336", label: "MOVER" },
    { code: "93337", label: "LASHING WORKER" },
    { code: "93339", label: "OTHER MATERIAL AND FREIGHT HANDLING WORKERS" },
    { code: "94101", label: "KITCHEN ASSISTANT" },
    { code: "94102", label: "FOOD/DRINK STALL ASSISTANT" },
    { code: "94103", label: "FAST FOOD PREPARER" },
    { code: "94104", label: "TEA SERVER/STEWARD (EXCLUDING BARTENDER, BARISTA AND FOOD/DRINK STALL ASSISTANT)" },
    { code: "96000", label: "WASTE AND RECYCLABLES COLLECTION SUPERVISOR" },
    { code: "96111", label: "GENERAL WASTE AND RECYCLABLES COLLECTION WORKER" },
    { code: "96112", label: "RECYCLABLES SORTER" },
    { code: "96113", label: "GREASY WASTE COLLECTION WORKER" },
    { code: "96119", label: "OTHER WASTE AND RECYCLABLES COLLECTION WORKER" },
    { code: "96211", label: "BELL CAPTAIN" },
    { code: "96212", label: "BELLBOY/HOTEL PORTER" },
    { code: "96213", label: "PORTER (EXCEPT HOTEL)" },
    { code: "96251", label: "OFFICE/LIBRARY ATTENDANT" },
    { code: "96252", label: "LABORATORY ATTENDANT" },
    { code: "96253", label: "HOSPITAL/CLINIC ATTENDANT" },
    { code: "96254", label: "CAR PARK ATTENDANT" },
    {
        code: "96255",
        label: "SPORTS AND RECREATIONAL ATTENDANT (EG GOLF MARSHAL, GOLF CADDIE, FUN FAIR ATTENDANT, BOWLING ALLEY ATTENDANT, SWIMMING POOL ATTENDANT)"
    },
    { code: "96256", label: "BUS ATTENDANT" },
    { code: "96257", label: "RESTROOM ATTENDANT" },
    { code: "96259", label: "OTHER ATTENDANTS" },
    { code: "96261", label: "BUILDING CARETAKER/WATCHMAN" },
    { code: "96262", label: "DOORMAN" },
    { code: "96269", label: "OTHER WATCHMEN AND RELATED WORKERS (EG LIGHTHOUSE KEEPER)" },
    { code: "96291", label: "LEAFLET AND NEWSPAPER DISTRIBUTOR/DELIVERER" },
    { code: "96292", label: "METER READER/VENDING-MACHINE COLLECTOR" },
    { code: "96293", label: "ODD JOB PERSON" },
    { code: "96299", label: "OTHER ELEMENTARY WORKERS N.E.C." },
    { code: "X1000", label: "WORKER REPORTING UNIDENTIFIABLE OR INADEQUATELY DESCRIBED OCCUPATION" },
    { code: "X2000", label: "WORKER NOT REPORTING ANY OCCUPATION" },
    { code: "X3000", label: "SINGAPORE ARMED FORCES PERSONNEL" },
    { code: "X4000", label: "FOREIGN ARMED FORCES PERSONNEL" },
    { code: "X5000", label: "FOREIGN DIPLOMATIC PERSONNEL" },
    { code: "UNKNOWN", label: "UNKNOWN" }
];
exports.existingEntities = [
    { code: "true", label: "INCORPORATED" },
    { code: "false", label: "YET TO BE INCORPORATED" },
];
exports.entityTypes = [
    'SOLE-PROPRIETORSHIP (SPR)',
    'PARTNERSHIP (PTR)',
    'LIMITED PARTNERSHIP (LPT)',
    'LIMITED LIABILITY PARTNERSHIP (LLP)',
    'LOCAL PRIVATE COMPANY (PTE)',
    'LOCAL PUBLIC COMPANY (PBL)',
    'FOREIGN COMPANY (FRC)',
    'TRUST',
    'CHARITY',
    'ASSOCIATION'
];
exports.ownershipStructureLayers = [
    { code: "1", label: "1" },
    { code: "2", label: "2" },
    { code: "3", label: "3 or more" },
    { code: "999", label: "UNKNOWN" },
];
exports.roles = [
    "PRIMARY",
    "OWNER",
    "NOMINEE/TRUSTEE",
    "LOCAL MANAGER",
    "PARTNER",
    "GENERAL PARTNER",
    "LIMITED PARTNER",
    "ULTIMATE BENEFICIARY",
    "DIRECTOR",
    "SHAREHOLDER",
    "BRANCH MANAGER",
    "REPRESENTATIVE AGENT",
    "HEAD OFFICE",
    "REMITTER",
    "BENEFICIARY",
    "AUTHORISED SIGNATORY",
    "PROTECTOR",
    "SETTLOR",
    "BOARD MEMBER",
    "COMMITTEE MEMBER",
    "RELEVANT PERSON",
    "CONNECTED PARTY"
];
// document types for the 'uploadDocument' stepper flow layer
// not to be confused with identificationTypes used in the 'individual' stepper flow layer
exports.documentTypes = [
    "PASSPORT",
    "NRIC",
    "FIN",
    "EMPLOYMENT PASS",
    "S PASS",
    "WORK PERMIT",
    "DEPENDANT PASS",
    "UTILITY/TELEPHONE BILL",
    "FOREIGN IDENTITY CARD",
    "CERTIFICATE OF INCORPORATION",
    "BANK STATEMENT",
    "ARTICLES AND M&A",
    "BIZFILE",
    "SOURCE OF FUNDS PROOF",
    "CUSTOMER ACCEPTANCE FORM",
    'SELFIE',
    'NATIONAL ID',
    'DRIVING LICENSE',
    "SCREENING RESULTS",
    "INVOICE",
    "CHEQUE",
    "BOARD RESOLUTIONS",
    "OTHERS"
];
exports.sourceOfFunds = [
    "SALARY",
    "INHERITANCE",
    "LOAN",
    "LOTTERY/WINDFALL",
    "INVESTMENT GAIN",
    "RENTAL INCOME",
    "BUSINESS REVENUE",
    "OTHERS"
];


/***/ }),

/***/ "../../../../../src/app/bigtoken/verificationForm/verificationForm.component.css":
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__("../../../../css-loader/lib/css-base.js")(false);
// imports


// module
exports.push([module.i, ".verify-form .mat-form-field {\r\n  width: 100%;\r\n  margin-bottom: 1.5em;\r\n}\r\n\r\n.button-controls {\r\n  display: -webkit-box;\r\n  display: -ms-flexbox;\r\n  display: flex;\r\n  -webkit-box-orient: horizontal;\r\n  -webkit-box-direction: normal;\r\n      -ms-flex-direction: row;\r\n          flex-direction: row;\r\n  -webkit-box-align: center;\r\n      -ms-flex-align: center;\r\n          align-items: center;\r\n  margin-top: 1em;\r\n}\r\n\r\n.button-controls > * {\r\n  margin: 3px;\r\n}\r\n\r\n.no-underline:hover,\r\n.no-underline:active {\r\n  text-decoration: none;\r\n}\r\n\r\n.upload-success-container {\r\n  display: -webkit-box;\r\n  display: -ms-flexbox;\r\n  display: flex;\r\n  -webkit-box-orient: vertical;\r\n  -webkit-box-direction: normal;\r\n      -ms-flex-direction: column;\r\n          flex-direction: column;\r\n  -webkit-box-align: center;\r\n      -ms-flex-align: center;\r\n          align-items: center;\r\n  max-width: 550px;\r\n  margin: 3em auto;\r\n  text-align: center;\r\n}\r\n\r\nh2 {\r\n  margin-top:2em;\r\n  margin-bottom: 1em;\r\n  color:#3f51b5;\r\n}\r\n\r\n.itentity-document-sample-images {\r\n  max-height: 200px;\r\n  margin: 2em 0;\r\n}\r\n\r\n.entity-chooser-icon {\r\n  font-size: 100px;\r\n  width: 100px;\r\n  height: 100px;\r\n}", ""]);

// exports


/*** EXPORTS FROM exports-loader ***/
module.exports = module.exports.toString();

/***/ }),

/***/ "../../../../../src/app/bigtoken/verificationForm/verificationForm.component.html":
/***/ (function(module, exports) {

module.exports = "<mat-horizontal-stepper [linear]=\"false\" #verificationStepper>\r\n    <!-- step 0: entityType: choose the entity type (individual or corporate) -->\r\n    <mat-step [stepControl]=\"verificationFormControls.entityType\" editable=\"true\">\r\n\r\n        <p i18n>\r\n            Complete the form below to verify your identity and allow you to participate in the ICO.\r\n            You will be required to enter some personal information and then upload two identity documents\r\n            to allow us to match your likness. Finally at the end we will show your verification status.\r\n        </p>\r\n        <p i18n>\r\n            Completing these steps should take no more than <strong>5</strong> minutes.\r\n        </p>\r\n\r\n        <form class=\"verify-form\" [formGroup]=\"verificationFormControls.entityType\">\r\n            <h2 class=\"text-center\">Choose entity type</h2>\r\n            <div class=\"d-flex flex-row justify-content-center\">\r\n                <div class=\"m-3 d-flex flex-column justify-content-center align-items-center\" style=\"max-width: 250px;\">\r\n                    <mat-icon class=\"entity-chooser-icon\" color=\"primary\" svgIcon=\"entity_individual\"></mat-icon>\r\n                    <p i18n class=\"text-center\">Select this option if you will be partipating as an individual</p>\r\n                    <button type=\"button\" mat-raised-button color=\"primary\" mat-button (click)=\"submitStep0('individual')\" i18n>\r\n                        INDIVIDUAL\r\n                    </button>\r\n                </div>\r\n                <div class=\"m-3 d-flex flex-column justify-content-center align-items-center\" style=\"max-width: 250px;\">\r\n                    <mat-icon class=\"entity-chooser-icon\" color=\"primary\" svgIcon=\"entity_corporation\"></mat-icon>\r\n                    <p i18n class=\"text-center\">Select this option if you will be partipating on behalf of a company</p>\r\n                    <button type=\"button\" mat-raised-button color=\"primary\" mat-button (click)=\"submitStep0('corporation')\" i18n>\r\n                        CORPORATE\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    </mat-step>\r\n\r\n    <!-- step 1: basics: personal details for individual type -->\r\n    <mat-step [stepControl]=\"verificationFormControls.basics\" editable=\"true\">\r\n        <form class=\"verify-form\" (ngSubmit)=\"submitBasics()\" [formGroup]=\"verificationFormControls.basics\">\r\n\r\n            <!-- id -->\r\n            <input type=\"hidden\" formControlName=\"rfrID\">\r\n\r\n            <!-- first name -->\r\n            <div class=\"col-sm\">\r\n                <mat-form-field>\r\n                    <input matInput i18n-placeholder placeholder=\"First Name\" formControlName=\"first_name\" autocomplete=\"given-name\" required>\r\n                    <mat-hint align=\"end\" i18n>Your first name or given name (must match your identity document)\r\n                    </mat-hint>\r\n                    <mat-error i18n *ngIf=\"verificationFormControls.basics.get('first_name').errors?.required \">\r\n                        First Name is a required field\r\n                    </mat-error>\r\n                </mat-form-field>\r\n            </div>\r\n\r\n            <!-- email address -->\r\n            <div class=\"col-sm\">\r\n                <mat-form-field>\r\n                    <input matInput i18n-placeholder placeholder=\"Email address\" formControlName=\"email\" autocomplete=\"email\" required>\r\n                    <mat-hint align=\"end\" i18n>So we can send you verification status updates</mat-hint>\r\n                    <mat-error i18n *ngIf=\"verificationFormControls.individual.get('email').errors?.required \">\r\n                        This field is required so we can send you verification status updates\r\n                    </mat-error>\r\n                    <mat-error i18n *ngIf=\"verificationFormControls.individual.get('email').errors?.email\">\r\n                        Please enter a valid email address\r\n                    </mat-error>\r\n                </mat-form-field>\r\n            </div>\r\n\r\n            <div class=\"mt-2 d-flex flex-row align-items-center\">\r\n                <button class=\"mr-2\" type=\"button\" mat-button (click)=\"fillMockData('basics')\">\r\n                    [DEBUG] FILL IN MOCK DATA\r\n                </button>\r\n                <button i18n type=\"submit\" mat-raised-button color=\"primary\" mat-button [disabled]=\"submittingData\">\r\n                    Continue\r\n                </button>\r\n                <mat-spinner class=\"ml-2\" [hidden]=\"!submittingData\" diameter=\"25\"></mat-spinner>\r\n            </div>\r\n        </form>\r\n    </mat-step>\r\n\r\n    <!-- step 2: individual: personal details for individual type -->\r\n    <mat-step [stepControl]=\"verificationFormControls.individual\" editable=\"true\">\r\n        <form class=\"verify-form\" (ngSubmit)=\"submitIndividual()\" [formGroup]=\"verificationFormControls.individual\">\r\n\r\n            <!-- id -->\r\n            <input type=\"hidden\" formControlName=\"rfrID\">\r\n            <div class=\"row\">\r\n                <div class=\"col-12\">\r\n                    <h2 i18n=\"\">Wallet</h2>\r\n                </div>\r\n                <!-- public ethereum address -->\r\n                <div class=\"col-sm\">\r\n                    <mat-form-field>\r\n                        <input matInput i18n-placeholder placeholder=\"Public Ethereum Address\" formControlName=\"eth_address\" autocomplete=\"off\" required>\r\n                        <mat-hint align=\"end\" i18n>Your public ethereum address for whitelisting purposes</mat-hint>\r\n                        <mat-error i18n *ngIf=\"verificationFormControls.individual.get('eth_address').errors?.required \">\r\n                            This field is required so we can whitelist contributions from this address\r\n                        </mat-error>\r\n                    </mat-form-field>\r\n                </div>\r\n            </div>\r\n\r\n            <div class=\"row\">\r\n                <div class=\"col-12\">\r\n                    <h2 i18n=\"\">Personal information</h2>\r\n                </div>\r\n                <!-- title -->\r\n                <div class=\"col-sm\">\r\n                    <mat-form-field>\r\n                        <mat-select i18n-placeholder placeholder=\"Title\" formControlName=\"title\">\r\n                            <mat-option *ngFor=\"let title of titles\" [value]=\"title\">\r\n                                {{ title }}\r\n                            </mat-option>\r\n                        </mat-select>\r\n                        <mat-hint align=\"end\" i18n>Your honorific</mat-hint>\r\n                        <mat-error i18n *ngIf=\"verificationFormControls.individual.get('title').errors?.required \">\r\n                            Title is a required field\r\n                        </mat-error>\r\n                        <mat-error i18n *ngIf=\"verificationFormControls.individual.get('title').errors?.artemisError \">\r\n                            Server error: {{verificationFormControls.individual.get('title').errors.artemisError}}\r\n                        </mat-error>\r\n                    </mat-form-field>\r\n                </div>\r\n\r\n\r\n                <!-- first name -->\r\n                <div class=\"col-sm\">\r\n                    <mat-form-field>\r\n                        <input matInput i18n-placeholder placeholder=\"First Name\" formControlName=\"first_name\" autocomplete=\"given-name\" required>\r\n                        <mat-hint align=\"end\" i18n>Your first name or given name (must match your identity\r\n                            document)\r\n                        </mat-hint>\r\n                        <mat-error i18n *ngIf=\"verificationFormControls.individual.get('first_name').errors?.required \">\r\n                            First Name is a required field\r\n                        </mat-error>\r\n                        <mat-error i18n *ngIf=\"verificationFormControls.individual.get('first_name').errors?.artemisError \">\r\n                            Server error: {{verificationFormControls.individual.get('first_name').errors.artemisError}}\r\n                        </mat-error>\r\n                    </mat-form-field>\r\n                </div>\r\n\r\n                <!-- last name -->\r\n                <div class=\"col-sm\">\r\n                    <mat-form-field>\r\n                        <input matInput i18n-placeholder placeholder=\"Last Name\" formControlName=\"last_name\" autocomplete=\"family-name\" required>\r\n                        <mat-hint align=\"end\" i18n>Your last name or surname name (must match your identity\r\n                            document)\r\n                        </mat-hint>\r\n                        <mat-error i18n *ngIf=\"verificationFormControls.individual.get('last_name').errors?.required \">\r\n                            Last Name is a required field\r\n                        </mat-error>\r\n                        <mat-error i18n *ngIf=\"verificationFormControls.individual.get('last_name').errors?.artemisError \">\r\n                            Server error: {{verificationFormControls.individual.get('last_name').errors.artemisError}}\r\n                        </mat-error>\r\n                    </mat-form-field>\r\n                </div>\r\n\r\n                <!-- alias name -->\r\n                <div class=\"col-sm\">\r\n                    <mat-form-field>\r\n                        <input matInput i18n-placeholder placeholder=\"Alias Name\" formControlName=\"alias_name\" autocomplete=\"off\">\r\n                        <mat-hint align=\"end\" i18n>Your alias name</mat-hint>\r\n                    </mat-form-field>\r\n                    <mat-error i18n *ngIf=\"verificationFormControls.corporation_related_person.get('alias_name').errors?.artemisError \">\r\n                        Server error: {{verificationFormControls.corporation_related_person.get('alias_name').errors.artemisError}}\r\n                    </mat-error>\r\n                </div>\r\n\r\n            </div>\r\n            <div class=\"row\">\r\n                <!-- email address -->\r\n                <div class=\"col-sm\">\r\n                    <mat-form-field>\r\n                        <input matInput i18n-placeholder placeholder=\"Email address\" formControlName=\"email\" autocomplete=\"email\" required>\r\n                        <mat-hint align=\"end\" i18n>So we can send you verification status updates</mat-hint>\r\n                        <mat-error i18n *ngIf=\"verificationFormControls.individual.get('email').errors?.required \">\r\n                            This field is required so we can send you verification status updates\r\n                        </mat-error>\r\n                        <mat-error i18n *ngIf=\"verificationFormControls.individual.get('email').errors?.email\">\r\n                            Please enter a valid email address\r\n                        </mat-error>\r\n                    </mat-form-field>\r\n                </div>\r\n\r\n                <!-- mobile -->\r\n                <div class=\"col-sm\">\r\n                    <mat-form-field>\r\n                        <input matInput i18n-placeholder placeholder=\"Mobile phone number\" formControlName=\"mobile\" autocomplete=\"tel\" required>\r\n                        <mat-hint align=\"end\" i18n>So we can call you if needed</mat-hint>\r\n                        <mat-error i18n *ngIf=\"verificationFormControls.individual.get('mobile').errors?.required \">\r\n                            Mobile phone is a required field\r\n                        </mat-error>\r\n                    </mat-form-field>\r\n                </div>\r\n            </div>\r\n\r\n            <div class=\"row\">\r\n                <!-- gender -->\r\n                <div class=\"col-sm\">\r\n                    <mat-form-field>\r\n                        <mat-select i18n-placeholder placeholder=\"Gender\" formControlName=\"gender\">\r\n                            <mat-option i18n value=\"MALE\">MALE</mat-option>\r\n                            <mat-option i18n value=\"FEMALE\">FEMALE</mat-option>\r\n                        </mat-select>\r\n                        <mat-hint align=\"end\" i18n>Your gender</mat-hint>\r\n                        <mat-error i18n *ngIf=\"verificationFormControls.corporation_related_person.get('gender').errors?.artemisError \">\r\n                            Server error: {{verificationFormControls.corporation_related_person.get('gender').errors.artemisError}}\r\n                        </mat-error>\r\n                    </mat-form-field>\r\n                </div>\r\n\r\n                <!--date of birth -->\r\n                <div class=\"col-sm\">\r\n                    <mat-form-field>\r\n                        <input (focus)=\"dateOfBirthPicker.open()\" (click)=\"dateOfBirthPicker.open()\" matInput i18n-placeholder [matDatepicker]=\"dateOfBirthPicker\" placeholder=\"Date of Birth\" formControlName=\"date_of_birth\">\r\n                        <mat-datepicker-toggle matSuffix [for]=\"dateOfBirthPicker\"></mat-datepicker-toggle>\r\n                        <mat-datepicker #dateOfBirthPicker></mat-datepicker>\r\n                        <mat-hint align=\"end\" i18n>Your date of birth</mat-hint>\r\n                        <mat-error i18n *ngIf=\"verificationFormControls.corporation_related_person.get('date_of_birth').errors?.artemisError \">\r\n                            Server error: {{verificationFormControls.corporation_related_person.get('date_of_birth').errors.artemisError}}\r\n                        </mat-error>\r\n                    </mat-form-field>\r\n                </div>\r\n\r\n            </div>\r\n\r\n            <div class=\"row\">\r\n                <div class=\"col-12\">\r\n                    <h2 i18n=\"\">Nationality</h2>\r\n                </div>\r\n                <div class=\"col-sm\">\r\n                    <!-- nationality -->\r\n                    <mat-form-field>\r\n                        <input aria-label=\"Nationality\" matInput i18n-placeholder placeholder=\"Nationality\" [matAutocomplete]=\"autoNationality\" formControlName=\"nationality\" autocomplete=\"off\">\r\n                        <mat-hint align=\"end\" i18n>Your nationality must match your identity document</mat-hint>\r\n                        <mat-autocomplete #autoNationality=\"matAutocomplete\">\r\n                            <mat-option *ngFor=\"let nationality of filteredNationalities | async\" [value]=\"nationality\">\r\n                                {{ nationality }}\r\n                            </mat-option>\r\n                        </mat-autocomplete>\r\n                        <mat-error i18n *ngIf=\"verificationFormControls.individual.get('nationality').errors?.required \">\r\n                            This field is required\r\n                        </mat-error>\r\n                        <mat-error i18n *ngIf=\"verificationFormControls.individual.get('nationality').errors?.artemisError \">\r\n                            Server error: {{verificationFormControls.individual.get('nationality').errors.artemisError}}\r\n                        </mat-error>\r\n                    </mat-form-field>\r\n                </div>\r\n                <div class=\"col-sm\">\r\n                    <!-- country of residence -->\r\n                    <mat-form-field>\r\n                        <input aria-label=\"Country of Residence\" matInput i18n-placeholder placeholder=\"Country of Residence\" [matAutocomplete]=\"autoCountryOfResidence\" formControlName=\"country_of_residence\" autocomplete=\"off\">\r\n                        <mat-hint align=\"end\" i18n>The name of the country where you currently live</mat-hint>\r\n                        <mat-autocomplete #autoCountryOfResidence=\"matAutocomplete\">\r\n                            <mat-option *ngFor=\"let country of filteredCountries | async\" [value]=\"country\">\r\n                                {{ country }}\r\n                            </mat-option>\r\n                        </mat-autocomplete>\r\n                        <mat-error i18n *ngIf=\"verificationFormControls.individual.get('country_of_residence').errors?.required \">\r\n                            Country of Residence is a required field\r\n                        </mat-error>\r\n                        <mat-error i18n *ngIf=\"verificationFormControls.individual.get('country_of_residence').errors?.artemisError \">\r\n                            Server error: {{verificationFormControls.individual.get('country_of_residence').errors.artemisError}}\r\n                        </mat-error>\r\n                    </mat-form-field>\r\n                </div>\r\n                <div class=\"col-sm\">\r\n                    <!-- country of birth -->\r\n                    <mat-form-field>\r\n                        <input aria-label=\"Country of Birth\" matInput i18n-placeholder placeholder=\"Country of Birth\" [matAutocomplete]=\"autoCountryOfBirth\" formControlName=\"country_of_birth\" autocomplete=\"off\">\r\n                        <mat-hint align=\"end\" i18n>The name of the country where you were born</mat-hint>\r\n                        <mat-autocomplete #autoCountryOfBirth=\"matAutocomplete\">\r\n                            <mat-option *ngFor=\"let country of filteredCountries | async\" [value]=\"country\">\r\n                                {{ country }}\r\n                            </mat-option>\r\n                        </mat-autocomplete>\r\n                        <mat-error i18n *ngIf=\"verificationFormControls.corporation_related_person.get('country_of_birth').errors?.artemisError \">\r\n                            Server error: {{verificationFormControls.corporation_related_person.get('country_of_birth').errors.artemisError}}\r\n                        </mat-error>\r\n                    </mat-form-field>\r\n                </div>\r\n            </div>\r\n            <div class=\"row\">\r\n                <div class=\"col-12\">\r\n                    <h2 i18n=\"\">Identification type</h2>\r\n                </div>\r\n                <div class=\"col-sm\">\r\n                    <!-- identification type -->\r\n                    <mat-form-field>\r\n                        <mat-select i18n-placeholder placeholder=\"Identification Type\" formControlName=\"identification_type\">\r\n                            <mat-option *ngFor=\"let identificationType of identificationTypes\" [value]=\"identificationType\">\r\n                                {{ identificationType }}\r\n                            </mat-option>\r\n                        </mat-select>\r\n                        <mat-hint align=\"end\" i18n>The type of document to verify your identify</mat-hint>\r\n                        <mat-error i18n *ngIf=\"verificationFormControls.individual.get('identification_type').errors?.required \">\r\n                            This field is required\r\n                        </mat-error>\r\n                        <mat-error i18n *ngIf=\"verificationFormControls.individual.get('identification_type').errors?.artemisError \">\r\n                            Server error: {{verificationFormControls.individual.get('identification_type').errors.artemisError}}\r\n                        </mat-error>\r\n                    </mat-form-field>\r\n                </div>\r\n                <div class=\"col-sm\">\r\n                    <!-- identification number -->\r\n                    <mat-form-field>\r\n                        <input matInput i18n-placeholder placeholder=\"Identification Number\" formControlName=\"identification_number\" required>\r\n                        <mat-hint align=\"end\" i18n>Unique number of your idenfity documennt (e.g. passport number)\r\n                        </mat-hint>\r\n                        <mat-error i18n *ngIf=\"verificationFormControls.individual.get('identification_number').errors?.required \">\r\n                            This field is required\r\n                        </mat-error>\r\n                        <mat-error i18n *ngIf=\"verificationFormControls.individual.get('identification_number').errors?.artemisError \">\r\n                            Server error: {{verificationFormControls.individual.get('identification_number').errors.artemisError}}\r\n                        </mat-error>\r\n                    </mat-form-field>\r\n                </div>\r\n            </div>\r\n            <div class=\"row\">\r\n                <div class=\"col-sm\">\r\n                    <!-- issue date -->\r\n                    <mat-form-field>\r\n                        <input (focus)=\"issueDatePicker.open()\" (click)=\"issueDatePicker.open()\" matInput i18n-placeholder [matDatepicker]=\"issueDatePicker\" placeholder=\"Issue Date\" formControlName=\"issue_date\" required>\r\n                        <mat-datepicker-toggle matSuffix [for]=\"issueDatePicker\"></mat-datepicker-toggle>\r\n                        <mat-datepicker #issueDatePicker=\"\"></mat-datepicker>\r\n                        <mat-hint align=\"end\" i18n>Issue date of your identify document</mat-hint>\r\n                        <mat-error i18n *ngIf=\"verificationFormControls.individual.get('issue_date').errors?.required \">\r\n                            This field is required\r\n                        </mat-error>\r\n                        <mat-error i18n *ngIf=\"verificationFormControls.individual.get('issue_date').errors?.artemisError \">\r\n                            Server error: {{verificationFormControls.individual.get('issue_date').errors.artemisError}}\r\n                        </mat-error>\r\n                    </mat-form-field>\r\n                </div>\r\n                <div class=\"col-sm\">\r\n                    <!--expiry date-->\r\n                    <mat-form-field>\r\n                        <input (focus)=\"expiryDatePicker.open()\" (click)=\"expiryDatePicker.open()\" matInput i18n-placeholder [matDatepicker]=\"expiryDatePicker\" placeholder=\"Expiry Date\" formControlName=\"expiry_date\">\r\n                        <mat-datepicker-toggle matSuffix [for]=\"expiryDatePicker\"></mat-datepicker-toggle>\r\n                        <mat-datepicker #expiryDatePicker=\"\"></mat-datepicker>\r\n                        <mat-hint align=\"end\" i18n>Expiry date of your identify document</mat-hint>\r\n                        <mat-error i18n *ngIf=\"verificationFormControls.individual.get('expiry_date').errors?.artemisError \">\r\n                            Server error: {{verificationFormControls.individual.get('expiry_date').errors.artemisError}}\r\n                        </mat-error>\r\n                    </mat-form-field>\r\n                </div>\r\n            </div>\r\n            <div class=\"row\">\r\n                <div class=\"col-12\">\r\n                    <h2 i18n=\"\">Misc</h2>\r\n                </div>\r\n                <div class=\"col-sm\">\r\n                    <!--payment mode -->\r\n                    <mat-form-field>\r\n                        <mat-select i18n-placeholder placeholder=\"Payment Mode\" formControlName=\"payment_mode\">\r\n                            <mat-option *ngFor=\"let paymentMode of paymentModes\" [value]=\"paymentMode\">\r\n                                {{ paymentMode }}\r\n                            </mat-option>\r\n                        </mat-select>\r\n                        <mat-hint align=\"end\" i18n>How you will make the contribution</mat-hint>\r\n                        <mat-error i18n *ngIf=\"verificationFormControls.individual.get('payment_mode').errors?.required \">\r\n                            This field is required\r\n                        </mat-error>\r\n                        <mat-error i18n *ngIf=\"verificationFormControls.individual.get('payment_mode').errors?.artemisError \">\r\n                            Server error: {{verificationFormControls.individual.get('payment_mode').errors.artemisError}}\r\n                        </mat-error>\r\n                    </mat-form-field>\r\n                </div>\r\n\r\n                <div class=\"col-sm\">\r\n                    <!--SSIC code -->\r\n                    <mat-form-field>\r\n                        <input aria-label=\"Industry\" matInput i18n-placeholder placeholder=\"Industry\" [matAutocomplete]=\"autoSsicCode\" formControlName=\"ssic_code\" autocomplete=\"off\">\r\n                        <mat-hint align=\"end\" i18n>Singapore Standard Industrial Classification</mat-hint>\r\n                        <mat-autocomplete #autoSsicCode=\"matAutocomplete\" [displayWith]=\"displayLabel\">\r\n                            <mat-option *ngFor=\"let ssic of filteredSsics | async\" [value]=\"ssic\">\r\n                                {{ ssic.label }}\r\n                            </mat-option>\r\n                        </mat-autocomplete>\r\n                        <mat-error i18n *ngIf=\"verificationFormControls.individual.get('ssic_code').errors?.required \">\r\n                            This field is required\r\n                        </mat-error>\r\n                        <mat-error i18n *ngIf=\"verificationFormControls.individual.get('ssic_code').errors?.artemisError \">\r\n                            Server error: {{verificationFormControls.individual.get('ssic_code').errors.artemisError}}\r\n                        </mat-error>\r\n                    </mat-form-field>\r\n                </div>\r\n\r\n            </div>\r\n            <div class=\"row\">\r\n                <!-- source of funds -->\r\n                <div class=\"col-sm\">\r\n                    <mat-form-field>\r\n                        <mat-select i18n-placeholder placeholder=\"Source of Funds\" formControlName=\"source_of_funds\">\r\n                            <mat-option *ngFor=\"let source of sourceOfFunds\" [value]=\"source\">\r\n                                {{ source }}\r\n                            </mat-option>\r\n                        </mat-select>\r\n                        <mat-hint align=\"end\" i18n>The source of funds</mat-hint>\r\n                        <mat-error i18n *ngIf=\"verificationFormControls.individual.get('source_of_funds').errors?.artemisError \">\r\n                            Server error: {{verificationFormControls.individual.get('source_of_funds').errors.artemisError}}\r\n                        </mat-error>\r\n                    </mat-form-field>\r\n                </div>\r\n\r\n                <div class=\"col-sm\">\r\n                    <!-- SSOC code -->\r\n                    <mat-form-field>\r\n                        <input aria-label=\"Occupation\" matInput i18n-placeholder placeholder=\"Occupation\" [matAutocomplete]=\"autoSsocCode\" formControlName=\"ssoc_code\" autocomplete=\"off\">\r\n                        <mat-hint align=\"end\" i18n>Singapore Standard Occupation Classification</mat-hint>\r\n                        <mat-autocomplete #autoSsocCode=\"matAutocomplete\" [displayWith]=\"displayLabel\">\r\n                            <mat-option *ngFor=\"let ssoc of filteredSsocs | async\" [value]=\"ssoc\">\r\n                                {{ ssoc.label }}\r\n                            </mat-option>\r\n                        </mat-autocomplete>\r\n                        <mat-error i18n *ngIf=\"verificationFormControls.individual.get('ssoc_code').errors?.required \">\r\n                            This field is required\r\n                        </mat-error>\r\n                        <mat-error i18n *ngIf=\"verificationFormControls.individual.get('ssoc_code').errors?.artemisError \">\r\n                            Server error: {{verificationFormControls.individual.get('ssoc_code').errors.artemisError}}\r\n                        </mat-error>\r\n                    </mat-form-field>\r\n                </div>\r\n            </div>\r\n\r\n            <div class=\"row\">\r\n                <div class=\"col-sm\">\r\n                    <!-- bank name -->\r\n                    <mat-form-field [hidden]=\"saleMode==='public'\">\r\n                        <input matInput i18n-placeholder placeholder=\"Bank Name\" formControlName=\"bank_name\">\r\n                        <mat-hint align=\"end\" i18n>Name of your bank</mat-hint>\r\n                        <mat-error i18n *ngIf=\"verificationFormControls.individual.get('bank_name').errors?.artemisError \">\r\n                            Server error: {{verificationFormControls.individual.get('bank_name').errors.artemisError}}\r\n                        </mat-error>\r\n                    </mat-form-field>\r\n                </div>\r\n                <div class=\"col-sm\">\r\n                    <!-- acc number -->\r\n                    <mat-form-field  [hidden]=\"saleMode==='public'\">\r\n                        <input matInput i18n-placeholder placeholder=\"Bank Account Number\" formControlName=\"acc_number\">\r\n                        <mat-hint align=\"end\" i18n>Your Bank Account Number</mat-hint>\r\n                        <mat-error i18n *ngIf=\"verificationFormControls.individual.get('acc_number').errors?.artemisError \">\r\n                            Server error: {{verificationFormControls.individual.get('acc_number').errors.artemisError}}\r\n                        </mat-error>\r\n                    </mat-form-field>\r\n                </div>\r\n            </div>\r\n\r\n            <div class=\"row\">\r\n                <div class=\"col-sm\">\r\n                    <!-- addresses -->\r\n                    <mat-form-field>\r\n                        <input matInput i18n-placeholder placeholder=\"Addresses\" formControlName=\"addresses\">\r\n                        <mat-hint align=\"end\" i18n>Addresses</mat-hint>\r\n                    </mat-form-field>\r\n                </div>\r\n            </div>\r\n\r\n\r\n            <div class=\"mt-2 d-flex flex-row align-items-center\">\r\n                <button class=\"mr-2\" type=\"button\" mat-button (click)=\"fillMockData('individual')\">\r\n                    [DEBUG] FILL IN MOCK DATA\r\n                </button>\r\n                <button i18n type=\"submit\" mat-raised-button color=\"primary\" mat-button [disabled]=\"submittingData\">\r\n                    Continue\r\n                </button>\r\n                <mat-spinner class=\"ml-2\" [hidden]=\"!submittingData\" diameter=\"25\"></mat-spinner>\r\n            </div>\r\n        </form>\r\n    </mat-step>\r\n\r\n    <!-- step 3: corporation: details of the corporation (the business details) -->\r\n    <mat-step [stepControl]=\"verificationFormControls.corporation\" editable=\"true\">\r\n        <form class=\"verify-form\" (ngSubmit)=\"submitCorporation()\" [formGroup]=\"verificationFormControls.corporation\">\r\n\r\n            <!-- id -->\r\n            <input type=\"hidden\" formControlName=\"rfrID\">\r\n\r\n            <!--existing_entity -->\r\n            <mat-form-field>\r\n                <mat-select i18n-placeholder placeholder=\"Existing Entity\" formControlName=\"existing_entity\">\r\n                    <mat-option *ngFor=\"let existingEntity of existingEntities\" [value]=\"existingEntity.code\">\r\n                        {{ existingEntity.label }}\r\n                    </mat-option>\r\n                </mat-select>\r\n                <mat-hint align=\"end\" i18n>Whether the corporate has registered and started operating</mat-hint>\r\n                <mat-error i18n *ngIf=\"verificationFormControls.corporation.get('existing_entity').errors?.required \">\r\n                    Existing Entity is a required field\r\n                </mat-error>\r\n                <mat-error i18n *ngIf=\"verificationFormControls.corporation.get('existing_entity').errors?.artemisError \">\r\n                    Server error: {{verificationFormControls.corporation.get('existing_entity').errors.artemisError}}\r\n                </mat-error>\r\n            </mat-form-field>\r\n\r\n            <!-- entity_type -->\r\n            <mat-form-field>\r\n                <mat-select i18n-placeholder placeholder=\"Entity Type\" formControlName=\"entity_type\">\r\n                    <mat-option *ngFor=\"let entityType of entityTypes\" [value]=\"entityType\">\r\n                        {{ entityType }}\r\n                    </mat-option>\r\n                </mat-select>\r\n                <mat-hint align=\"end\" i18n>Type of the corporate customer business</mat-hint>\r\n                <mat-error i18n *ngIf=\"verificationFormControls.corporation.get('entity_type').errors?.required \">\r\n                    Title is a required field\r\n                </mat-error>\r\n                <mat-error i18n *ngIf=\"verificationFormControls.corporation.get('entity_type').errors?.artemisError \">\r\n                    Server error: {{verificationFormControls.corporation.get('entity_type').errors.artemisError}}\r\n                </mat-error>\r\n            </mat-form-field>\r\n\r\n            <!-- name -->\r\n            <mat-form-field>\r\n                <input matInput i18n-placeholder placeholder=\"Name\" formControlName=\"name\" autocomplete=\"off\" required>\r\n                <mat-hint align=\"end\" i18n>Name of the corporate</mat-hint>\r\n                <mat-error i18n *ngIf=\"verificationFormControls.corporation.get('name').errors?.required \">\r\n                    Name is a required field\r\n                </mat-error>\r\n                <mat-error i18n *ngIf=\"verificationFormControls.corporation.get('name').errors?.artemisError \">\r\n                    Server error: {{verificationFormControls.corporation.get('name').errors.artemisError}}\r\n                </mat-error>\r\n            </mat-form-field>\r\n\r\n            <!-- country-->\r\n            <mat-form-field>\r\n                <input aria-label=\"Country\" matInput i18n-placeholder placeholder=\"Country\" [matAutocomplete]=\"autoCountry\" formControlName=\"country\" autocomplete=\"off\">\r\n                <mat-hint align=\"end\" i18n>Country of incorporation</mat-hint>\r\n                <mat-autocomplete #autoCountry=\"matAutocomplete\">\r\n                    <mat-option *ngFor=\"let country of filteredCountries | async\" [value]=\"country\">\r\n                        {{ country }}\r\n                    </mat-option>\r\n                </mat-autocomplete>\r\n                <mat-error i18n *ngIf=\"verificationFormControls.corporation.get('country').errors?.required \">\r\n                    Country is a required field\r\n                </mat-error>\r\n                <mat-error i18n *ngIf=\"verificationFormControls.corporation.get('country').errors?.artemisError \">\r\n                    Server error: {{verificationFormControls.corporation.get('country').errors.artemisError}}\r\n                </mat-error>\r\n            </mat-form-field>\r\n\r\n            <!-- country_of_operations -->\r\n            <mat-form-field>\r\n                <input aria-label=\"Country of operations\" matInput i18n-placeholder placeholder=\"Country of operations\" [matAutocomplete]=\"autoCountryOfOperations\" formControlName=\"country_of_operations\" autocomplete=\"off\">\r\n                <mat-hint align=\"end\" i18n>Country of operations</mat-hint>\r\n                <mat-autocomplete #autoCountryOfOperations=\"matAutocomplete\">\r\n                    <mat-option *ngFor=\"let country of filteredCountries | async\" [value]=\"country\">\r\n                        {{ country }}\r\n                    </mat-option>\r\n                </mat-autocomplete>\r\n                <mat-error i18n *ngIf=\"verificationFormControls.corporation.get('country_of_operations').errors?.required \">\r\n                    Country of operations is a required field\r\n                </mat-error>\r\n                <mat-error i18n *ngIf=\"verificationFormControls.corporation.get('country_of_operations').errors?.artemisError \">\r\n                    Server error: {{verificationFormControls.corporation.get('country_of_operations').errors.artemisError}}\r\n                </mat-error>\r\n            </mat-form-field>\r\n\r\n            <!--ownership_structure_layers-->\r\n            <mat-form-field>\r\n                <mat-select i18n-placeholder placeholder=\"Ownership Structure Layers\" formControlName=\"ownership_structure_layers\">\r\n                    <mat-option *ngFor=\"let ownershipStructureLayer of ownershipStructureLayers\" [value]=\"ownershipStructureLayer.code\">\r\n                        {{ ownershipStructureLayer.label }}\r\n                    </mat-option>\r\n                </mat-select>\r\n                <mat-hint align=\"end\" i18n>The structure of corporate</mat-hint>\r\n                <mat-error i18n *ngIf=\"verificationFormControls.corporation.get('ownership_structure_layers').errors?.required \">\r\n                    Ownership Structure Layers is a required field\r\n                </mat-error>\r\n                <mat-error i18n *ngIf=\"verificationFormControls.corporation.get('ownership_structure_layers').errors?.artemisError \">\r\n                    Server error: {{verificationFormControls.corporation.get('ownership_structure_layers').errors.artemisError}}\r\n                </mat-error>\r\n            </mat-form-field>\r\n\r\n            <!--SSIC code -->\r\n            <mat-form-field>\r\n                <input aria-label=\"Industry Code\" matInput i18n-placeholder placeholder=\"Industry Code\" [matAutocomplete]=\"autoSsicCodeCorp\" formControlName=\"ssic_code\" autocomplete=\"off\">\r\n                <mat-hint align=\"end\" i18n>Industry code of the corporate business</mat-hint>\r\n                <mat-autocomplete #autoSsicCodeCorp=\"matAutocomplete\" [displayWith]=\"displayLabel\">\r\n                    <mat-option *ngFor=\"let ssic of filteredSsics | async\" [value]=\"ssic\">\r\n                        {{ ssic.label }}\r\n                    </mat-option>\r\n                </mat-autocomplete>\r\n                <mat-error i18n *ngIf=\"verificationFormControls.corporation.get('ssic_code').errors?.required \">\r\n                    Industry Code is a required field\r\n                </mat-error>\r\n                <mat-error i18n *ngIf=\"verificationFormControls.corporation.get('ssic_code').errors?.artemisError \">\r\n                    Server error: {{verificationFormControls.corporation.get('ssic_code').errors.artemisError}}\r\n                </mat-error>\r\n            </mat-form-field>\r\n\r\n            <!--payment mode -->\r\n            <mat-form-field>\r\n                <mat-select i18n-placeholder placeholder=\"Payment Mode\" formControlName=\"payment_mode\">\r\n                    <mat-option *ngFor=\"let paymentMode of paymentModes\" [value]=\"paymentMode\">\r\n                        {{ paymentMode }}\r\n                    </mat-option>\r\n                </mat-select>\r\n                <mat-hint align=\"end\" i18n>How does the corporate customer make payment to your services</mat-hint>\r\n                <mat-error i18n *ngIf=\"verificationFormControls.corporation.get('payment_mode').errors?.required \">\r\n                    This field is required\r\n                </mat-error>\r\n                <mat-error i18n *ngIf=\"verificationFormControls.corporation.get('payment_mode').errors?.artemisError \">\r\n                    Server error: {{verificationFormControls.corporation.get('payment_mode').errors.artemisError}}\r\n                </mat-error>\r\n            </mat-form-field>\r\n\r\n            <!-- source of funds -->\r\n            <mat-form-field>\r\n                <mat-select i18n-placeholder placeholder=\"Source of Funds\" formControlName=\"source_of_funds\">\r\n                    <mat-option *ngFor=\"let source of sourceOfFunds\" [value]=\"source\">\r\n                        {{ source }}\r\n                    </mat-option>\r\n                </mat-select>\r\n                <mat-hint align=\"end\" i18n>The source of funds</mat-hint>\r\n                <mat-error i18n *ngIf=\"verificationFormControls.corporation.get('source_of_funds').errors?.artemisError \">\r\n                    Server error: {{verificationFormControls.corporation.get('source_of_funds').errors.artemisError}}\r\n                </mat-error>\r\n            </mat-form-field>\r\n\r\n            <!-- bank name -->\r\n            <mat-form-field [hidden]=\"saleMode==='public'\">\r\n                <input matInput i18n-placeholder placeholder=\"Company Bank Name\" formControlName=\"bank_name\">\r\n                <mat-hint align=\"end\" i18n>Name of the companies bank</mat-hint>\r\n                <mat-error i18n *ngIf=\"verificationFormControls.individual.get('bank_name').errors?.artemisError \">\r\n                    Server error: {{verificationFormControls.individual.get('bank_name').errors.artemisError}}\r\n                </mat-error>\r\n            </mat-form-field>\r\n\r\n            <!-- acc number -->\r\n            <mat-form-field [hidden]=\"saleMode==='public'\">\r\n                <input matInput i18n-placeholder placeholder=\"Company Bank Account Number\" formControlName=\"acc_number\">\r\n                <mat-hint align=\"end\" i18n>Company Bank Account Number</mat-hint>\r\n                <mat-error i18n *ngIf=\"verificationFormControls.individual.get('acc_number').errors?.artemisError \">\r\n                    Server error: {{verificationFormControls.individual.get('acc_number').errors.artemisError}}\r\n                </mat-error>\r\n            </mat-form-field>\r\n\r\n            <div class=\"d-flex flex-row align-items-center\">\r\n                <button class=\"mr-2\" type=\"button\" mat-button (click)=\"fillMockData('corporation')\">\r\n                    [DEBUG] FILL IN MOCK DATA\r\n                </button>\r\n                <button i18n type=\"submit\" mat-raised-button color=\"primary\" mat-button [disabled]=\"submittingData\">\r\n                    Continue\r\n                </button>\r\n            </div>\r\n        </form>\r\n    </mat-step>\r\n\r\n    <!-- step 4: corporation_related_person: personal details for individual type -->\r\n    <mat-step [stepControl]=\"verificationFormControls.corporation_related_person\" editable=\"true\">\r\n        <form class=\"verify-form\" (ngSubmit)=\"submitCorporationRelatedPerson()\" [formGroup]=\"verificationFormControls.corporation_related_person\">\r\n            <!-- id -->\r\n            <input type=\"hidden\" formControlName=\"rfrID\">\r\n\r\n            <!-- crp_type -->\r\n            <input type=\"hidden\" formControlName=\"crp_type\">\r\n\r\n            <!-- eth_address-->\r\n            <mat-form-field>\r\n                <input matInput i18n-placeholder placeholder=\"Public Ethereum Address\" formControlName=\"eth_address\" autocomplete=\"off\" required>\r\n                <mat-hint align=\"end\" i18n>Your public ethereum address for whitelisting purposes</mat-hint>\r\n                <mat-error i18n *ngIf=\"verificationFormControls.corporation_related_person.get('eth_address').errors?.required \">\r\n                    This field is required so we can whitelist contributions from this address\r\n                </mat-error>\r\n            </mat-form-field>\r\n\r\n            <!-- email address -->\r\n            <mat-form-field>\r\n                <input matInput i18n-placeholder placeholder=\"Email address\" formControlName=\"email\" autocomplete=\"email\" required>\r\n                <mat-hint align=\"end\" i18n>So we can send you verification status updates</mat-hint>\r\n                <mat-error i18n *ngIf=\"verificationFormControls.corporation_related_person.get('email').errors?.required \">\r\n                    This field is required so we can send you verification status updates\r\n                </mat-error>\r\n                <mat-error i18n *ngIf=\"verificationFormControls.corporation_related_person.get('email').errors?.email\">\r\n                    Please enter a valid email address\r\n                </mat-error>\r\n            </mat-form-field>\r\n\r\n            <!-- mobile -->\r\n            <mat-form-field>\r\n                <input matInput i18n-placeholder placeholder=\"Mobile phone number\" formControlName=\"mobile\" autocomplete=\"tel\" required>\r\n                <mat-hint align=\"end\" i18n>So we can call you if needed</mat-hint>\r\n                <mat-error i18n *ngIf=\"verificationFormControls.corporation_related_person.get('mobile').errors?.required \">\r\n                    Mobile phone is a required field\r\n                </mat-error>\r\n            </mat-form-field>\r\n\r\n            <!-- first_name -->\r\n            <mat-form-field>\r\n                <input matInput i18n-placeholder placeholder=\"First Name\" formControlName=\"first_name\" autocomplete=\"given-name\" required>\r\n                <mat-hint align=\"end\" i18n>Your first name or given name (must match your identity\r\n                    document)\r\n                </mat-hint>\r\n                <mat-error i18n *ngIf=\"verificationFormControls.corporation_related_person.get('first_name').errors?.required \">\r\n                    First Name is a required field\r\n                </mat-error>\r\n                <mat-error i18n *ngIf=\"verificationFormControls.corporation_related_person.get('first_name').errors?.artemisError \">\r\n                    Server error: {{verificationFormControls.corporation_related_person.get('first_name').errors.artemisError}}\r\n                </mat-error>\r\n            </mat-form-field>\r\n\r\n            <!-- last name -->\r\n            <mat-form-field>\r\n                <input matInput i18n-placeholder placeholder=\"Last Name\" formControlName=\"last_name\" autocomplete=\"family-name\" required>\r\n                <mat-hint align=\"end\" i18n>Your last name or surname name (must match your identity\r\n                    document)\r\n                </mat-hint>\r\n                <mat-error i18n *ngIf=\"verificationFormControls.corporation_related_person.get('last_name').errors?.required \">\r\n                    Last Name is a required field\r\n                </mat-error>\r\n                <mat-error i18n *ngIf=\"verificationFormControls.corporation_related_person.get('last_name').errors?.artemisError \">\r\n                    Server error: {{verificationFormControls.corporation_related_person.get('last_name').errors.artemisError}}\r\n                </mat-error>\r\n            </mat-form-field>\r\n\r\n            <!-- alias name -->\r\n            <mat-form-field>\r\n                <input matInput i18n-placeholder placeholder=\"Alias Name\" formControlName=\"alias_name\" autocomplete=\"off\">\r\n                <mat-hint align=\"end\" i18n>Your alias name</mat-hint>\r\n                <mat-error i18n *ngIf=\"verificationFormControls.corporation_related_person.get('alias_name').errors?.artemisError \">\r\n                    Server error: {{verificationFormControls.corporation_related_person.get('alias_name').errors.artemisError}}\r\n                </mat-error>\r\n            </mat-form-field>\r\n\r\n            <!-- role -->\r\n            <mat-form-field>\r\n                <mat-select i18n-placeholder placeholder=\"Role\" formControlName=\"role\">\r\n                    <mat-option *ngFor=\"let role of roles\" [value]=\"role\">\r\n                        {{ role }}\r\n                    </mat-option>\r\n                </mat-select>\r\n                <mat-hint align=\"end\" i18n>How is the corporate customer onboarded?</mat-hint>\r\n                <mat-error i18n *ngIf=\"verificationFormControls.corporation_related_person.get('role').errors?.required \">\r\n                    Role is a required field\r\n                </mat-error>\r\n                <mat-error i18n *ngIf=\"verificationFormControls.corporation_related_person.get('role').errors?.artemisError \">\r\n                    Server error: {{verificationFormControls.corporation_related_person.get('role').errors.artemisError}}\r\n                </mat-error>\r\n            </mat-form-field>\r\n\r\n            <!-- nationality -->\r\n            <mat-form-field>\r\n                <input aria-label=\"Nationality\" matInput i18n-placeholder placeholder=\"Nationality\" [matAutocomplete]=\"autoNationalityCorporationRelatedPerson\" formControlName=\"nationality\" autocomplete=\"off\">\r\n                <mat-hint align=\"end\" i18n>Your nationality must match your identity document</mat-hint>\r\n                <mat-autocomplete #autoNationalityCorporationRelatedPerson=\"matAutocomplete\">\r\n                    <mat-option *ngFor=\"let nationality of filteredNationalities | async\" [value]=\"nationality\">\r\n                        {{ nationality }}\r\n                    </mat-option>\r\n                </mat-autocomplete>\r\n                <mat-error i18n *ngIf=\"verificationFormControls.corporation_related_person.get('nationality').errors?.required \">\r\n                    This field is required\r\n                </mat-error>\r\n                <mat-error i18n *ngIf=\"verificationFormControls.corporation_related_person.get('nationality').errors?.artemisError \">\r\n                    Server error: {{verificationFormControls.corporation_related_person.get('nationality').errors.artemisError}}\r\n                </mat-error>\r\n            </mat-form-field>\r\n\r\n            <!-- country of residence -->\r\n            <mat-form-field>\r\n                <input aria-label=\"Country of Residence\" matInput i18n-placeholder placeholder=\"Country of Residence\" [matAutocomplete]=\"autoCountryOfResidenceCorporationRelatedPerson\" formControlName=\"country_of_residence\" autocomplete=\"off\">\r\n                <mat-hint align=\"end\" i18n>The name of the country where you currently live</mat-hint>\r\n                <mat-autocomplete #autoCountryOfResidenceCorporationRelatedPerson=\"matAutocomplete\">\r\n                    <mat-option *ngFor=\"let country of filteredCountries | async\" [value]=\"country\">\r\n                        {{ country }}\r\n                    </mat-option>\r\n                </mat-autocomplete>\r\n                <mat-error i18n *ngIf=\"verificationFormControls.corporation_related_person.get('country_of_residence').errors?.required \">\r\n                    Country of Residence is a required field\r\n                </mat-error>\r\n                <mat-error i18n *ngIf=\"verificationFormControls.corporation_related_person.get('country_of_residence').errors?.artemisError \">\r\n                    Server error: {{verificationFormControls.corporation_related_person.get('country_of_residence').errors.artemisError}}\r\n                </mat-error>\r\n            </mat-form-field>\r\n\r\n            <!-- country of birth -->\r\n            <mat-form-field>\r\n                <input aria-label=\"Country of Birth\" matInput i18n-placeholder placeholder=\"Country of Birth\" [matAutocomplete]=\"autoCountryOfBirth\" formControlName=\"country_of_birth\" autocomplete=\"off\">\r\n                <mat-hint align=\"end\" i18n>The name of the country where you were born</mat-hint>\r\n                <mat-autocomplete #autoCountryOfBirth=\"matAutocomplete\">\r\n                    <mat-option *ngFor=\"let country of filteredCountries | async\" [value]=\"country\">\r\n                        {{ country }}\r\n                    </mat-option>\r\n                </mat-autocomplete>\r\n                <mat-error i18n *ngIf=\"verificationFormControls.corporation_related_person.get('country_of_birth').errors?.artemisError \">\r\n                    Server error: {{verificationFormControls.corporation_related_person.get('country_of_birth').errors.artemisError}}\r\n                </mat-error>\r\n            </mat-form-field>\r\n\r\n\r\n            <!-- gender -->\r\n            <mat-form-field>\r\n                <mat-select i18n-placeholder placeholder=\"Gender\" formControlName=\"gender\">\r\n                    <mat-option i18n value=\"MALE\">MALE</mat-option>\r\n                    <mat-option i18n value=\"FEMALE\">FEMALE</mat-option>\r\n                </mat-select>\r\n                <mat-hint align=\"end\" i18n>Your gender</mat-hint>\r\n                <mat-error i18n *ngIf=\"verificationFormControls.corporation_related_person.get('gender').errors?.artemisError \">\r\n                    Server error: {{verificationFormControls.corporation_related_person.get('gender').errors.artemisError}}\r\n                </mat-error>\r\n            </mat-form-field>\r\n\r\n            <!--date of birth -->\r\n            <mat-form-field>\r\n                <input (focus)=\"corpDateOfBirthPicker.open()\" (click)=\"corpDateOfBirthPicker.open()\" matInput i18n-placeholder [matDatepicker]=\"corpDateOfBirthPicker\" placeholder=\"Date of Birth\" formControlName=\"date_of_birth\">\r\n                <mat-datepicker-toggle matSuffix [for]=\"corpDateOfBirthPicker\"></mat-datepicker-toggle>\r\n                <mat-datepicker #corpDateOfBirthPicker></mat-datepicker>\r\n                <mat-hint align=\"end\" i18n>Your date of birth</mat-hint>\r\n                <mat-error i18n *ngIf=\"verificationFormControls.corporation_related_person.get('date_of_birth').errors?.artemisError \">\r\n                    Server error: {{verificationFormControls.corporation_related_person.get('date_of_birth').errors.artemisError}}\r\n                </mat-error>\r\n            </mat-form-field>\r\n\r\n\r\n            <div class=\"d-flex flex-row align-items-center\">\r\n                <button class=\"mr-2\" type=\"button\" mat-button (click)=\"fillMockData('corporation_related_person')\">\r\n                    [DEBUG] FILL IN MOCK DATA\r\n                </button>\r\n                <button i18n type=\"submit\" mat-raised-button color=\"primary\" mat-button [disabled]=\"submittingData\">\r\n                    Continue\r\n                </button>\r\n                <mat-spinner class=\"ml-2\" [hidden]=\"!submittingData\" diameter=\"25\"></mat-spinner>\r\n            </div>\r\n        </form>\r\n    </mat-step>\r\n\r\n    <!-- step 5: documentUpload: upload the identity document -->\r\n    <mat-step [stepControl]=\"verificationFormControls.idDocumentUpload\"  editable=\"true\">\r\n\r\n        <div class=\"mt-4 mb-4 alert alert-danger\" role=\"alert\" [hidden]=\"!faceMismatch\">\r\n            We're not able to find a match of your face between your ID document and selfie. Try uploading\r\n            the ID document again or taking another selfie. If you are encountering persistant problems, please\r\n            email <a target=\"_blank\" href=\"mailto:support@bigtk.io\">support@bigtk.io</a>\r\n        </div>\r\n\r\n        <form class=\"verify-form\" [formGroup]=\"verificationFormControls.idDocumentUpload\">\r\n            <div class=\"d-flex flex-lg-row flex-md-column flex-sm-column align-items-start justify-content-between\">\r\n                <div>\r\n                    <h2 i18n>1. Identity document</h2>\r\n                    <p i18n>A clear and unexpired government issued ID, consisting of one of the following:</p>\r\n                    <ul>\r\n                        <li i18n>International Passport (double page)</li>\r\n                        <li i18n>National ID Card (both sides)</li>\r\n                        <li i18n>Permanent Driver's License (both sides)</li>\r\n                    </ul>\r\n                    <strong i18n>Please note:</strong>\r\n                    <ul>\r\n                        <li i18n>Scanned document must be in the format of: JPG, PNG, GIF or PDF</li>\r\n                        <li i18n>Files must not exceed 10 MB</li>\r\n                    </ul>\r\n                </div>\r\n                <img src=\"/assets/img/sample_id.png\" class=\"itentity-document-sample-images\">\r\n            </div>\r\n\r\n            <div class=\"mt-3\">\r\n                <!-- document type -->\r\n                <mat-form-field style=\"width:auto;\">\r\n                    <mat-select i18n-placeholder placeholder=\"Document Type\" formControlName=\"document_type\">\r\n                        <mat-option *ngFor=\"let documentType of documentTypes\" [value]=\"documentType\">\r\n                            {{ documentType }}\r\n                        </mat-option>\r\n                    </mat-select>\r\n                    <mat-hint align=\"end\" i18n>The type of document uploaded</mat-hint>\r\n                    <mat-error i18n *ngIf=\"verificationFormControls.idDocumentUpload.get('document_type').errors?.required \">\r\n                        Document type is a required field\r\n                    </mat-error>\r\n                    <mat-error i18n *ngIf=\"verificationFormControls.idDocumentUpload.get('document_type').errors?.artemisError \">\r\n                        Server error: {{verificationFormControls.idDocumentUpload.get('document_type').errors.artemisError}}\r\n                    </mat-error>\r\n                </mat-form-field>\r\n\r\n                <div class=\"d-flex flex-row align-items-center\">\r\n                    <label class=\"m-0\">\r\n                        <input accept=\"image/*,application/pdf\" type=\"file\" (change)=\"submitIdDocumentUpload($event)\" hidden>\r\n                        <a class=\"no-underline\" mat-raised-button color=\"primary\" [disabled]=\"submittingData\" i18n>\r\n                            <mat-icon>file_upload</mat-icon>\r\n                            Upload ID document\r\n                        </a>\r\n                    </label>\r\n                    <mat-spinner class=\"ml-2\" [hidden]=\"!submittingData\" diameter=\"25\"></mat-spinner>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    </mat-step>\r\n\r\n    <!-- step 6: selfieUpload: upload the selfie -->\r\n    <mat-step [stepControl]=\"verificationFormControls.selfieUpload\"  editable=\"true\">\r\n        <form class=\"verify-form\" [formGroup]=\"verificationFormControls.selfieUpload\">\r\n            <div class=\"d-flex flex-lg-row flex-md-column flex-sm-column align-items-start justify-content-between\">\r\n                <div>\r\n                    <h2 i18n>2. Selfie with identity document</h2>\r\n                    <p i18n>An image of applicant holding the valid government issued photo ID</p>\r\n                    <strong i18n>Please note:</strong>\r\n                    <ul>\r\n                        <li i18n>Must be a color &amp; clear scanned image</li>\r\n                        <li i18n>Scanned document must be in the format of: JPG, PNG, GIF or PDF</li>\r\n                        <li i18n>Files must not exceed 10 MB</li>\r\n                    </ul>\r\n                    <p i18n>Before submitting an image, please make sure to follow photo requirements:</p>\r\n                    <ul>\r\n                        <li i18n>You are looking straight at the camera.</li>\r\n                        <li i18n>Your background has a light, neutral colour.</li>\r\n                        <li i18n>Your selfie is in colour.</li>\r\n                        <li i18n>Information on your document must be clearly visible.</li>\r\n                    </ul>\r\n                    <p i18n>In case of a low-quality selfie, Compliance Team may ask to resubmit.</p>\r\n                </div>\r\n                <img src=\"/assets/img/sample_selfie.png\" class=\"itentity-document-sample-images\">\r\n            </div>\r\n\r\n            <div class=\"mt-3 d-flex flex-row align-items-center\">\r\n                <label class=\"m-0\">\r\n                    <input accept=\"image/*,application/pdf\" type=\"file\" (change)=\"submitSelfieUpload($event)\" hidden>\r\n                    <a class=\"no-underline\" mat-raised-button color=\"primary\" [disabled]=\"submittingData\" i18n>\r\n                        <mat-icon>file_upload</mat-icon>\r\n                        Upload seflie\r\n                    </a>\r\n                </label>\r\n                <mat-spinner class=\"ml-2\" [hidden]=\"!submittingData\" diameter=\"25\"></mat-spinner>\r\n            </div>\r\n        </form>\r\n    </mat-step>\r\n\r\n    <!-- step 7: status: the status of the verification -->\r\n    <mat-step [stepControl]=\"verificationFormControls.status\"  editable=\"true\">\r\n\r\n        <div class=\"upload-success-container\" [hidden]=\"!checkingStatusLoading\">\r\n            <h2 class=\"text-center\">Checking...</h2>\r\n            <mat-spinner diameter=\"100\"></mat-spinner>\r\n            <p i18n class=\"mt-3\">This can take up to 60 seconds</p>\r\n        </div>\r\n\r\n        <div class=\"upload-success-container\" [hidden]=\"!verificationStatus || checkingStatusLoading\">\r\n            <mat-icon style=\"font-size:150px;height:150px;width:150px;\" color=\"primary\">cloud_done</mat-icon>\r\n            <mat-chip-list>\r\n                <mat-chip color=\"accent\" selected=\"true\" i18n>Verification status: {{verificationStatus}}</mat-chip>\r\n            </mat-chip-list>\r\n            <p i18n style=\"margin:1em\" [hidden]=\"verificationStatus === 'ACCEPTED'\">\r\n                Verification can take up to 24 hours to be processed. You will recieve an email once the status\r\n                changes with further instructions for participation in the BigToken ICO\r\n            </p>\r\n            <p i18n style=\"margin:1em\" [hidden]=\"!(verificationStatus === 'ACCEPTED')\">\r\n                Congratuations! You have been successfully verified. You will recieve an email as soon as your Ethereum address has been whitelisted in the smart contract\r\n            </p>\r\n        </div>\r\n\r\n    </mat-step>\r\n</mat-horizontal-stepper>\r\n\r\n\r\n\r\n\r\n"

/***/ }),

/***/ "../../../../../src/app/bigtoken/verificationForm/verificationForm.component.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("../../../core/esm5/core.js");
var moment = __webpack_require__("../../../../moment/moment.js");
var router_1 = __webpack_require__("../../../router/esm5/router.js");
var toastr_service_1 = __webpack_require__("../../../../../src/app/common/toastr.service.ts");
var forms_1 = __webpack_require__("../../../forms/esm5/forms.js");
var ngx_logger_1 = __webpack_require__("../../../../../src/app/lib/ngx-logger/index.ts");
var environment_1 = __webpack_require__("../../../../../src/environments/environment.ts");
var language_service_1 = __webpack_require__("../../../../../src/app/lib/i18n/language/language.service.ts");
var http_1 = __webpack_require__("../../../common/esm5/http.js");
var Observable_1 = __webpack_require__("../../../../rxjs/_esm5/Observable.js");
var material_1 = __webpack_require__("../../../material/esm5/material.es5.js");
var platform_browser_1 = __webpack_require__("../../../platform-browser/esm5/platform-browser.js");
__webpack_require__("../../../../rxjs/_esm5/add/operator/startWith.js");
__webpack_require__("../../../../rxjs/_esm5/add/operator/map.js");
__webpack_require__("../../../../rxjs/_esm5/add/operator/catch.js");
__webpack_require__("../../../../rxjs/_esm5/add/operator/share.js");
__webpack_require__("../../../../rxjs/_esm5/add/observable/of.js");
// Static data (form options etc)
var data_model_1 = __webpack_require__("../../../../../src/app/bigtoken/verificationForm/data-model.ts");
var VerificationFormComponent = /** @class */ (function () {
    // Class constructor
    function VerificationFormComponent(fb, log, route, toastr, languageService, http, iconRegistry, sanitizer) {
        var _this = this;
        this.fb = fb;
        this.log = log;
        this.route = route;
        this.toastr = toastr;
        this.languageService = languageService;
        this.http = http;
        this.iconRegistry = iconRegistry;
        this.sanitizer = sanitizer;
        this.submittingData = false;
        this.checkingStatusLoading = false;
        this.verificationStatus = "";
        this.faceMismatch = false;
        // Model Data (mainly for the select options etc)
        this.titles = data_model_1.titles;
        this.paymentModes = data_model_1.paymentModes;
        this.identificationTypes = data_model_1.identificationTypes;
        this.allCountries = data_model_1.countries;
        this.allNationalities = data_model_1.nationalities;
        this.allSsics = data_model_1.ssics;
        this.allSsocs = data_model_1.ssocs;
        this.existingEntities = data_model_1.existingEntities;
        this.entityTypes = data_model_1.entityTypes;
        this.ownershipStructureLayers = data_model_1.ownershipStructureLayers;
        this.roles = data_model_1.roles;
        this.documentTypes = data_model_1.documentTypes;
        this.sourceOfFunds = data_model_1.sourceOfFunds;
        // The entire view model - each step's form controls
        this.verificationFormControls = {
            // IMPORTANT: do not change the order of these they are used as in index into the stepper component
            entityType: this.fb.group({}),
            basics: this.fb.group({
                rfrID: new forms_1.FormControl(null, []),
                email: new forms_1.FormControl("", [forms_1.Validators.required, forms_1.Validators.email]),
                first_name: new forms_1.FormControl("", [forms_1.Validators.required]),
            }),
            individual: this.fb.group({
                rfrID: new forms_1.FormControl(null, []),
                eth_address: new forms_1.FormControl("", [forms_1.Validators.required]),
                email: new forms_1.FormControl("", [forms_1.Validators.required, forms_1.Validators.email]),
                title: new forms_1.FormControl("", [forms_1.Validators.required]),
                first_name: new forms_1.FormControl("", [forms_1.Validators.required]),
                last_name: new forms_1.FormControl("", [forms_1.Validators.required]),
                alias_name: new forms_1.FormControl("", []),
                gender: new forms_1.FormControl("", []),
                date_of_birth: new forms_1.FormControl("", []),
                mobile: new forms_1.FormControl("", [forms_1.Validators.required]),
                nationality: new forms_1.FormControl("", [forms_1.Validators.required]),
                country_of_residence: new forms_1.FormControl("", [forms_1.Validators.required]),
                country_of_birth: new forms_1.FormControl("", []),
                identification_type: new forms_1.FormControl("", [forms_1.Validators.required]),
                identification_number: new forms_1.FormControl("", [forms_1.Validators.required]),
                issue_date: new forms_1.FormControl("", [forms_1.Validators.required]),
                expiry_date: new forms_1.FormControl("", []),
                source_of_funds: new forms_1.FormControl("", []),
                payment_mode: new forms_1.FormControl("", [forms_1.Validators.required]),
                bank_name: new forms_1.FormControl("", []),
                acc_number: new forms_1.FormControl("", []),
                addresses: new forms_1.FormControl("", []),
                ssic_code: new forms_1.FormControl("", [forms_1.Validators.required]),
                ssoc_code: new forms_1.FormControl("", [forms_1.Validators.required])
            }),
            corporation: this.fb.group({
                rfrID: new forms_1.FormControl(null, []),
                existing_entity: new forms_1.FormControl("", [forms_1.Validators.required]),
                entity_type: new forms_1.FormControl("", [forms_1.Validators.required]),
                name: new forms_1.FormControl("", [forms_1.Validators.required]),
                country: new forms_1.FormControl("", [forms_1.Validators.required]),
                country_of_operations: new forms_1.FormControl("", [forms_1.Validators.required]),
                ownership_structure_layers: new forms_1.FormControl("", [forms_1.Validators.required]),
                ssic_code: new forms_1.FormControl("", [forms_1.Validators.required]),
                payment_mode: new forms_1.FormControl("", [forms_1.Validators.required]),
                source_of_funds: new forms_1.FormControl("", []),
                bank_name: new forms_1.FormControl("", []),
                acc_number: new forms_1.FormControl("", []),
            }),
            corporation_related_person: this.fb.group({
                rfrID: new forms_1.FormControl(null, []),
                eth_address: new forms_1.FormControl("", [forms_1.Validators.required]),
                email: new forms_1.FormControl("", [forms_1.Validators.required, forms_1.Validators.email]),
                mobile: new forms_1.FormControl("", [forms_1.Validators.required]),
                crp_type: new forms_1.FormControl("INDIVIDUAL", [forms_1.Validators.required]),
                first_name: new forms_1.FormControl("", [forms_1.Validators.required]),
                last_name: new forms_1.FormControl("", [forms_1.Validators.required]),
                alias_name: new forms_1.FormControl("", []),
                role: new forms_1.FormControl("", [forms_1.Validators.required]),
                nationality: new forms_1.FormControl("", [forms_1.Validators.required]),
                country_of_residence: new forms_1.FormControl("", [forms_1.Validators.required]),
                country_of_birth: new forms_1.FormControl("", []),
                gender: new forms_1.FormControl("", []),
                date_of_birth: new forms_1.FormControl("", []),
            }),
            idDocumentUpload: this.fb.group({
                rfrID: new forms_1.FormControl(null, []),
                document_type: new forms_1.FormControl({ value: "", disabled: this.submittingData }, [forms_1.Validators.required]),
            }),
            selfieUpload: this.fb.group({
                rfrID: new forms_1.FormControl(null, []),
                document_type: new forms_1.FormControl({ value: "SELFIE", disabled: this.submittingData }, [forms_1.Validators.required]),
            }),
            status: this.fb.group({
                rfrID: new forms_1.FormControl(null, [])
            }),
        };
        // register some custom svg icons
        iconRegistry.addSvgIcon('entity_individual', sanitizer.bypassSecurityTrustResourceUrl('/assets/svg/entity_individual.svg'));
        iconRegistry.addSvgIcon('entity_corporation', sanitizer.bypassSecurityTrustResourceUrl('/assets/svg/entity_corporation.svg'));
        // Set the api server.
        this.apiServer = {
            protocol: environment_1.environment.appServer.protocol,
            host: environment_1.environment.appServer.host,
            port: environment_1.environment.appServer.port,
            getUrl: function () {
                return this.protocol + "://" + this.host + ":" + this.port;
            }
        };
        this.saleMode = this.route.snapshot.data['constResolved'].mode;
        this.saleMode = this.saleMode.toLowerCase();
        switch (this.saleMode) {
            case 'public': {
                // during the public sale, the only value allowed in 'payment_mode' is 'VIRTUAL CURRENCY'
                this.verificationFormControls.individual.controls.payment_mode.setValue('VIRTUAL CURRENCY');
                this.verificationFormControls.individual.controls.payment_mode.disable();
                this.verificationFormControls.corporation.controls.payment_mode.setValue('VIRTUAL CURRENCY');
                this.verificationFormControls.corporation.controls.payment_mode.disable();
                break;
            }
        }
        // Setup the auto completes
        this.filteredCountries = this.verificationFormControls.individual.controls.country_of_residence.valueChanges
            .startWith(null)
            .map(function (country) { return (country ? _this.filterCountries(country) : _this.allCountries.slice()); });
        this.filteredNationalities = this.verificationFormControls.individual.controls.nationality.valueChanges
            .startWith(null)
            .map(function (nationality) { return (nationality ? _this.filterNationalities(nationality) : _this.allNationalities.slice()); });
        this.filteredSsics = this.verificationFormControls.individual.controls.ssic_code.valueChanges
            .startWith(null)
            .map(function (ssicCode) { return (ssicCode ? _this.filterSsics(ssicCode) : _this.allSsics.slice()); });
        this.filteredSsocs = this.verificationFormControls.individual.controls.ssoc_code.valueChanges
            .startWith(null)
            .map(function (ssocCode) { return (ssocCode ? _this.filterSsocs(ssocCode) : _this.allSsocs.slice()); });
    } // end constructor
    // Angular entry hook
    VerificationFormComponent.prototype.ngOnInit = function () {
        // start at the first step
        this.goToStepByName('entityType');
    };
    VerificationFormComponent.prototype.goToStepByName = function (stepName) {
        var destinationStepIndex = Object.keys(this.verificationFormControls).indexOf(stepName);
        console.log("NAVIGATING TO STEP INDEX:", destinationStepIndex);
        this.verificationStepper.selectedIndex = destinationStepIndex;
        // perform any step initilastions here...
        switch (stepName) {
            case 'status':
                this.checkStatus();
                break;
            default:
        }
    };
    VerificationFormComponent.prototype.filterCountries = function (name) {
        return this.allCountries.filter(function (country) { return country.toLowerCase().indexOf(name.toLowerCase()) === 0; });
    };
    VerificationFormComponent.prototype.filterNationalities = function (name) {
        return this.allNationalities.filter(function (nationality) { return nationality.toLowerCase().indexOf(name.toLowerCase()) === 0; });
    };
    VerificationFormComponent.prototype.filterSsics = function (name) {
        return this.allSsics.filter(function (ssic) { return ssic.label.toLowerCase().indexOf((name.label || name).toLowerCase()) > -1; });
    };
    VerificationFormComponent.prototype.filterSsocs = function (name) {
        return this.allSsocs.filter(function (ssoc) { return ssoc.label.toLowerCase().indexOf((name.label || name).toLowerCase()) > -1; });
    };
    VerificationFormComponent.prototype.displayLabel = function (obj) {
        return obj ? obj.label : obj;
    };
    VerificationFormComponent.prototype.fillMockData = function (type) {
        switch (type) {
            case 'basics': {
                this.verificationFormControls.basics.patchValue({
                    email: "dev+test@icoconsulting.asia",
                    first_name: "DILUM",
                });
                this.verificationFormControls.basics.markAsDirty();
                break;
            }
            case 'individual': {
                this.verificationFormControls.individual.patchValue({
                    eth_address: "0xbb780B193A1a6FDf245f2c9bF5ba1A588b4beF6B",
                    //email: "bobby.smith@test.com",
                    title: "Mr.",
                    //first_name: "Bob",
                    last_name: "NAVANJANA",
                    nationality: "SRI LANKAN",
                    country_of_residence: "SRI LANKA",
                    identification_type: "PASSPORT",
                    identification_number: "N3383338",
                    mobile: "+66922983313",
                    issue_date: new Date(2000, 0, 31),
                    //payment_mode: "VIRTUAL CURRENCY",
                    ssic_code: { code: "62019", label: "DEVELOPMENT OF OTHER SOFTWARE AND PROGRAMMING ACTIVITIES N.E.C." },
                    ssoc_code: { code: "25121", label: "SOFTWARE DEVELOPER" }
                });
                this.verificationFormControls.individual.markAsDirty();
                break;
            }
            case 'corporation': {
                this.verificationFormControls.corporation.patchValue({
                    existing_entity: "true",
                    entity_type: "SOLE-PROPRIETORSHIP (SPR)",
                    name: "MegaCorp",
                    country: "BARBADOS",
                    country_of_operations: "BARBADOS",
                    ownership_structure_layers: "1",
                    ssic_code: { code: "62019", label: "DEVELOPMENT OF OTHER SOFTWARE AND PROGRAMMING ACTIVITIES N.E.C." },
                });
                this.verificationFormControls.corporation.markAsDirty();
                break;
            }
            case 'corporation_related_person': {
                this.verificationFormControls.corporation_related_person.patchValue({
                    eth_address: "0x0000000000000000000000000000000000000000",
                    //email: "bobby.smith@test.com",
                    //first_name: "Bob",
                    last_name: "Smith",
                    nationality: "BARBADIAN",
                    country_of_residence: "BARBADOS",
                    mobile: "+66922983313",
                    role: "OWNER",
                });
                this.verificationFormControls.corporation_related_person.markAsDirty();
                break;
            }
            default: console.log("unable to fill in mock data for type " + type);
        }
    };
    VerificationFormComponent.prototype.submitStep0 = function (entityType) {
        this.entityType = entityType;
        this.log.info("submitStep0:", entityType);
        this.goToStepByName('basics');
    };
    VerificationFormComponent.prototype.submitBasics = function () {
        // submit to server
        this.log.debug("will submit the form to the server", this.verificationFormControls.basics.value);
        if (this.verificationFormControls.basics.dirty && this.verificationFormControls.basics.valid) {
            var postData = this.verificationFormControls.basics.value;
            postData.step = 'basics';
            this.postFieldData(postData, this.entityType, 'basics');
        }
    };
    VerificationFormComponent.prototype.submitIndividual = function () {
        // submit to server
        this.log.debug("will submit the form to the server", this.verificationFormControls.individual.value);
        if (this.verificationFormControls.individual.dirty && this.verificationFormControls.individual.valid) {
            var postData = this.verificationFormControls.individual.value;
            //format the dates. it would be much better to configure the matDatepicker to
            // do this for us but the documentation is impossible to find.
            if (postData.issue_date) {
                postData.issue_date = moment(postData.issue_date).format("DD/MM/YYYY");
            }
            if (postData.expiry_date) {
                postData.expiry_date = moment(postData.expiry_date).format("DD/MM/YYYY");
            }
            if (postData.date_of_birth) {
                postData.date_of_birth = moment(postData.date_of_birth).format("DD/MM/YYYY");
            }
            postData.entityType = 'individual';
            this.postFieldData(postData, 'idDocumentUpload', null);
        }
    };
    VerificationFormComponent.prototype.submitCorporation = function () {
        if (this.verificationFormControls.corporation.dirty && this.verificationFormControls.corporation.valid) {
            this.goToStepByName('corporation_related_person');
        }
    };
    VerificationFormComponent.prototype.submitCorporationRelatedPerson = function () {
        if (this.verificationFormControls.corporation_related_person.dirty && this.verificationFormControls.corporation_related_person.valid) {
            var crpPostData = this.verificationFormControls.corporation_related_person.value;
            // quick patch first...
            if (crpPostData.date_of_birth) {
                crpPostData.date_of_birth = moment(crpPostData.date_of_birth).format("DD/MM/YYYY");
            }
            // this will merge these 2 things together and then submit to the server.
            var postData = {
                entityType: 'corporation',
                customer: this.verificationFormControls.corporation.value,
                crp: [crpPostData]
            };
            console.log('merged data to post:', postData);
            this.postFieldData(postData, 'idDocumentUpload', null);
        }
    };
    VerificationFormComponent.prototype.patchRfrIdValueEverywhere = function (obj, rfrIdValue) {
        var _this = this;
        Object.keys(obj).forEach(function (fg) {
            var possibleFg = obj[fg];
            if (possibleFg instanceof forms_1.FormGroup) {
                possibleFg.patchValue({ rfrID: rfrIdValue });
            }
            else {
                // allow for nested form groups
                _this.patchRfrIdValueEverywhere(possibleFg, rfrIdValue);
            }
        });
    };
    VerificationFormComponent.prototype.postFieldData = function (postData, nextStepName, stepOrigin) {
        var _this = this;
        var apiPath = this.apiServer.getUrl() + "/api/app/ico/addForm/Verification/" + this.languageService.getLocale();
        this.submittingData = true;
        // Submit the form to the generic "add form" server endpoint
        this.http
            .post(apiPath, postData)
            .catch(this.handleHttpError.bind(this))
            .share()
            .subscribe(function (response) {
            _this.submittingData = false;
            if (response.rfrID) {
                _this.patchRfrIdValueEverywhere(_this.verificationFormControls, response.rfrID);
            }
            if (response.success) {
                _this.goToStepByName(nextStepName);
                // copy the basics stuff over to the next step
                if (stepOrigin === 'basics') {
                    switch (nextStepName) {
                        case 'individual': {
                            _this.verificationFormControls.individual.controls.first_name.setValue(response.data.first_name);
                            _this.verificationFormControls.individual.controls.email.setValue(response.data.email);
                            break;
                        }
                        case 'corporation': {
                            _this.verificationFormControls.corporation_related_person.controls.first_name.setValue(response.data.first_name);
                            _this.verificationFormControls.corporation_related_person.controls.email.setValue(response.data.email);
                            break;
                        }
                    }
                }
            }
            else {
                if (response.message) {
                    _this.toastr.error(response.message);
                }
            }
        });
    };
    VerificationFormComponent.prototype.validateAllFormFields = function (formGroup) {
        var _this = this;
        Object.keys(formGroup.controls).forEach(function (field) {
            var control = formGroup.get(field); //{3}
            if (control instanceof forms_1.FormControl) {
                control.markAsTouched({ onlySelf: true });
            }
            else if (control instanceof forms_1.FormGroup) {
                _this.validateAllFormFields(control); //{6}
            }
        });
    };
    VerificationFormComponent.prototype.submitIdDocumentUpload = function (event) {
        // Get the file from the onChange event
        var file = event.srcElement.files[0];
        // sort this out - do not rely on the individul control for this important value
        if (!this.verificationFormControls.idDocumentUpload.controls.rfrID.value) {
            throw Error('cant save file because the rfrID value is blank. The form needs to completed in the correct flow order.');
        }
        if (!this.verificationFormControls.idDocumentUpload.valid) {
            console.error('the form is not complete. triggering validation now...');
            this.validateAllFormFields(this.verificationFormControls.idDocumentUpload);
            event.srcElement.value = null; // also remove the value from the file input to allow the onChange event to be be triggered for the next time.
        }
        else {
            this.submitDocumentUpload(file, this.verificationFormControls.idDocumentUpload.controls.rfrID.value, this.verificationFormControls.idDocumentUpload.controls.document_type.value, 'idDocument', event);
        }
    };
    VerificationFormComponent.prototype.submitSelfieUpload = function (event) {
        // Get the file from the onChange event
        var file = event.srcElement.files[0];
        if (!this.verificationFormControls.selfieUpload.controls.rfrID.value) {
            throw Error('cant save file because the rfrID value is blank. The form needs to completed in the correct flow order.');
        }
        if (!this.verificationFormControls.selfieUpload.valid) {
            console.error('the form is not complete. triggering validation now...');
            this.validateAllFormFields(this.verificationFormControls.selfieUpload);
            event.srcElement.value = null; // also remove the value from the file input to allow the onChange event to be be triggered for the next time.
        }
        else {
            this.submitDocumentUpload(file, this.verificationFormControls.selfieUpload.controls.rfrID.value, this.verificationFormControls.selfieUpload.controls.document_type.value, 'selfie', event);
        }
    };
    VerificationFormComponent.prototype.submitDocumentUpload = function (file, rfrId, document_type, fileForType, event) {
        var _this = this;
        var formData = new FormData();
        formData.append('file', file, file.name);
        formData.append('rfrID', rfrId);
        formData.append('entityType', this.entityType);
        formData.append('document_type', document_type);
        var apiPath = this.apiServer.getUrl() + "/api/app/VerificationDocument";
        this.submittingData = true;
        this.http
            .post(apiPath, formData)
            .catch(this.handleHttpError.bind(this))
            .share()
            .subscribe(function (response) {
            _this.submittingData = false;
            event.srcElement.value = null;
            if (response.success) {
                switch (fileForType) {
                    case 'idDocument':
                        _this.goToStepByName('selfieUpload');
                        break;
                    case 'selfie':
                        _this.goToStepByName('status');
                        break;
                }
            }
            else {
                if (response.message) {
                    _this.toastr.error(response.message);
                }
            }
        });
    };
    VerificationFormComponent.prototype.checkStatus = function () {
        var _this = this;
        var apiPath = this.apiServer.getUrl() + "/api/app/CheckUserVerificationStatus";
        this.checkingStatusLoading = true;
        // Submit the form to the generic "add form" server endpoint
        this.http
            .post(apiPath, this.verificationFormControls.status.value)
            .catch(this.handleHttpError.bind(this))
            .share()
            .subscribe(function (response) {
            _this.checkingStatusLoading = false;
            if (response.success) {
                if (response.checkFaceMatchResponse.errors.length || response.checkFaceMatchResponse.data.compare_result !== 'MATCH') {
                    _this.faceMismatch = true;
                    _this.verificationStatus = null;
                    _this.goToStepByName('idDocumentUpload');
                }
                if (response.checkCustomerReportResponse) {
                    _this.verificationStatus = response.checkCustomerReportResponse.approval_status;
                }
            }
            else {
                if (response.message) {
                    _this.toastr.error(response.message);
                }
            }
        });
    };
    VerificationFormComponent.prototype.handleHttpError = function (err) {
        this.log.warn("handleHttpError:", err);
        this.log.warn("handleHttpError:", err.error);
        var errorMsg;
        if (err.error && err.error.artemis) {
            var artemisErrors = err.error.artemis.errors || {};
            var formGroupsToCheck = []; // array to ensure order.
            switch (err.error.entityType) {
                case 'individual': {
                    formGroupsToCheck.push({ name: 'individual' });
                    break;
                }
                case 'corporation': {
                    formGroupsToCheck.push({ name: 'corporation' }, { name: 'corporation_related_person' });
                    break;
                }
                default: console.error("unable to handle artemis error for entityType: " + err.error.entityType);
            }
            fieldLoop: for (var field in artemisErrors) {
                // Check for each field in each formGroupsToCheck in the defined order
                for (var i = 0; i < formGroupsToCheck.length; i++) {
                    var formGroup = formGroupsToCheck[i];
                    console.log("checking for field " + field + " in formGroup " + formGroup.name);
                    // this.log.error('artemis has found an error in the field %s. The error message is: %s', field, artemisErrors[field]);
                    // field the field in question and set it's error message
                    if (this.verificationFormControls[formGroup.name].controls[field]) {
                        formGroupsToCheck[i].found = formGroupsToCheck[i].found || 0;
                        formGroupsToCheck[i].found++;
                        this.verificationFormControls[formGroup.name].controls[field].setErrors({ 'artemisError': artemisErrors[field] });
                        continue fieldLoop;
                    }
                }
            }
            // Show the earliest error step
            for (var j = 0; j < formGroupsToCheck.length; j++) {
                var formGroup = formGroupsToCheck[j];
                if (formGroup && formGroup.found > 0) {
                    this.goToStepByName(formGroup.name);
                    break;
                }
            }
            errorMsg = "Form contains invalid values. Please fix the fields marked in red";
        }
        else if (err.error && err.error.AuthError) {
            errorMsg = err.error.message;
        }
        else if (err.status === 413) {
            errorMsg = "Document uploaded is too large. Please try again with a smaller file";
        }
        else {
            // try to unwrap the error
            try {
                var data = void 0;
                if (typeof err.error === 'string') {
                    data = JSON.parse(err.error);
                }
                else {
                    data = err.error;
                }
                errorMsg = data.message;
                this.log.warn("Application error:", data);
            }
            catch (e) {
                // other error, generic one
                this.log.error("Not an application error:", e);
                errorMsg = "Server is not responding please try again later";
            }
        }
        return Observable_1.Observable.of(__assign({}, err.error, { success: false, message: errorMsg }));
    };
    __decorate([
        core_1.ViewChild("verificationStepper"),
        __metadata("design:type", Object)
    ], VerificationFormComponent.prototype, "verificationStepper", void 0);
    VerificationFormComponent = __decorate([
        core_1.Component({
            selector: "app-verification-form",
            template: __webpack_require__("../../../../../src/app/bigtoken/verificationForm/verificationForm.component.html"),
            styles: [__webpack_require__("../../../../../src/app/bigtoken/verificationForm/verificationForm.component.css")],
            providers: []
        }),
        __metadata("design:paramtypes", [forms_1.FormBuilder,
            ngx_logger_1.NGXLogger,
            router_1.ActivatedRoute,
            toastr_service_1.ToastrService,
            language_service_1.LanguageService,
            http_1.HttpClient,
            material_1.MatIconRegistry,
            platform_browser_1.DomSanitizer])
    ], VerificationFormComponent);
    return VerificationFormComponent;
}());
exports.VerificationFormComponent = VerificationFormComponent;


/***/ }),

/***/ "../../../../../src/app/bigtoken/verificationForm/verificationForm.module.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("../../../core/esm5/core.js");
var common_1 = __webpack_require__("../../../common/esm5/common.js");
var toastr_service_1 = __webpack_require__("../../../../../src/app/common/toastr.service.ts");
var forms_1 = __webpack_require__("../../../forms/esm5/forms.js");
var stepper_1 = __webpack_require__("../../../material/esm5/stepper.es5.js");
var chips_1 = __webpack_require__("../../../material/esm5/chips.es5.js");
var progress_spinner_1 = __webpack_require__("../../../material/esm5/progress-spinner.es5.js");
var autocomplete_1 = __webpack_require__("../../../material/esm5/autocomplete.es5.js");
var verificationForm_component_1 = __webpack_require__("../../../../../src/app/bigtoken/verificationForm/verificationForm.component.ts");
var material_1 = __webpack_require__("../../../material/esm5/material.es5.js");
var VerificationFormModule = /** @class */ (function () {
    function VerificationFormModule() {
    }
    VerificationFormModule = __decorate([
        core_1.NgModule({
            imports: [
                common_1.CommonModule,
                material_1.MatButtonModule,
                material_1.MatIconModule,
                material_1.MatFormFieldModule,
                material_1.MatInputModule,
                material_1.MatSelectModule,
                material_1.MatCheckboxModule,
                material_1.MatProgressBarModule,
                material_1.MatDatepickerModule,
                material_1.MatNativeDateModule,
                forms_1.FormsModule,
                forms_1.ReactiveFormsModule,
                stepper_1.MatStepperModule,
                chips_1.MatChipsModule,
                progress_spinner_1.MatProgressSpinnerModule,
                autocomplete_1.MatAutocompleteModule
            ],
            exports: [verificationForm_component_1.VerificationFormComponent],
            declarations: [verificationForm_component_1.VerificationFormComponent],
            providers: [toastr_service_1.ToastrService]
        })
    ], VerificationFormModule);
    return VerificationFormModule;
}());
exports.VerificationFormModule = VerificationFormModule;


/***/ }),

/***/ "../../../../../src/app/bigtoken/verificationScreen/verificationScreen.component.css":
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__("../../../../css-loader/lib/css-base.js")(false);
// imports


// module
exports.push([module.i, ":host {\r\n    -webkit-box-flex: 1;\r\n        -ms-flex: 1 1 auto;\r\n            flex: 1 1 auto;\r\n    box-sizing: border-box;\r\n    display: -webkit-box;\r\n    display: -ms-flexbox;\r\n    display: flex;\r\n    -webkit-box-orient: vertical;\r\n    -webkit-box-direction: normal;\r\n        -ms-flex-direction: column;\r\n            flex-direction: column;\r\n}\r\n\r\n.container {\r\n    -webkit-box-flex: 1;\r\n        -ms-flex: 1 0 auto;\r\n            flex: 1 0 auto;\r\n}\r\n\r\n.verification-form {\r\n    display: block;\r\n    margin: 2em 0;\r\n}", ""]);

// exports


/*** EXPORTS FROM exports-loader ***/
module.exports = module.exports.toString();

/***/ }),

/***/ "../../../../../src/app/bigtoken/verificationScreen/verificationScreen.component.html":
/***/ (function(module, exports) {

module.exports = "<div class=\"mt-3 container\">\r\n    <div class=\"row\">\r\n        <div class=\"col-12\">\r\n            <h1 i18n>Verify your identity</h1>\r\n        </div>\r\n    </div>\r\n    <app-verification-form class=\"verification-form\"></app-verification-form>\r\n</div>"

/***/ }),

/***/ "../../../../../src/app/bigtoken/verificationScreen/verificationScreen.component.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("../../../core/esm5/core.js");
var router_1 = __webpack_require__("../../../router/esm5/router.js");
var core_2 = __webpack_require__("../../../../@ngx-meta/core/@ngx-meta/core.es5.js");
var ngx_logger_1 = __webpack_require__("../../../../../src/app/lib/ngx-logger/index.ts");
var language_service_1 = __webpack_require__("../../../../../src/app/lib/i18n/language/language.service.ts");
var VerificationScreenComponent = /** @class */ (function () {
    function VerificationScreenComponent(route, meta, log, languageService) {
        this.route = route;
        this.meta = meta;
        this.log = log;
        this.languageService = languageService;
    }
    VerificationScreenComponent.prototype.ngOnInit = function () {
        var metaInfo = this.route.snapshot.data.metaLocale[this.languageService.getLocale() || "en-US"];
        // set the meta
        this.meta.setTitle(metaInfo.title);
        this.meta.setTag("description", metaInfo.description);
        this.meta.setTag("keyword", metaInfo.keyword);
        this.meta.setTag("og:image", metaInfo["og:image"]);
        this.meta.setTag("og:locale", this.languageService.getLocale());
        this.meta.setTag("og:locale:alternate", "en-US,fr-FR,ja-JP,th-TH");
    };
    VerificationScreenComponent = __decorate([
        core_1.Component({
            selector: "app-verification-screen",
            template: __webpack_require__("../../../../../src/app/bigtoken/verificationScreen/verificationScreen.component.html"),
            styles: [__webpack_require__("../../../../../src/app/bigtoken/verificationScreen/verificationScreen.component.css")]
        }),
        __metadata("design:paramtypes", [router_1.ActivatedRoute,
            core_2.MetaService,
            ngx_logger_1.NGXLogger,
            language_service_1.LanguageService])
    ], VerificationScreenComponent);
    return VerificationScreenComponent;
}());
exports.VerificationScreenComponent = VerificationScreenComponent;


/***/ }),

/***/ "../../../../../src/app/bigtoken/verificationScreen/verificationScreen.module.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("../../../core/esm5/core.js");
var common_1 = __webpack_require__("../../../common/esm5/common.js");
var verificationScreen_component_1 = __webpack_require__("../../../../../src/app/bigtoken/verificationScreen/verificationScreen.component.ts");
var verificationForm_module_1 = __webpack_require__("../../../../../src/app/bigtoken/verificationForm/verificationForm.module.ts");
var material_1 = __webpack_require__("../../../material/esm5/material.es5.js");
var router_1 = __webpack_require__("../../../router/esm5/router.js");
var VerificationScreenModule = /** @class */ (function () {
    function VerificationScreenModule() {
    }
    VerificationScreenModule = __decorate([
        core_1.NgModule({
            imports: [
                common_1.CommonModule,
                material_1.MatButtonModule,
                material_1.MatIconModule,
                material_1.MatTabsModule,
                material_1.MatCardModule,
                material_1.MatFormFieldModule,
                material_1.MatInputModule,
                material_1.MatSelectModule,
                material_1.MatProgressBarModule,
                verificationForm_module_1.VerificationFormModule,
                router_1.RouterModule.forChild([
                    {
                        path: "",
                        component: verificationScreen_component_1.VerificationScreenComponent,
                        resolve: {},
                        data: {
                            metaLocale: {
                                "en-US": {
                                    title: "BigToken - Identity Verification",
                                    description: "BigToken KYC/AML Identity Verification for participation in the BigToken ICO"
                                }
                            }
                        }
                    }
                ])
            ],
            declarations: [verificationScreen_component_1.VerificationScreenComponent],
            providers: []
        })
    ], VerificationScreenModule);
    return VerificationScreenModule;
}());
exports.VerificationScreenModule = VerificationScreenModule;


/***/ }),

/***/ "../../../../../src/app/common/toastr.service.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("../../../core/esm5/core.js");
var ToastrService = /** @class */ (function () {
    function ToastrService() {
    }
    ToastrService.prototype.success = function (message, title) {
        toastr.success(message, title);
    };
    ToastrService.prototype.info = function (message, title) {
        toastr.info(message, title);
    };
    ToastrService.prototype.warning = function (message, title) {
        toastr.warning(message, title);
    };
    ToastrService.prototype.error = function (message, title) {
        toastr.error(message, title);
    };
    ToastrService = __decorate([
        core_1.Injectable()
    ], ToastrService);
    return ToastrService;
}());
exports.ToastrService = ToastrService;


/***/ }),

/***/ "../../../../moment/locale recursive ^\\.\\/.*$":
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./af": "../../../../moment/locale/af.js",
	"./af.js": "../../../../moment/locale/af.js",
	"./ar": "../../../../moment/locale/ar.js",
	"./ar-dz": "../../../../moment/locale/ar-dz.js",
	"./ar-dz.js": "../../../../moment/locale/ar-dz.js",
	"./ar-kw": "../../../../moment/locale/ar-kw.js",
	"./ar-kw.js": "../../../../moment/locale/ar-kw.js",
	"./ar-ly": "../../../../moment/locale/ar-ly.js",
	"./ar-ly.js": "../../../../moment/locale/ar-ly.js",
	"./ar-ma": "../../../../moment/locale/ar-ma.js",
	"./ar-ma.js": "../../../../moment/locale/ar-ma.js",
	"./ar-sa": "../../../../moment/locale/ar-sa.js",
	"./ar-sa.js": "../../../../moment/locale/ar-sa.js",
	"./ar-tn": "../../../../moment/locale/ar-tn.js",
	"./ar-tn.js": "../../../../moment/locale/ar-tn.js",
	"./ar.js": "../../../../moment/locale/ar.js",
	"./az": "../../../../moment/locale/az.js",
	"./az.js": "../../../../moment/locale/az.js",
	"./be": "../../../../moment/locale/be.js",
	"./be.js": "../../../../moment/locale/be.js",
	"./bg": "../../../../moment/locale/bg.js",
	"./bg.js": "../../../../moment/locale/bg.js",
	"./bm": "../../../../moment/locale/bm.js",
	"./bm.js": "../../../../moment/locale/bm.js",
	"./bn": "../../../../moment/locale/bn.js",
	"./bn.js": "../../../../moment/locale/bn.js",
	"./bo": "../../../../moment/locale/bo.js",
	"./bo.js": "../../../../moment/locale/bo.js",
	"./br": "../../../../moment/locale/br.js",
	"./br.js": "../../../../moment/locale/br.js",
	"./bs": "../../../../moment/locale/bs.js",
	"./bs.js": "../../../../moment/locale/bs.js",
	"./ca": "../../../../moment/locale/ca.js",
	"./ca.js": "../../../../moment/locale/ca.js",
	"./cs": "../../../../moment/locale/cs.js",
	"./cs.js": "../../../../moment/locale/cs.js",
	"./cv": "../../../../moment/locale/cv.js",
	"./cv.js": "../../../../moment/locale/cv.js",
	"./cy": "../../../../moment/locale/cy.js",
	"./cy.js": "../../../../moment/locale/cy.js",
	"./da": "../../../../moment/locale/da.js",
	"./da.js": "../../../../moment/locale/da.js",
	"./de": "../../../../moment/locale/de.js",
	"./de-at": "../../../../moment/locale/de-at.js",
	"./de-at.js": "../../../../moment/locale/de-at.js",
	"./de-ch": "../../../../moment/locale/de-ch.js",
	"./de-ch.js": "../../../../moment/locale/de-ch.js",
	"./de.js": "../../../../moment/locale/de.js",
	"./dv": "../../../../moment/locale/dv.js",
	"./dv.js": "../../../../moment/locale/dv.js",
	"./el": "../../../../moment/locale/el.js",
	"./el.js": "../../../../moment/locale/el.js",
	"./en-au": "../../../../moment/locale/en-au.js",
	"./en-au.js": "../../../../moment/locale/en-au.js",
	"./en-ca": "../../../../moment/locale/en-ca.js",
	"./en-ca.js": "../../../../moment/locale/en-ca.js",
	"./en-gb": "../../../../moment/locale/en-gb.js",
	"./en-gb.js": "../../../../moment/locale/en-gb.js",
	"./en-ie": "../../../../moment/locale/en-ie.js",
	"./en-ie.js": "../../../../moment/locale/en-ie.js",
	"./en-nz": "../../../../moment/locale/en-nz.js",
	"./en-nz.js": "../../../../moment/locale/en-nz.js",
	"./eo": "../../../../moment/locale/eo.js",
	"./eo.js": "../../../../moment/locale/eo.js",
	"./es": "../../../../moment/locale/es.js",
	"./es-do": "../../../../moment/locale/es-do.js",
	"./es-do.js": "../../../../moment/locale/es-do.js",
	"./es-us": "../../../../moment/locale/es-us.js",
	"./es-us.js": "../../../../moment/locale/es-us.js",
	"./es.js": "../../../../moment/locale/es.js",
	"./et": "../../../../moment/locale/et.js",
	"./et.js": "../../../../moment/locale/et.js",
	"./eu": "../../../../moment/locale/eu.js",
	"./eu.js": "../../../../moment/locale/eu.js",
	"./fa": "../../../../moment/locale/fa.js",
	"./fa.js": "../../../../moment/locale/fa.js",
	"./fi": "../../../../moment/locale/fi.js",
	"./fi.js": "../../../../moment/locale/fi.js",
	"./fo": "../../../../moment/locale/fo.js",
	"./fo.js": "../../../../moment/locale/fo.js",
	"./fr": "../../../../moment/locale/fr.js",
	"./fr-ca": "../../../../moment/locale/fr-ca.js",
	"./fr-ca.js": "../../../../moment/locale/fr-ca.js",
	"./fr-ch": "../../../../moment/locale/fr-ch.js",
	"./fr-ch.js": "../../../../moment/locale/fr-ch.js",
	"./fr.js": "../../../../moment/locale/fr.js",
	"./fy": "../../../../moment/locale/fy.js",
	"./fy.js": "../../../../moment/locale/fy.js",
	"./gd": "../../../../moment/locale/gd.js",
	"./gd.js": "../../../../moment/locale/gd.js",
	"./gl": "../../../../moment/locale/gl.js",
	"./gl.js": "../../../../moment/locale/gl.js",
	"./gom-latn": "../../../../moment/locale/gom-latn.js",
	"./gom-latn.js": "../../../../moment/locale/gom-latn.js",
	"./gu": "../../../../moment/locale/gu.js",
	"./gu.js": "../../../../moment/locale/gu.js",
	"./he": "../../../../moment/locale/he.js",
	"./he.js": "../../../../moment/locale/he.js",
	"./hi": "../../../../moment/locale/hi.js",
	"./hi.js": "../../../../moment/locale/hi.js",
	"./hr": "../../../../moment/locale/hr.js",
	"./hr.js": "../../../../moment/locale/hr.js",
	"./hu": "../../../../moment/locale/hu.js",
	"./hu.js": "../../../../moment/locale/hu.js",
	"./hy-am": "../../../../moment/locale/hy-am.js",
	"./hy-am.js": "../../../../moment/locale/hy-am.js",
	"./id": "../../../../moment/locale/id.js",
	"./id.js": "../../../../moment/locale/id.js",
	"./is": "../../../../moment/locale/is.js",
	"./is.js": "../../../../moment/locale/is.js",
	"./it": "../../../../moment/locale/it.js",
	"./it.js": "../../../../moment/locale/it.js",
	"./ja": "../../../../moment/locale/ja.js",
	"./ja.js": "../../../../moment/locale/ja.js",
	"./jv": "../../../../moment/locale/jv.js",
	"./jv.js": "../../../../moment/locale/jv.js",
	"./ka": "../../../../moment/locale/ka.js",
	"./ka.js": "../../../../moment/locale/ka.js",
	"./kk": "../../../../moment/locale/kk.js",
	"./kk.js": "../../../../moment/locale/kk.js",
	"./km": "../../../../moment/locale/km.js",
	"./km.js": "../../../../moment/locale/km.js",
	"./kn": "../../../../moment/locale/kn.js",
	"./kn.js": "../../../../moment/locale/kn.js",
	"./ko": "../../../../moment/locale/ko.js",
	"./ko.js": "../../../../moment/locale/ko.js",
	"./ky": "../../../../moment/locale/ky.js",
	"./ky.js": "../../../../moment/locale/ky.js",
	"./lb": "../../../../moment/locale/lb.js",
	"./lb.js": "../../../../moment/locale/lb.js",
	"./lo": "../../../../moment/locale/lo.js",
	"./lo.js": "../../../../moment/locale/lo.js",
	"./lt": "../../../../moment/locale/lt.js",
	"./lt.js": "../../../../moment/locale/lt.js",
	"./lv": "../../../../moment/locale/lv.js",
	"./lv.js": "../../../../moment/locale/lv.js",
	"./me": "../../../../moment/locale/me.js",
	"./me.js": "../../../../moment/locale/me.js",
	"./mi": "../../../../moment/locale/mi.js",
	"./mi.js": "../../../../moment/locale/mi.js",
	"./mk": "../../../../moment/locale/mk.js",
	"./mk.js": "../../../../moment/locale/mk.js",
	"./ml": "../../../../moment/locale/ml.js",
	"./ml.js": "../../../../moment/locale/ml.js",
	"./mr": "../../../../moment/locale/mr.js",
	"./mr.js": "../../../../moment/locale/mr.js",
	"./ms": "../../../../moment/locale/ms.js",
	"./ms-my": "../../../../moment/locale/ms-my.js",
	"./ms-my.js": "../../../../moment/locale/ms-my.js",
	"./ms.js": "../../../../moment/locale/ms.js",
	"./mt": "../../../../moment/locale/mt.js",
	"./mt.js": "../../../../moment/locale/mt.js",
	"./my": "../../../../moment/locale/my.js",
	"./my.js": "../../../../moment/locale/my.js",
	"./nb": "../../../../moment/locale/nb.js",
	"./nb.js": "../../../../moment/locale/nb.js",
	"./ne": "../../../../moment/locale/ne.js",
	"./ne.js": "../../../../moment/locale/ne.js",
	"./nl": "../../../../moment/locale/nl.js",
	"./nl-be": "../../../../moment/locale/nl-be.js",
	"./nl-be.js": "../../../../moment/locale/nl-be.js",
	"./nl.js": "../../../../moment/locale/nl.js",
	"./nn": "../../../../moment/locale/nn.js",
	"./nn.js": "../../../../moment/locale/nn.js",
	"./pa-in": "../../../../moment/locale/pa-in.js",
	"./pa-in.js": "../../../../moment/locale/pa-in.js",
	"./pl": "../../../../moment/locale/pl.js",
	"./pl.js": "../../../../moment/locale/pl.js",
	"./pt": "../../../../moment/locale/pt.js",
	"./pt-br": "../../../../moment/locale/pt-br.js",
	"./pt-br.js": "../../../../moment/locale/pt-br.js",
	"./pt.js": "../../../../moment/locale/pt.js",
	"./ro": "../../../../moment/locale/ro.js",
	"./ro.js": "../../../../moment/locale/ro.js",
	"./ru": "../../../../moment/locale/ru.js",
	"./ru.js": "../../../../moment/locale/ru.js",
	"./sd": "../../../../moment/locale/sd.js",
	"./sd.js": "../../../../moment/locale/sd.js",
	"./se": "../../../../moment/locale/se.js",
	"./se.js": "../../../../moment/locale/se.js",
	"./si": "../../../../moment/locale/si.js",
	"./si.js": "../../../../moment/locale/si.js",
	"./sk": "../../../../moment/locale/sk.js",
	"./sk.js": "../../../../moment/locale/sk.js",
	"./sl": "../../../../moment/locale/sl.js",
	"./sl.js": "../../../../moment/locale/sl.js",
	"./sq": "../../../../moment/locale/sq.js",
	"./sq.js": "../../../../moment/locale/sq.js",
	"./sr": "../../../../moment/locale/sr.js",
	"./sr-cyrl": "../../../../moment/locale/sr-cyrl.js",
	"./sr-cyrl.js": "../../../../moment/locale/sr-cyrl.js",
	"./sr.js": "../../../../moment/locale/sr.js",
	"./ss": "../../../../moment/locale/ss.js",
	"./ss.js": "../../../../moment/locale/ss.js",
	"./sv": "../../../../moment/locale/sv.js",
	"./sv.js": "../../../../moment/locale/sv.js",
	"./sw": "../../../../moment/locale/sw.js",
	"./sw.js": "../../../../moment/locale/sw.js",
	"./ta": "../../../../moment/locale/ta.js",
	"./ta.js": "../../../../moment/locale/ta.js",
	"./te": "../../../../moment/locale/te.js",
	"./te.js": "../../../../moment/locale/te.js",
	"./tet": "../../../../moment/locale/tet.js",
	"./tet.js": "../../../../moment/locale/tet.js",
	"./th": "../../../../moment/locale/th.js",
	"./th.js": "../../../../moment/locale/th.js",
	"./tl-ph": "../../../../moment/locale/tl-ph.js",
	"./tl-ph.js": "../../../../moment/locale/tl-ph.js",
	"./tlh": "../../../../moment/locale/tlh.js",
	"./tlh.js": "../../../../moment/locale/tlh.js",
	"./tr": "../../../../moment/locale/tr.js",
	"./tr.js": "../../../../moment/locale/tr.js",
	"./tzl": "../../../../moment/locale/tzl.js",
	"./tzl.js": "../../../../moment/locale/tzl.js",
	"./tzm": "../../../../moment/locale/tzm.js",
	"./tzm-latn": "../../../../moment/locale/tzm-latn.js",
	"./tzm-latn.js": "../../../../moment/locale/tzm-latn.js",
	"./tzm.js": "../../../../moment/locale/tzm.js",
	"./uk": "../../../../moment/locale/uk.js",
	"./uk.js": "../../../../moment/locale/uk.js",
	"./ur": "../../../../moment/locale/ur.js",
	"./ur.js": "../../../../moment/locale/ur.js",
	"./uz": "../../../../moment/locale/uz.js",
	"./uz-latn": "../../../../moment/locale/uz-latn.js",
	"./uz-latn.js": "../../../../moment/locale/uz-latn.js",
	"./uz.js": "../../../../moment/locale/uz.js",
	"./vi": "../../../../moment/locale/vi.js",
	"./vi.js": "../../../../moment/locale/vi.js",
	"./x-pseudo": "../../../../moment/locale/x-pseudo.js",
	"./x-pseudo.js": "../../../../moment/locale/x-pseudo.js",
	"./yo": "../../../../moment/locale/yo.js",
	"./yo.js": "../../../../moment/locale/yo.js",
	"./zh-cn": "../../../../moment/locale/zh-cn.js",
	"./zh-cn.js": "../../../../moment/locale/zh-cn.js",
	"./zh-hk": "../../../../moment/locale/zh-hk.js",
	"./zh-hk.js": "../../../../moment/locale/zh-hk.js",
	"./zh-tw": "../../../../moment/locale/zh-tw.js",
	"./zh-tw.js": "../../../../moment/locale/zh-tw.js"
};
function webpackContext(req) {
	return __webpack_require__(webpackContextResolve(req));
};
function webpackContextResolve(req) {
	var id = map[req];
	if(!(id + 1)) // check for number or string
		throw new Error("Cannot find module '" + req + "'.");
	return id;
};
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = "../../../../moment/locale recursive ^\\.\\/.*$";

/***/ }),

/***/ "../../../../moment/locale/af.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Afrikaans [af]
//! author : Werner Mollentze : https://github.com/wernerm

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var af = moment.defineLocale('af', {
    months : 'Januarie_Februarie_Maart_April_Mei_Junie_Julie_Augustus_September_Oktober_November_Desember'.split('_'),
    monthsShort : 'Jan_Feb_Mrt_Apr_Mei_Jun_Jul_Aug_Sep_Okt_Nov_Des'.split('_'),
    weekdays : 'Sondag_Maandag_Dinsdag_Woensdag_Donderdag_Vrydag_Saterdag'.split('_'),
    weekdaysShort : 'Son_Maa_Din_Woe_Don_Vry_Sat'.split('_'),
    weekdaysMin : 'So_Ma_Di_Wo_Do_Vr_Sa'.split('_'),
    meridiemParse: /vm|nm/i,
    isPM : function (input) {
        return /^nm$/i.test(input);
    },
    meridiem : function (hours, minutes, isLower) {
        if (hours < 12) {
            return isLower ? 'vm' : 'VM';
        } else {
            return isLower ? 'nm' : 'NM';
        }
    },
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd, D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay : '[Vandag om] LT',
        nextDay : '[Môre om] LT',
        nextWeek : 'dddd [om] LT',
        lastDay : '[Gister om] LT',
        lastWeek : '[Laas] dddd [om] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'oor %s',
        past : '%s gelede',
        s : '\'n paar sekondes',
        ss : '%d sekondes',
        m : '\'n minuut',
        mm : '%d minute',
        h : '\'n uur',
        hh : '%d ure',
        d : '\'n dag',
        dd : '%d dae',
        M : '\'n maand',
        MM : '%d maande',
        y : '\'n jaar',
        yy : '%d jaar'
    },
    dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
    ordinal : function (number) {
        return number + ((number === 1 || number === 8 || number >= 20) ? 'ste' : 'de'); // Thanks to Joris Röling : https://github.com/jjupiter
    },
    week : {
        dow : 1, // Maandag is die eerste dag van die week.
        doy : 4  // Die week wat die 4de Januarie bevat is die eerste week van die jaar.
    }
});

return af;

})));


/***/ }),

/***/ "../../../../moment/locale/ar-dz.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Arabic (Algeria) [ar-dz]
//! author : Noureddine LOUAHEDJ : https://github.com/noureddineme

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var arDz = moment.defineLocale('ar-dz', {
    months : 'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
    monthsShort : 'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
    weekdays : 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
    weekdaysShort : 'احد_اثنين_ثلاثاء_اربعاء_خميس_جمعة_سبت'.split('_'),
    weekdaysMin : 'أح_إث_ثلا_أر_خم_جم_سب'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay: '[اليوم على الساعة] LT',
        nextDay: '[غدا على الساعة] LT',
        nextWeek: 'dddd [على الساعة] LT',
        lastDay: '[أمس على الساعة] LT',
        lastWeek: 'dddd [على الساعة] LT',
        sameElse: 'L'
    },
    relativeTime : {
        future : 'في %s',
        past : 'منذ %s',
        s : 'ثوان',
        ss : '%d ثانية',
        m : 'دقيقة',
        mm : '%d دقائق',
        h : 'ساعة',
        hh : '%d ساعات',
        d : 'يوم',
        dd : '%d أيام',
        M : 'شهر',
        MM : '%d أشهر',
        y : 'سنة',
        yy : '%d سنوات'
    },
    week : {
        dow : 0, // Sunday is the first day of the week.
        doy : 4  // The week that contains Jan 1st is the first week of the year.
    }
});

return arDz;

})));


/***/ }),

/***/ "../../../../moment/locale/ar-kw.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Arabic (Kuwait) [ar-kw]
//! author : Nusret Parlak: https://github.com/nusretparlak

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var arKw = moment.defineLocale('ar-kw', {
    months : 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split('_'),
    monthsShort : 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split('_'),
    weekdays : 'الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
    weekdaysShort : 'احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت'.split('_'),
    weekdaysMin : 'ح_ن_ث_ر_خ_ج_س'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay: '[اليوم على الساعة] LT',
        nextDay: '[غدا على الساعة] LT',
        nextWeek: 'dddd [على الساعة] LT',
        lastDay: '[أمس على الساعة] LT',
        lastWeek: 'dddd [على الساعة] LT',
        sameElse: 'L'
    },
    relativeTime : {
        future : 'في %s',
        past : 'منذ %s',
        s : 'ثوان',
        ss : '%d ثانية',
        m : 'دقيقة',
        mm : '%d دقائق',
        h : 'ساعة',
        hh : '%d ساعات',
        d : 'يوم',
        dd : '%d أيام',
        M : 'شهر',
        MM : '%d أشهر',
        y : 'سنة',
        yy : '%d سنوات'
    },
    week : {
        dow : 0, // Sunday is the first day of the week.
        doy : 12  // The week that contains Jan 1st is the first week of the year.
    }
});

return arKw;

})));


/***/ }),

/***/ "../../../../moment/locale/ar-ly.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Arabic (Lybia) [ar-ly]
//! author : Ali Hmer: https://github.com/kikoanis

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var symbolMap = {
    '1': '1',
    '2': '2',
    '3': '3',
    '4': '4',
    '5': '5',
    '6': '6',
    '7': '7',
    '8': '8',
    '9': '9',
    '0': '0'
};
var pluralForm = function (n) {
    return n === 0 ? 0 : n === 1 ? 1 : n === 2 ? 2 : n % 100 >= 3 && n % 100 <= 10 ? 3 : n % 100 >= 11 ? 4 : 5;
};
var plurals = {
    s : ['أقل من ثانية', 'ثانية واحدة', ['ثانيتان', 'ثانيتين'], '%d ثوان', '%d ثانية', '%d ثانية'],
    m : ['أقل من دقيقة', 'دقيقة واحدة', ['دقيقتان', 'دقيقتين'], '%d دقائق', '%d دقيقة', '%d دقيقة'],
    h : ['أقل من ساعة', 'ساعة واحدة', ['ساعتان', 'ساعتين'], '%d ساعات', '%d ساعة', '%d ساعة'],
    d : ['أقل من يوم', 'يوم واحد', ['يومان', 'يومين'], '%d أيام', '%d يومًا', '%d يوم'],
    M : ['أقل من شهر', 'شهر واحد', ['شهران', 'شهرين'], '%d أشهر', '%d شهرا', '%d شهر'],
    y : ['أقل من عام', 'عام واحد', ['عامان', 'عامين'], '%d أعوام', '%d عامًا', '%d عام']
};
var pluralize = function (u) {
    return function (number, withoutSuffix, string, isFuture) {
        var f = pluralForm(number),
            str = plurals[u][pluralForm(number)];
        if (f === 2) {
            str = str[withoutSuffix ? 0 : 1];
        }
        return str.replace(/%d/i, number);
    };
};
var months = [
    'يناير',
    'فبراير',
    'مارس',
    'أبريل',
    'مايو',
    'يونيو',
    'يوليو',
    'أغسطس',
    'سبتمبر',
    'أكتوبر',
    'نوفمبر',
    'ديسمبر'
];

var arLy = moment.defineLocale('ar-ly', {
    months : months,
    monthsShort : months,
    weekdays : 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
    weekdaysShort : 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
    weekdaysMin : 'ح_ن_ث_ر_خ_ج_س'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'D/\u200FM/\u200FYYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd D MMMM YYYY HH:mm'
    },
    meridiemParse: /ص|م/,
    isPM : function (input) {
        return 'م' === input;
    },
    meridiem : function (hour, minute, isLower) {
        if (hour < 12) {
            return 'ص';
        } else {
            return 'م';
        }
    },
    calendar : {
        sameDay: '[اليوم عند الساعة] LT',
        nextDay: '[غدًا عند الساعة] LT',
        nextWeek: 'dddd [عند الساعة] LT',
        lastDay: '[أمس عند الساعة] LT',
        lastWeek: 'dddd [عند الساعة] LT',
        sameElse: 'L'
    },
    relativeTime : {
        future : 'بعد %s',
        past : 'منذ %s',
        s : pluralize('s'),
        ss : pluralize('s'),
        m : pluralize('m'),
        mm : pluralize('m'),
        h : pluralize('h'),
        hh : pluralize('h'),
        d : pluralize('d'),
        dd : pluralize('d'),
        M : pluralize('M'),
        MM : pluralize('M'),
        y : pluralize('y'),
        yy : pluralize('y')
    },
    preparse: function (string) {
        return string.replace(/،/g, ',');
    },
    postformat: function (string) {
        return string.replace(/\d/g, function (match) {
            return symbolMap[match];
        }).replace(/,/g, '،');
    },
    week : {
        dow : 6, // Saturday is the first day of the week.
        doy : 12  // The week that contains Jan 1st is the first week of the year.
    }
});

return arLy;

})));


/***/ }),

/***/ "../../../../moment/locale/ar-ma.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Arabic (Morocco) [ar-ma]
//! author : ElFadili Yassine : https://github.com/ElFadiliY
//! author : Abdel Said : https://github.com/abdelsaid

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var arMa = moment.defineLocale('ar-ma', {
    months : 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split('_'),
    monthsShort : 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split('_'),
    weekdays : 'الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
    weekdaysShort : 'احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت'.split('_'),
    weekdaysMin : 'ح_ن_ث_ر_خ_ج_س'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay: '[اليوم على الساعة] LT',
        nextDay: '[غدا على الساعة] LT',
        nextWeek: 'dddd [على الساعة] LT',
        lastDay: '[أمس على الساعة] LT',
        lastWeek: 'dddd [على الساعة] LT',
        sameElse: 'L'
    },
    relativeTime : {
        future : 'في %s',
        past : 'منذ %s',
        s : 'ثوان',
        ss : '%d ثانية',
        m : 'دقيقة',
        mm : '%d دقائق',
        h : 'ساعة',
        hh : '%d ساعات',
        d : 'يوم',
        dd : '%d أيام',
        M : 'شهر',
        MM : '%d أشهر',
        y : 'سنة',
        yy : '%d سنوات'
    },
    week : {
        dow : 6, // Saturday is the first day of the week.
        doy : 12  // The week that contains Jan 1st is the first week of the year.
    }
});

return arMa;

})));


/***/ }),

/***/ "../../../../moment/locale/ar-sa.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Arabic (Saudi Arabia) [ar-sa]
//! author : Suhail Alkowaileet : https://github.com/xsoh

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var symbolMap = {
    '1': '١',
    '2': '٢',
    '3': '٣',
    '4': '٤',
    '5': '٥',
    '6': '٦',
    '7': '٧',
    '8': '٨',
    '9': '٩',
    '0': '٠'
};
var numberMap = {
    '١': '1',
    '٢': '2',
    '٣': '3',
    '٤': '4',
    '٥': '5',
    '٦': '6',
    '٧': '7',
    '٨': '8',
    '٩': '9',
    '٠': '0'
};

var arSa = moment.defineLocale('ar-sa', {
    months : 'يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
    monthsShort : 'يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
    weekdays : 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
    weekdaysShort : 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
    weekdaysMin : 'ح_ن_ث_ر_خ_ج_س'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd D MMMM YYYY HH:mm'
    },
    meridiemParse: /ص|م/,
    isPM : function (input) {
        return 'م' === input;
    },
    meridiem : function (hour, minute, isLower) {
        if (hour < 12) {
            return 'ص';
        } else {
            return 'م';
        }
    },
    calendar : {
        sameDay: '[اليوم على الساعة] LT',
        nextDay: '[غدا على الساعة] LT',
        nextWeek: 'dddd [على الساعة] LT',
        lastDay: '[أمس على الساعة] LT',
        lastWeek: 'dddd [على الساعة] LT',
        sameElse: 'L'
    },
    relativeTime : {
        future : 'في %s',
        past : 'منذ %s',
        s : 'ثوان',
        ss : '%d ثانية',
        m : 'دقيقة',
        mm : '%d دقائق',
        h : 'ساعة',
        hh : '%d ساعات',
        d : 'يوم',
        dd : '%d أيام',
        M : 'شهر',
        MM : '%d أشهر',
        y : 'سنة',
        yy : '%d سنوات'
    },
    preparse: function (string) {
        return string.replace(/[١٢٣٤٥٦٧٨٩٠]/g, function (match) {
            return numberMap[match];
        }).replace(/،/g, ',');
    },
    postformat: function (string) {
        return string.replace(/\d/g, function (match) {
            return symbolMap[match];
        }).replace(/,/g, '،');
    },
    week : {
        dow : 0, // Sunday is the first day of the week.
        doy : 6  // The week that contains Jan 1st is the first week of the year.
    }
});

return arSa;

})));


/***/ }),

/***/ "../../../../moment/locale/ar-tn.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale  :  Arabic (Tunisia) [ar-tn]
//! author : Nader Toukabri : https://github.com/naderio

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var arTn = moment.defineLocale('ar-tn', {
    months: 'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
    monthsShort: 'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
    weekdays: 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
    weekdaysShort: 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
    weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),
    weekdaysParseExact : true,
    longDateFormat: {
        LT: 'HH:mm',
        LTS: 'HH:mm:ss',
        L: 'DD/MM/YYYY',
        LL: 'D MMMM YYYY',
        LLL: 'D MMMM YYYY HH:mm',
        LLLL: 'dddd D MMMM YYYY HH:mm'
    },
    calendar: {
        sameDay: '[اليوم على الساعة] LT',
        nextDay: '[غدا على الساعة] LT',
        nextWeek: 'dddd [على الساعة] LT',
        lastDay: '[أمس على الساعة] LT',
        lastWeek: 'dddd [على الساعة] LT',
        sameElse: 'L'
    },
    relativeTime: {
        future: 'في %s',
        past: 'منذ %s',
        s: 'ثوان',
        ss : '%d ثانية',
        m: 'دقيقة',
        mm: '%d دقائق',
        h: 'ساعة',
        hh: '%d ساعات',
        d: 'يوم',
        dd: '%d أيام',
        M: 'شهر',
        MM: '%d أشهر',
        y: 'سنة',
        yy: '%d سنوات'
    },
    week: {
        dow: 1, // Monday is the first day of the week.
        doy: 4 // The week that contains Jan 4th is the first week of the year.
    }
});

return arTn;

})));


/***/ }),

/***/ "../../../../moment/locale/ar.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Arabic [ar]
//! author : Abdel Said: https://github.com/abdelsaid
//! author : Ahmed Elkhatib
//! author : forabi https://github.com/forabi

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var symbolMap = {
    '1': '١',
    '2': '٢',
    '3': '٣',
    '4': '٤',
    '5': '٥',
    '6': '٦',
    '7': '٧',
    '8': '٨',
    '9': '٩',
    '0': '٠'
};
var numberMap = {
    '١': '1',
    '٢': '2',
    '٣': '3',
    '٤': '4',
    '٥': '5',
    '٦': '6',
    '٧': '7',
    '٨': '8',
    '٩': '9',
    '٠': '0'
};
var pluralForm = function (n) {
    return n === 0 ? 0 : n === 1 ? 1 : n === 2 ? 2 : n % 100 >= 3 && n % 100 <= 10 ? 3 : n % 100 >= 11 ? 4 : 5;
};
var plurals = {
    s : ['أقل من ثانية', 'ثانية واحدة', ['ثانيتان', 'ثانيتين'], '%d ثوان', '%d ثانية', '%d ثانية'],
    m : ['أقل من دقيقة', 'دقيقة واحدة', ['دقيقتان', 'دقيقتين'], '%d دقائق', '%d دقيقة', '%d دقيقة'],
    h : ['أقل من ساعة', 'ساعة واحدة', ['ساعتان', 'ساعتين'], '%d ساعات', '%d ساعة', '%d ساعة'],
    d : ['أقل من يوم', 'يوم واحد', ['يومان', 'يومين'], '%d أيام', '%d يومًا', '%d يوم'],
    M : ['أقل من شهر', 'شهر واحد', ['شهران', 'شهرين'], '%d أشهر', '%d شهرا', '%d شهر'],
    y : ['أقل من عام', 'عام واحد', ['عامان', 'عامين'], '%d أعوام', '%d عامًا', '%d عام']
};
var pluralize = function (u) {
    return function (number, withoutSuffix, string, isFuture) {
        var f = pluralForm(number),
            str = plurals[u][pluralForm(number)];
        if (f === 2) {
            str = str[withoutSuffix ? 0 : 1];
        }
        return str.replace(/%d/i, number);
    };
};
var months = [
    'يناير',
    'فبراير',
    'مارس',
    'أبريل',
    'مايو',
    'يونيو',
    'يوليو',
    'أغسطس',
    'سبتمبر',
    'أكتوبر',
    'نوفمبر',
    'ديسمبر'
];

var ar = moment.defineLocale('ar', {
    months : months,
    monthsShort : months,
    weekdays : 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
    weekdaysShort : 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
    weekdaysMin : 'ح_ن_ث_ر_خ_ج_س'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'D/\u200FM/\u200FYYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd D MMMM YYYY HH:mm'
    },
    meridiemParse: /ص|م/,
    isPM : function (input) {
        return 'م' === input;
    },
    meridiem : function (hour, minute, isLower) {
        if (hour < 12) {
            return 'ص';
        } else {
            return 'م';
        }
    },
    calendar : {
        sameDay: '[اليوم عند الساعة] LT',
        nextDay: '[غدًا عند الساعة] LT',
        nextWeek: 'dddd [عند الساعة] LT',
        lastDay: '[أمس عند الساعة] LT',
        lastWeek: 'dddd [عند الساعة] LT',
        sameElse: 'L'
    },
    relativeTime : {
        future : 'بعد %s',
        past : 'منذ %s',
        s : pluralize('s'),
        ss : pluralize('s'),
        m : pluralize('m'),
        mm : pluralize('m'),
        h : pluralize('h'),
        hh : pluralize('h'),
        d : pluralize('d'),
        dd : pluralize('d'),
        M : pluralize('M'),
        MM : pluralize('M'),
        y : pluralize('y'),
        yy : pluralize('y')
    },
    preparse: function (string) {
        return string.replace(/[١٢٣٤٥٦٧٨٩٠]/g, function (match) {
            return numberMap[match];
        }).replace(/،/g, ',');
    },
    postformat: function (string) {
        return string.replace(/\d/g, function (match) {
            return symbolMap[match];
        }).replace(/,/g, '،');
    },
    week : {
        dow : 6, // Saturday is the first day of the week.
        doy : 12  // The week that contains Jan 1st is the first week of the year.
    }
});

return ar;

})));


/***/ }),

/***/ "../../../../moment/locale/az.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Azerbaijani [az]
//! author : topchiyev : https://github.com/topchiyev

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var suffixes = {
    1: '-inci',
    5: '-inci',
    8: '-inci',
    70: '-inci',
    80: '-inci',
    2: '-nci',
    7: '-nci',
    20: '-nci',
    50: '-nci',
    3: '-üncü',
    4: '-üncü',
    100: '-üncü',
    6: '-ncı',
    9: '-uncu',
    10: '-uncu',
    30: '-uncu',
    60: '-ıncı',
    90: '-ıncı'
};

var az = moment.defineLocale('az', {
    months : 'yanvar_fevral_mart_aprel_may_iyun_iyul_avqust_sentyabr_oktyabr_noyabr_dekabr'.split('_'),
    monthsShort : 'yan_fev_mar_apr_may_iyn_iyl_avq_sen_okt_noy_dek'.split('_'),
    weekdays : 'Bazar_Bazar ertəsi_Çərşənbə axşamı_Çərşənbə_Cümə axşamı_Cümə_Şənbə'.split('_'),
    weekdaysShort : 'Baz_BzE_ÇAx_Çər_CAx_Cüm_Şən'.split('_'),
    weekdaysMin : 'Bz_BE_ÇA_Çə_CA_Cü_Şə'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD.MM.YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd, D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay : '[bugün saat] LT',
        nextDay : '[sabah saat] LT',
        nextWeek : '[gələn həftə] dddd [saat] LT',
        lastDay : '[dünən] LT',
        lastWeek : '[keçən həftə] dddd [saat] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : '%s sonra',
        past : '%s əvvəl',
        s : 'birneçə saniyyə',
        ss : '%d saniyə',
        m : 'bir dəqiqə',
        mm : '%d dəqiqə',
        h : 'bir saat',
        hh : '%d saat',
        d : 'bir gün',
        dd : '%d gün',
        M : 'bir ay',
        MM : '%d ay',
        y : 'bir il',
        yy : '%d il'
    },
    meridiemParse: /gecə|səhər|gündüz|axşam/,
    isPM : function (input) {
        return /^(gündüz|axşam)$/.test(input);
    },
    meridiem : function (hour, minute, isLower) {
        if (hour < 4) {
            return 'gecə';
        } else if (hour < 12) {
            return 'səhər';
        } else if (hour < 17) {
            return 'gündüz';
        } else {
            return 'axşam';
        }
    },
    dayOfMonthOrdinalParse: /\d{1,2}-(ıncı|inci|nci|üncü|ncı|uncu)/,
    ordinal : function (number) {
        if (number === 0) {  // special case for zero
            return number + '-ıncı';
        }
        var a = number % 10,
            b = number % 100 - a,
            c = number >= 100 ? 100 : null;
        return number + (suffixes[a] || suffixes[b] || suffixes[c]);
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

return az;

})));


/***/ }),

/***/ "../../../../moment/locale/be.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Belarusian [be]
//! author : Dmitry Demidov : https://github.com/demidov91
//! author: Praleska: http://praleska.pro/
//! Author : Menelion Elensúle : https://github.com/Oire

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


function plural(word, num) {
    var forms = word.split('_');
    return num % 10 === 1 && num % 100 !== 11 ? forms[0] : (num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2]);
}
function relativeTimeWithPlural(number, withoutSuffix, key) {
    var format = {
        'ss': withoutSuffix ? 'секунда_секунды_секунд' : 'секунду_секунды_секунд',
        'mm': withoutSuffix ? 'хвіліна_хвіліны_хвілін' : 'хвіліну_хвіліны_хвілін',
        'hh': withoutSuffix ? 'гадзіна_гадзіны_гадзін' : 'гадзіну_гадзіны_гадзін',
        'dd': 'дзень_дні_дзён',
        'MM': 'месяц_месяцы_месяцаў',
        'yy': 'год_гады_гадоў'
    };
    if (key === 'm') {
        return withoutSuffix ? 'хвіліна' : 'хвіліну';
    }
    else if (key === 'h') {
        return withoutSuffix ? 'гадзіна' : 'гадзіну';
    }
    else {
        return number + ' ' + plural(format[key], +number);
    }
}

var be = moment.defineLocale('be', {
    months : {
        format: 'студзеня_лютага_сакавіка_красавіка_траўня_чэрвеня_ліпеня_жніўня_верасня_кастрычніка_лістапада_снежня'.split('_'),
        standalone: 'студзень_люты_сакавік_красавік_травень_чэрвень_ліпень_жнівень_верасень_кастрычнік_лістапад_снежань'.split('_')
    },
    monthsShort : 'студ_лют_сак_крас_трав_чэрв_ліп_жнів_вер_каст_ліст_снеж'.split('_'),
    weekdays : {
        format: 'нядзелю_панядзелак_аўторак_сераду_чацвер_пятніцу_суботу'.split('_'),
        standalone: 'нядзеля_панядзелак_аўторак_серада_чацвер_пятніца_субота'.split('_'),
        isFormat: /\[ ?[Вв] ?(?:мінулую|наступную)? ?\] ?dddd/
    },
    weekdaysShort : 'нд_пн_ат_ср_чц_пт_сб'.split('_'),
    weekdaysMin : 'нд_пн_ат_ср_чц_пт_сб'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD.MM.YYYY',
        LL : 'D MMMM YYYY г.',
        LLL : 'D MMMM YYYY г., HH:mm',
        LLLL : 'dddd, D MMMM YYYY г., HH:mm'
    },
    calendar : {
        sameDay: '[Сёння ў] LT',
        nextDay: '[Заўтра ў] LT',
        lastDay: '[Учора ў] LT',
        nextWeek: function () {
            return '[У] dddd [ў] LT';
        },
        lastWeek: function () {
            switch (this.day()) {
                case 0:
                case 3:
                case 5:
                case 6:
                    return '[У мінулую] dddd [ў] LT';
                case 1:
                case 2:
                case 4:
                    return '[У мінулы] dddd [ў] LT';
            }
        },
        sameElse: 'L'
    },
    relativeTime : {
        future : 'праз %s',
        past : '%s таму',
        s : 'некалькі секунд',
        m : relativeTimeWithPlural,
        mm : relativeTimeWithPlural,
        h : relativeTimeWithPlural,
        hh : relativeTimeWithPlural,
        d : 'дзень',
        dd : relativeTimeWithPlural,
        M : 'месяц',
        MM : relativeTimeWithPlural,
        y : 'год',
        yy : relativeTimeWithPlural
    },
    meridiemParse: /ночы|раніцы|дня|вечара/,
    isPM : function (input) {
        return /^(дня|вечара)$/.test(input);
    },
    meridiem : function (hour, minute, isLower) {
        if (hour < 4) {
            return 'ночы';
        } else if (hour < 12) {
            return 'раніцы';
        } else if (hour < 17) {
            return 'дня';
        } else {
            return 'вечара';
        }
    },
    dayOfMonthOrdinalParse: /\d{1,2}-(і|ы|га)/,
    ordinal: function (number, period) {
        switch (period) {
            case 'M':
            case 'd':
            case 'DDD':
            case 'w':
            case 'W':
                return (number % 10 === 2 || number % 10 === 3) && (number % 100 !== 12 && number % 100 !== 13) ? number + '-і' : number + '-ы';
            case 'D':
                return number + '-га';
            default:
                return number;
        }
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

return be;

})));


/***/ }),

/***/ "../../../../moment/locale/bg.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Bulgarian [bg]
//! author : Krasen Borisov : https://github.com/kraz

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var bg = moment.defineLocale('bg', {
    months : 'януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември'.split('_'),
    monthsShort : 'янр_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек'.split('_'),
    weekdays : 'неделя_понеделник_вторник_сряда_четвъртък_петък_събота'.split('_'),
    weekdaysShort : 'нед_пон_вто_сря_чет_пет_съб'.split('_'),
    weekdaysMin : 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
    longDateFormat : {
        LT : 'H:mm',
        LTS : 'H:mm:ss',
        L : 'D.MM.YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY H:mm',
        LLLL : 'dddd, D MMMM YYYY H:mm'
    },
    calendar : {
        sameDay : '[Днес в] LT',
        nextDay : '[Утре в] LT',
        nextWeek : 'dddd [в] LT',
        lastDay : '[Вчера в] LT',
        lastWeek : function () {
            switch (this.day()) {
                case 0:
                case 3:
                case 6:
                    return '[В изминалата] dddd [в] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                    return '[В изминалия] dddd [в] LT';
            }
        },
        sameElse : 'L'
    },
    relativeTime : {
        future : 'след %s',
        past : 'преди %s',
        s : 'няколко секунди',
        ss : '%d секунди',
        m : 'минута',
        mm : '%d минути',
        h : 'час',
        hh : '%d часа',
        d : 'ден',
        dd : '%d дни',
        M : 'месец',
        MM : '%d месеца',
        y : 'година',
        yy : '%d години'
    },
    dayOfMonthOrdinalParse: /\d{1,2}-(ев|ен|ти|ви|ри|ми)/,
    ordinal : function (number) {
        var lastDigit = number % 10,
            last2Digits = number % 100;
        if (number === 0) {
            return number + '-ев';
        } else if (last2Digits === 0) {
            return number + '-ен';
        } else if (last2Digits > 10 && last2Digits < 20) {
            return number + '-ти';
        } else if (lastDigit === 1) {
            return number + '-ви';
        } else if (lastDigit === 2) {
            return number + '-ри';
        } else if (lastDigit === 7 || lastDigit === 8) {
            return number + '-ми';
        } else {
            return number + '-ти';
        }
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

return bg;

})));


/***/ }),

/***/ "../../../../moment/locale/bm.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Bambara [bm]
//! author : Estelle Comment : https://github.com/estellecomment

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';

// Language contact person : Abdoufata Kane : https://github.com/abdoufata

var bm = moment.defineLocale('bm', {
    months : 'Zanwuyekalo_Fewuruyekalo_Marisikalo_Awirilikalo_Mɛkalo_Zuwɛnkalo_Zuluyekalo_Utikalo_Sɛtanburukalo_ɔkutɔburukalo_Nowanburukalo_Desanburukalo'.split('_'),
    monthsShort : 'Zan_Few_Mar_Awi_Mɛ_Zuw_Zul_Uti_Sɛt_ɔku_Now_Des'.split('_'),
    weekdays : 'Kari_Ntɛnɛn_Tarata_Araba_Alamisa_Juma_Sibiri'.split('_'),
    weekdaysShort : 'Kar_Ntɛ_Tar_Ara_Ala_Jum_Sib'.split('_'),
    weekdaysMin : 'Ka_Nt_Ta_Ar_Al_Ju_Si'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'MMMM [tile] D [san] YYYY',
        LLL : 'MMMM [tile] D [san] YYYY [lɛrɛ] HH:mm',
        LLLL : 'dddd MMMM [tile] D [san] YYYY [lɛrɛ] HH:mm'
    },
    calendar : {
        sameDay : '[Bi lɛrɛ] LT',
        nextDay : '[Sini lɛrɛ] LT',
        nextWeek : 'dddd [don lɛrɛ] LT',
        lastDay : '[Kunu lɛrɛ] LT',
        lastWeek : 'dddd [tɛmɛnen lɛrɛ] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : '%s kɔnɔ',
        past : 'a bɛ %s bɔ',
        s : 'sanga dama dama',
        ss : 'sekondi %d',
        m : 'miniti kelen',
        mm : 'miniti %d',
        h : 'lɛrɛ kelen',
        hh : 'lɛrɛ %d',
        d : 'tile kelen',
        dd : 'tile %d',
        M : 'kalo kelen',
        MM : 'kalo %d',
        y : 'san kelen',
        yy : 'san %d'
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return bm;

})));


/***/ }),

/***/ "../../../../moment/locale/bn.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Bengali [bn]
//! author : Kaushik Gandhi : https://github.com/kaushikgandhi

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var symbolMap = {
    '1': '১',
    '2': '২',
    '3': '৩',
    '4': '৪',
    '5': '৫',
    '6': '৬',
    '7': '৭',
    '8': '৮',
    '9': '৯',
    '0': '০'
};
var numberMap = {
    '১': '1',
    '২': '2',
    '৩': '3',
    '৪': '4',
    '৫': '5',
    '৬': '6',
    '৭': '7',
    '৮': '8',
    '৯': '9',
    '০': '0'
};

var bn = moment.defineLocale('bn', {
    months : 'জানুয়ারী_ফেব্রুয়ারি_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর'.split('_'),
    monthsShort : 'জানু_ফেব_মার্চ_এপ্র_মে_জুন_জুল_আগ_সেপ্ট_অক্টো_নভে_ডিসে'.split('_'),
    weekdays : 'রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পতিবার_শুক্রবার_শনিবার'.split('_'),
    weekdaysShort : 'রবি_সোম_মঙ্গল_বুধ_বৃহস্পতি_শুক্র_শনি'.split('_'),
    weekdaysMin : 'রবি_সোম_মঙ্গ_বুধ_বৃহঃ_শুক্র_শনি'.split('_'),
    longDateFormat : {
        LT : 'A h:mm সময়',
        LTS : 'A h:mm:ss সময়',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY, A h:mm সময়',
        LLLL : 'dddd, D MMMM YYYY, A h:mm সময়'
    },
    calendar : {
        sameDay : '[আজ] LT',
        nextDay : '[আগামীকাল] LT',
        nextWeek : 'dddd, LT',
        lastDay : '[গতকাল] LT',
        lastWeek : '[গত] dddd, LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : '%s পরে',
        past : '%s আগে',
        s : 'কয়েক সেকেন্ড',
        ss : '%d সেকেন্ড',
        m : 'এক মিনিট',
        mm : '%d মিনিট',
        h : 'এক ঘন্টা',
        hh : '%d ঘন্টা',
        d : 'এক দিন',
        dd : '%d দিন',
        M : 'এক মাস',
        MM : '%d মাস',
        y : 'এক বছর',
        yy : '%d বছর'
    },
    preparse: function (string) {
        return string.replace(/[১২৩৪৫৬৭৮৯০]/g, function (match) {
            return numberMap[match];
        });
    },
    postformat: function (string) {
        return string.replace(/\d/g, function (match) {
            return symbolMap[match];
        });
    },
    meridiemParse: /রাত|সকাল|দুপুর|বিকাল|রাত/,
    meridiemHour : function (hour, meridiem) {
        if (hour === 12) {
            hour = 0;
        }
        if ((meridiem === 'রাত' && hour >= 4) ||
                (meridiem === 'দুপুর' && hour < 5) ||
                meridiem === 'বিকাল') {
            return hour + 12;
        } else {
            return hour;
        }
    },
    meridiem : function (hour, minute, isLower) {
        if (hour < 4) {
            return 'রাত';
        } else if (hour < 10) {
            return 'সকাল';
        } else if (hour < 17) {
            return 'দুপুর';
        } else if (hour < 20) {
            return 'বিকাল';
        } else {
            return 'রাত';
        }
    },
    week : {
        dow : 0, // Sunday is the first day of the week.
        doy : 6  // The week that contains Jan 1st is the first week of the year.
    }
});

return bn;

})));


/***/ }),

/***/ "../../../../moment/locale/bo.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Tibetan [bo]
//! author : Thupten N. Chakrishar : https://github.com/vajradog

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var symbolMap = {
    '1': '༡',
    '2': '༢',
    '3': '༣',
    '4': '༤',
    '5': '༥',
    '6': '༦',
    '7': '༧',
    '8': '༨',
    '9': '༩',
    '0': '༠'
};
var numberMap = {
    '༡': '1',
    '༢': '2',
    '༣': '3',
    '༤': '4',
    '༥': '5',
    '༦': '6',
    '༧': '7',
    '༨': '8',
    '༩': '9',
    '༠': '0'
};

var bo = moment.defineLocale('bo', {
    months : 'ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ'.split('_'),
    monthsShort : 'ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ'.split('_'),
    weekdays : 'གཟའ་ཉི་མ་_གཟའ་ཟླ་བ་_གཟའ་མིག་དམར་_གཟའ་ལྷག་པ་_གཟའ་ཕུར་བུ_གཟའ་པ་སངས་_གཟའ་སྤེན་པ་'.split('_'),
    weekdaysShort : 'ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་'.split('_'),
    weekdaysMin : 'ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་'.split('_'),
    longDateFormat : {
        LT : 'A h:mm',
        LTS : 'A h:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY, A h:mm',
        LLLL : 'dddd, D MMMM YYYY, A h:mm'
    },
    calendar : {
        sameDay : '[དི་རིང] LT',
        nextDay : '[སང་ཉིན] LT',
        nextWeek : '[བདུན་ཕྲག་རྗེས་མ], LT',
        lastDay : '[ཁ་སང] LT',
        lastWeek : '[བདུན་ཕྲག་མཐའ་མ] dddd, LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : '%s ལ་',
        past : '%s སྔན་ལ',
        s : 'ལམ་སང',
        ss : '%d སྐར་ཆ།',
        m : 'སྐར་མ་གཅིག',
        mm : '%d སྐར་མ',
        h : 'ཆུ་ཚོད་གཅིག',
        hh : '%d ཆུ་ཚོད',
        d : 'ཉིན་གཅིག',
        dd : '%d ཉིན་',
        M : 'ཟླ་བ་གཅིག',
        MM : '%d ཟླ་བ',
        y : 'ལོ་གཅིག',
        yy : '%d ལོ'
    },
    preparse: function (string) {
        return string.replace(/[༡༢༣༤༥༦༧༨༩༠]/g, function (match) {
            return numberMap[match];
        });
    },
    postformat: function (string) {
        return string.replace(/\d/g, function (match) {
            return symbolMap[match];
        });
    },
    meridiemParse: /མཚན་མོ|ཞོགས་ཀས|ཉིན་གུང|དགོང་དག|མཚན་མོ/,
    meridiemHour : function (hour, meridiem) {
        if (hour === 12) {
            hour = 0;
        }
        if ((meridiem === 'མཚན་མོ' && hour >= 4) ||
                (meridiem === 'ཉིན་གུང' && hour < 5) ||
                meridiem === 'དགོང་དག') {
            return hour + 12;
        } else {
            return hour;
        }
    },
    meridiem : function (hour, minute, isLower) {
        if (hour < 4) {
            return 'མཚན་མོ';
        } else if (hour < 10) {
            return 'ཞོགས་ཀས';
        } else if (hour < 17) {
            return 'ཉིན་གུང';
        } else if (hour < 20) {
            return 'དགོང་དག';
        } else {
            return 'མཚན་མོ';
        }
    },
    week : {
        dow : 0, // Sunday is the first day of the week.
        doy : 6  // The week that contains Jan 1st is the first week of the year.
    }
});

return bo;

})));


/***/ }),

/***/ "../../../../moment/locale/br.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Breton [br]
//! author : Jean-Baptiste Le Duigou : https://github.com/jbleduigou

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


function relativeTimeWithMutation(number, withoutSuffix, key) {
    var format = {
        'mm': 'munutenn',
        'MM': 'miz',
        'dd': 'devezh'
    };
    return number + ' ' + mutation(format[key], number);
}
function specialMutationForYears(number) {
    switch (lastNumber(number)) {
        case 1:
        case 3:
        case 4:
        case 5:
        case 9:
            return number + ' bloaz';
        default:
            return number + ' vloaz';
    }
}
function lastNumber(number) {
    if (number > 9) {
        return lastNumber(number % 10);
    }
    return number;
}
function mutation(text, number) {
    if (number === 2) {
        return softMutation(text);
    }
    return text;
}
function softMutation(text) {
    var mutationTable = {
        'm': 'v',
        'b': 'v',
        'd': 'z'
    };
    if (mutationTable[text.charAt(0)] === undefined) {
        return text;
    }
    return mutationTable[text.charAt(0)] + text.substring(1);
}

var br = moment.defineLocale('br', {
    months : 'Genver_C\'hwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu'.split('_'),
    monthsShort : 'Gen_C\'hwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker'.split('_'),
    weekdays : 'Sul_Lun_Meurzh_Merc\'her_Yaou_Gwener_Sadorn'.split('_'),
    weekdaysShort : 'Sul_Lun_Meu_Mer_Yao_Gwe_Sad'.split('_'),
    weekdaysMin : 'Su_Lu_Me_Mer_Ya_Gw_Sa'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'h[e]mm A',
        LTS : 'h[e]mm:ss A',
        L : 'DD/MM/YYYY',
        LL : 'D [a viz] MMMM YYYY',
        LLL : 'D [a viz] MMMM YYYY h[e]mm A',
        LLLL : 'dddd, D [a viz] MMMM YYYY h[e]mm A'
    },
    calendar : {
        sameDay : '[Hiziv da] LT',
        nextDay : '[Warc\'hoazh da] LT',
        nextWeek : 'dddd [da] LT',
        lastDay : '[Dec\'h da] LT',
        lastWeek : 'dddd [paset da] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'a-benn %s',
        past : '%s \'zo',
        s : 'un nebeud segondennoù',
        ss : '%d eilenn',
        m : 'ur vunutenn',
        mm : relativeTimeWithMutation,
        h : 'un eur',
        hh : '%d eur',
        d : 'un devezh',
        dd : relativeTimeWithMutation,
        M : 'ur miz',
        MM : relativeTimeWithMutation,
        y : 'ur bloaz',
        yy : specialMutationForYears
    },
    dayOfMonthOrdinalParse: /\d{1,2}(añ|vet)/,
    ordinal : function (number) {
        var output = (number === 1) ? 'añ' : 'vet';
        return number + output;
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return br;

})));


/***/ }),

/***/ "../../../../moment/locale/bs.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Bosnian [bs]
//! author : Nedim Cholich : https://github.com/frontyard
//! based on (hr) translation by Bojan Marković

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


function translate(number, withoutSuffix, key) {
    var result = number + ' ';
    switch (key) {
        case 'ss':
            if (number === 1) {
                result += 'sekunda';
            } else if (number === 2 || number === 3 || number === 4) {
                result += 'sekunde';
            } else {
                result += 'sekundi';
            }
            return result;
        case 'm':
            return withoutSuffix ? 'jedna minuta' : 'jedne minute';
        case 'mm':
            if (number === 1) {
                result += 'minuta';
            } else if (number === 2 || number === 3 || number === 4) {
                result += 'minute';
            } else {
                result += 'minuta';
            }
            return result;
        case 'h':
            return withoutSuffix ? 'jedan sat' : 'jednog sata';
        case 'hh':
            if (number === 1) {
                result += 'sat';
            } else if (number === 2 || number === 3 || number === 4) {
                result += 'sata';
            } else {
                result += 'sati';
            }
            return result;
        case 'dd':
            if (number === 1) {
                result += 'dan';
            } else {
                result += 'dana';
            }
            return result;
        case 'MM':
            if (number === 1) {
                result += 'mjesec';
            } else if (number === 2 || number === 3 || number === 4) {
                result += 'mjeseca';
            } else {
                result += 'mjeseci';
            }
            return result;
        case 'yy':
            if (number === 1) {
                result += 'godina';
            } else if (number === 2 || number === 3 || number === 4) {
                result += 'godine';
            } else {
                result += 'godina';
            }
            return result;
    }
}

var bs = moment.defineLocale('bs', {
    months : 'januar_februar_mart_april_maj_juni_juli_august_septembar_oktobar_novembar_decembar'.split('_'),
    monthsShort : 'jan._feb._mar._apr._maj._jun._jul._aug._sep._okt._nov._dec.'.split('_'),
    monthsParseExact: true,
    weekdays : 'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split('_'),
    weekdaysShort : 'ned._pon._uto._sri._čet._pet._sub.'.split('_'),
    weekdaysMin : 'ne_po_ut_sr_če_pe_su'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'H:mm',
        LTS : 'H:mm:ss',
        L : 'DD.MM.YYYY',
        LL : 'D. MMMM YYYY',
        LLL : 'D. MMMM YYYY H:mm',
        LLLL : 'dddd, D. MMMM YYYY H:mm'
    },
    calendar : {
        sameDay  : '[danas u] LT',
        nextDay  : '[sutra u] LT',
        nextWeek : function () {
            switch (this.day()) {
                case 0:
                    return '[u] [nedjelju] [u] LT';
                case 3:
                    return '[u] [srijedu] [u] LT';
                case 6:
                    return '[u] [subotu] [u] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                    return '[u] dddd [u] LT';
            }
        },
        lastDay  : '[jučer u] LT',
        lastWeek : function () {
            switch (this.day()) {
                case 0:
                case 3:
                    return '[prošlu] dddd [u] LT';
                case 6:
                    return '[prošle] [subote] [u] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                    return '[prošli] dddd [u] LT';
            }
        },
        sameElse : 'L'
    },
    relativeTime : {
        future : 'za %s',
        past   : 'prije %s',
        s      : 'par sekundi',
        ss     : translate,
        m      : translate,
        mm     : translate,
        h      : translate,
        hh     : translate,
        d      : 'dan',
        dd     : translate,
        M      : 'mjesec',
        MM     : translate,
        y      : 'godinu',
        yy     : translate
    },
    dayOfMonthOrdinalParse: /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

return bs;

})));


/***/ }),

/***/ "../../../../moment/locale/ca.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Catalan [ca]
//! author : Juan G. Hurtado : https://github.com/juanghurtado

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var ca = moment.defineLocale('ca', {
    months : {
        standalone: 'gener_febrer_març_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre'.split('_'),
        format: 'de gener_de febrer_de març_d\'abril_de maig_de juny_de juliol_d\'agost_de setembre_d\'octubre_de novembre_de desembre'.split('_'),
        isFormat: /D[oD]?(\s)+MMMM/
    },
    monthsShort : 'gen._febr._març_abr._maig_juny_jul._ag._set._oct._nov._des.'.split('_'),
    monthsParseExact : true,
    weekdays : 'diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte'.split('_'),
    weekdaysShort : 'dg._dl._dt._dc._dj._dv._ds.'.split('_'),
    weekdaysMin : 'dg_dl_dt_dc_dj_dv_ds'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'H:mm',
        LTS : 'H:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM [de] YYYY',
        ll : 'D MMM YYYY',
        LLL : 'D MMMM [de] YYYY [a les] H:mm',
        lll : 'D MMM YYYY, H:mm',
        LLLL : 'dddd D MMMM [de] YYYY [a les] H:mm',
        llll : 'ddd D MMM YYYY, H:mm'
    },
    calendar : {
        sameDay : function () {
            return '[avui a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
        },
        nextDay : function () {
            return '[demà a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
        },
        nextWeek : function () {
            return 'dddd [a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
        },
        lastDay : function () {
            return '[ahir a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
        },
        lastWeek : function () {
            return '[el] dddd [passat a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
        },
        sameElse : 'L'
    },
    relativeTime : {
        future : 'd\'aquí %s',
        past : 'fa %s',
        s : 'uns segons',
        ss : '%d segons',
        m : 'un minut',
        mm : '%d minuts',
        h : 'una hora',
        hh : '%d hores',
        d : 'un dia',
        dd : '%d dies',
        M : 'un mes',
        MM : '%d mesos',
        y : 'un any',
        yy : '%d anys'
    },
    dayOfMonthOrdinalParse: /\d{1,2}(r|n|t|è|a)/,
    ordinal : function (number, period) {
        var output = (number === 1) ? 'r' :
            (number === 2) ? 'n' :
            (number === 3) ? 'r' :
            (number === 4) ? 't' : 'è';
        if (period === 'w' || period === 'W') {
            output = 'a';
        }
        return number + output;
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return ca;

})));


/***/ }),

/***/ "../../../../moment/locale/cs.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Czech [cs]
//! author : petrbela : https://github.com/petrbela

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var months = 'leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec'.split('_');
var monthsShort = 'led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro'.split('_');
function plural(n) {
    return (n > 1) && (n < 5) && (~~(n / 10) !== 1);
}
function translate(number, withoutSuffix, key, isFuture) {
    var result = number + ' ';
    switch (key) {
        case 's':  // a few seconds / in a few seconds / a few seconds ago
            return (withoutSuffix || isFuture) ? 'pár sekund' : 'pár sekundami';
        case 'ss': // 9 seconds / in 9 seconds / 9 seconds ago
            if (withoutSuffix || isFuture) {
                return result + (plural(number) ? 'sekundy' : 'sekund');
            } else {
                return result + 'sekundami';
            }
            break;
        case 'm':  // a minute / in a minute / a minute ago
            return withoutSuffix ? 'minuta' : (isFuture ? 'minutu' : 'minutou');
        case 'mm': // 9 minutes / in 9 minutes / 9 minutes ago
            if (withoutSuffix || isFuture) {
                return result + (plural(number) ? 'minuty' : 'minut');
            } else {
                return result + 'minutami';
            }
            break;
        case 'h':  // an hour / in an hour / an hour ago
            return withoutSuffix ? 'hodina' : (isFuture ? 'hodinu' : 'hodinou');
        case 'hh': // 9 hours / in 9 hours / 9 hours ago
            if (withoutSuffix || isFuture) {
                return result + (plural(number) ? 'hodiny' : 'hodin');
            } else {
                return result + 'hodinami';
            }
            break;
        case 'd':  // a day / in a day / a day ago
            return (withoutSuffix || isFuture) ? 'den' : 'dnem';
        case 'dd': // 9 days / in 9 days / 9 days ago
            if (withoutSuffix || isFuture) {
                return result + (plural(number) ? 'dny' : 'dní');
            } else {
                return result + 'dny';
            }
            break;
        case 'M':  // a month / in a month / a month ago
            return (withoutSuffix || isFuture) ? 'měsíc' : 'měsícem';
        case 'MM': // 9 months / in 9 months / 9 months ago
            if (withoutSuffix || isFuture) {
                return result + (plural(number) ? 'měsíce' : 'měsíců');
            } else {
                return result + 'měsíci';
            }
            break;
        case 'y':  // a year / in a year / a year ago
            return (withoutSuffix || isFuture) ? 'rok' : 'rokem';
        case 'yy': // 9 years / in 9 years / 9 years ago
            if (withoutSuffix || isFuture) {
                return result + (plural(number) ? 'roky' : 'let');
            } else {
                return result + 'lety';
            }
            break;
    }
}

var cs = moment.defineLocale('cs', {
    months : months,
    monthsShort : monthsShort,
    monthsParse : (function (months, monthsShort) {
        var i, _monthsParse = [];
        for (i = 0; i < 12; i++) {
            // use custom parser to solve problem with July (červenec)
            _monthsParse[i] = new RegExp('^' + months[i] + '$|^' + monthsShort[i] + '$', 'i');
        }
        return _monthsParse;
    }(months, monthsShort)),
    shortMonthsParse : (function (monthsShort) {
        var i, _shortMonthsParse = [];
        for (i = 0; i < 12; i++) {
            _shortMonthsParse[i] = new RegExp('^' + monthsShort[i] + '$', 'i');
        }
        return _shortMonthsParse;
    }(monthsShort)),
    longMonthsParse : (function (months) {
        var i, _longMonthsParse = [];
        for (i = 0; i < 12; i++) {
            _longMonthsParse[i] = new RegExp('^' + months[i] + '$', 'i');
        }
        return _longMonthsParse;
    }(months)),
    weekdays : 'neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota'.split('_'),
    weekdaysShort : 'ne_po_út_st_čt_pá_so'.split('_'),
    weekdaysMin : 'ne_po_út_st_čt_pá_so'.split('_'),
    longDateFormat : {
        LT: 'H:mm',
        LTS : 'H:mm:ss',
        L : 'DD.MM.YYYY',
        LL : 'D. MMMM YYYY',
        LLL : 'D. MMMM YYYY H:mm',
        LLLL : 'dddd D. MMMM YYYY H:mm',
        l : 'D. M. YYYY'
    },
    calendar : {
        sameDay: '[dnes v] LT',
        nextDay: '[zítra v] LT',
        nextWeek: function () {
            switch (this.day()) {
                case 0:
                    return '[v neděli v] LT';
                case 1:
                case 2:
                    return '[v] dddd [v] LT';
                case 3:
                    return '[ve středu v] LT';
                case 4:
                    return '[ve čtvrtek v] LT';
                case 5:
                    return '[v pátek v] LT';
                case 6:
                    return '[v sobotu v] LT';
            }
        },
        lastDay: '[včera v] LT',
        lastWeek: function () {
            switch (this.day()) {
                case 0:
                    return '[minulou neděli v] LT';
                case 1:
                case 2:
                    return '[minulé] dddd [v] LT';
                case 3:
                    return '[minulou středu v] LT';
                case 4:
                case 5:
                    return '[minulý] dddd [v] LT';
                case 6:
                    return '[minulou sobotu v] LT';
            }
        },
        sameElse: 'L'
    },
    relativeTime : {
        future : 'za %s',
        past : 'před %s',
        s : translate,
        ss : translate,
        m : translate,
        mm : translate,
        h : translate,
        hh : translate,
        d : translate,
        dd : translate,
        M : translate,
        MM : translate,
        y : translate,
        yy : translate
    },
    dayOfMonthOrdinalParse : /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return cs;

})));


/***/ }),

/***/ "../../../../moment/locale/cv.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Chuvash [cv]
//! author : Anatoly Mironov : https://github.com/mirontoli

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var cv = moment.defineLocale('cv', {
    months : 'кӑрлач_нарӑс_пуш_ака_май_ҫӗртме_утӑ_ҫурла_авӑн_юпа_чӳк_раштав'.split('_'),
    monthsShort : 'кӑр_нар_пуш_ака_май_ҫӗр_утӑ_ҫур_авн_юпа_чӳк_раш'.split('_'),
    weekdays : 'вырсарникун_тунтикун_ытларикун_юнкун_кӗҫнерникун_эрнекун_шӑматкун'.split('_'),
    weekdaysShort : 'выр_тун_ытл_юн_кӗҫ_эрн_шӑм'.split('_'),
    weekdaysMin : 'вр_тн_ыт_юн_кҫ_эр_шм'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD-MM-YYYY',
        LL : 'YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ]',
        LLL : 'YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm',
        LLLL : 'dddd, YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm'
    },
    calendar : {
        sameDay: '[Паян] LT [сехетре]',
        nextDay: '[Ыран] LT [сехетре]',
        lastDay: '[Ӗнер] LT [сехетре]',
        nextWeek: '[Ҫитес] dddd LT [сехетре]',
        lastWeek: '[Иртнӗ] dddd LT [сехетре]',
        sameElse: 'L'
    },
    relativeTime : {
        future : function (output) {
            var affix = /сехет$/i.exec(output) ? 'рен' : /ҫул$/i.exec(output) ? 'тан' : 'ран';
            return output + affix;
        },
        past : '%s каялла',
        s : 'пӗр-ик ҫеккунт',
        ss : '%d ҫеккунт',
        m : 'пӗр минут',
        mm : '%d минут',
        h : 'пӗр сехет',
        hh : '%d сехет',
        d : 'пӗр кун',
        dd : '%d кун',
        M : 'пӗр уйӑх',
        MM : '%d уйӑх',
        y : 'пӗр ҫул',
        yy : '%d ҫул'
    },
    dayOfMonthOrdinalParse: /\d{1,2}-мӗш/,
    ordinal : '%d-мӗш',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

return cv;

})));


/***/ }),

/***/ "../../../../moment/locale/cy.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Welsh [cy]
//! author : Robert Allen : https://github.com/robgallen
//! author : https://github.com/ryangreaves

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var cy = moment.defineLocale('cy', {
    months: 'Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr'.split('_'),
    monthsShort: 'Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag'.split('_'),
    weekdays: 'Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn'.split('_'),
    weekdaysShort: 'Sul_Llun_Maw_Mer_Iau_Gwe_Sad'.split('_'),
    weekdaysMin: 'Su_Ll_Ma_Me_Ia_Gw_Sa'.split('_'),
    weekdaysParseExact : true,
    // time formats are the same as en-gb
    longDateFormat: {
        LT: 'HH:mm',
        LTS : 'HH:mm:ss',
        L: 'DD/MM/YYYY',
        LL: 'D MMMM YYYY',
        LLL: 'D MMMM YYYY HH:mm',
        LLLL: 'dddd, D MMMM YYYY HH:mm'
    },
    calendar: {
        sameDay: '[Heddiw am] LT',
        nextDay: '[Yfory am] LT',
        nextWeek: 'dddd [am] LT',
        lastDay: '[Ddoe am] LT',
        lastWeek: 'dddd [diwethaf am] LT',
        sameElse: 'L'
    },
    relativeTime: {
        future: 'mewn %s',
        past: '%s yn ôl',
        s: 'ychydig eiliadau',
        ss: '%d eiliad',
        m: 'munud',
        mm: '%d munud',
        h: 'awr',
        hh: '%d awr',
        d: 'diwrnod',
        dd: '%d diwrnod',
        M: 'mis',
        MM: '%d mis',
        y: 'blwyddyn',
        yy: '%d flynedd'
    },
    dayOfMonthOrdinalParse: /\d{1,2}(fed|ain|af|il|ydd|ed|eg)/,
    // traditional ordinal numbers above 31 are not commonly used in colloquial Welsh
    ordinal: function (number) {
        var b = number,
            output = '',
            lookup = [
                '', 'af', 'il', 'ydd', 'ydd', 'ed', 'ed', 'ed', 'fed', 'fed', 'fed', // 1af to 10fed
                'eg', 'fed', 'eg', 'eg', 'fed', 'eg', 'eg', 'fed', 'eg', 'fed' // 11eg to 20fed
            ];
        if (b > 20) {
            if (b === 40 || b === 50 || b === 60 || b === 80 || b === 100) {
                output = 'fed'; // not 30ain, 70ain or 90ain
            } else {
                output = 'ain';
            }
        } else if (b > 0) {
            output = lookup[b];
        }
        return number + output;
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return cy;

})));


/***/ }),

/***/ "../../../../moment/locale/da.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Danish [da]
//! author : Ulrik Nielsen : https://github.com/mrbase

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var da = moment.defineLocale('da', {
    months : 'januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december'.split('_'),
    monthsShort : 'jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec'.split('_'),
    weekdays : 'søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag'.split('_'),
    weekdaysShort : 'søn_man_tir_ons_tor_fre_lør'.split('_'),
    weekdaysMin : 'sø_ma_ti_on_to_fr_lø'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD.MM.YYYY',
        LL : 'D. MMMM YYYY',
        LLL : 'D. MMMM YYYY HH:mm',
        LLLL : 'dddd [d.] D. MMMM YYYY [kl.] HH:mm'
    },
    calendar : {
        sameDay : '[i dag kl.] LT',
        nextDay : '[i morgen kl.] LT',
        nextWeek : 'på dddd [kl.] LT',
        lastDay : '[i går kl.] LT',
        lastWeek : '[i] dddd[s kl.] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'om %s',
        past : '%s siden',
        s : 'få sekunder',
        ss : '%d sekunder',
        m : 'et minut',
        mm : '%d minutter',
        h : 'en time',
        hh : '%d timer',
        d : 'en dag',
        dd : '%d dage',
        M : 'en måned',
        MM : '%d måneder',
        y : 'et år',
        yy : '%d år'
    },
    dayOfMonthOrdinalParse: /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return da;

})));


/***/ }),

/***/ "../../../../moment/locale/de-at.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : German (Austria) [de-at]
//! author : lluchs : https://github.com/lluchs
//! author: Menelion Elensúle: https://github.com/Oire
//! author : Martin Groller : https://github.com/MadMG
//! author : Mikolaj Dadela : https://github.com/mik01aj

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


function processRelativeTime(number, withoutSuffix, key, isFuture) {
    var format = {
        'm': ['eine Minute', 'einer Minute'],
        'h': ['eine Stunde', 'einer Stunde'],
        'd': ['ein Tag', 'einem Tag'],
        'dd': [number + ' Tage', number + ' Tagen'],
        'M': ['ein Monat', 'einem Monat'],
        'MM': [number + ' Monate', number + ' Monaten'],
        'y': ['ein Jahr', 'einem Jahr'],
        'yy': [number + ' Jahre', number + ' Jahren']
    };
    return withoutSuffix ? format[key][0] : format[key][1];
}

var deAt = moment.defineLocale('de-at', {
    months : 'Jänner_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
    monthsShort : 'Jän._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.'.split('_'),
    monthsParseExact : true,
    weekdays : 'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split('_'),
    weekdaysShort : 'So._Mo._Di._Mi._Do._Fr._Sa.'.split('_'),
    weekdaysMin : 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT: 'HH:mm',
        LTS: 'HH:mm:ss',
        L : 'DD.MM.YYYY',
        LL : 'D. MMMM YYYY',
        LLL : 'D. MMMM YYYY HH:mm',
        LLLL : 'dddd, D. MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay: '[heute um] LT [Uhr]',
        sameElse: 'L',
        nextDay: '[morgen um] LT [Uhr]',
        nextWeek: 'dddd [um] LT [Uhr]',
        lastDay: '[gestern um] LT [Uhr]',
        lastWeek: '[letzten] dddd [um] LT [Uhr]'
    },
    relativeTime : {
        future : 'in %s',
        past : 'vor %s',
        s : 'ein paar Sekunden',
        ss : '%d Sekunden',
        m : processRelativeTime,
        mm : '%d Minuten',
        h : processRelativeTime,
        hh : '%d Stunden',
        d : processRelativeTime,
        dd : processRelativeTime,
        M : processRelativeTime,
        MM : processRelativeTime,
        y : processRelativeTime,
        yy : processRelativeTime
    },
    dayOfMonthOrdinalParse: /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return deAt;

})));


/***/ }),

/***/ "../../../../moment/locale/de-ch.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : German (Switzerland) [de-ch]
//! author : sschueller : https://github.com/sschueller

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


// based on: https://www.bk.admin.ch/dokumentation/sprachen/04915/05016/index.html?lang=de#

function processRelativeTime(number, withoutSuffix, key, isFuture) {
    var format = {
        'm': ['eine Minute', 'einer Minute'],
        'h': ['eine Stunde', 'einer Stunde'],
        'd': ['ein Tag', 'einem Tag'],
        'dd': [number + ' Tage', number + ' Tagen'],
        'M': ['ein Monat', 'einem Monat'],
        'MM': [number + ' Monate', number + ' Monaten'],
        'y': ['ein Jahr', 'einem Jahr'],
        'yy': [number + ' Jahre', number + ' Jahren']
    };
    return withoutSuffix ? format[key][0] : format[key][1];
}

var deCh = moment.defineLocale('de-ch', {
    months : 'Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
    monthsShort : 'Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.'.split('_'),
    monthsParseExact : true,
    weekdays : 'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split('_'),
    weekdaysShort : 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
    weekdaysMin : 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT: 'HH:mm',
        LTS: 'HH:mm:ss',
        L : 'DD.MM.YYYY',
        LL : 'D. MMMM YYYY',
        LLL : 'D. MMMM YYYY HH:mm',
        LLLL : 'dddd, D. MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay: '[heute um] LT [Uhr]',
        sameElse: 'L',
        nextDay: '[morgen um] LT [Uhr]',
        nextWeek: 'dddd [um] LT [Uhr]',
        lastDay: '[gestern um] LT [Uhr]',
        lastWeek: '[letzten] dddd [um] LT [Uhr]'
    },
    relativeTime : {
        future : 'in %s',
        past : 'vor %s',
        s : 'ein paar Sekunden',
        ss : '%d Sekunden',
        m : processRelativeTime,
        mm : '%d Minuten',
        h : processRelativeTime,
        hh : '%d Stunden',
        d : processRelativeTime,
        dd : processRelativeTime,
        M : processRelativeTime,
        MM : processRelativeTime,
        y : processRelativeTime,
        yy : processRelativeTime
    },
    dayOfMonthOrdinalParse: /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return deCh;

})));


/***/ }),

/***/ "../../../../moment/locale/de.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : German [de]
//! author : lluchs : https://github.com/lluchs
//! author: Menelion Elensúle: https://github.com/Oire
//! author : Mikolaj Dadela : https://github.com/mik01aj

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


function processRelativeTime(number, withoutSuffix, key, isFuture) {
    var format = {
        'm': ['eine Minute', 'einer Minute'],
        'h': ['eine Stunde', 'einer Stunde'],
        'd': ['ein Tag', 'einem Tag'],
        'dd': [number + ' Tage', number + ' Tagen'],
        'M': ['ein Monat', 'einem Monat'],
        'MM': [number + ' Monate', number + ' Monaten'],
        'y': ['ein Jahr', 'einem Jahr'],
        'yy': [number + ' Jahre', number + ' Jahren']
    };
    return withoutSuffix ? format[key][0] : format[key][1];
}

var de = moment.defineLocale('de', {
    months : 'Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
    monthsShort : 'Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.'.split('_'),
    monthsParseExact : true,
    weekdays : 'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split('_'),
    weekdaysShort : 'So._Mo._Di._Mi._Do._Fr._Sa.'.split('_'),
    weekdaysMin : 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT: 'HH:mm',
        LTS: 'HH:mm:ss',
        L : 'DD.MM.YYYY',
        LL : 'D. MMMM YYYY',
        LLL : 'D. MMMM YYYY HH:mm',
        LLLL : 'dddd, D. MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay: '[heute um] LT [Uhr]',
        sameElse: 'L',
        nextDay: '[morgen um] LT [Uhr]',
        nextWeek: 'dddd [um] LT [Uhr]',
        lastDay: '[gestern um] LT [Uhr]',
        lastWeek: '[letzten] dddd [um] LT [Uhr]'
    },
    relativeTime : {
        future : 'in %s',
        past : 'vor %s',
        s : 'ein paar Sekunden',
        ss : '%d Sekunden',
        m : processRelativeTime,
        mm : '%d Minuten',
        h : processRelativeTime,
        hh : '%d Stunden',
        d : processRelativeTime,
        dd : processRelativeTime,
        M : processRelativeTime,
        MM : processRelativeTime,
        y : processRelativeTime,
        yy : processRelativeTime
    },
    dayOfMonthOrdinalParse: /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return de;

})));


/***/ }),

/***/ "../../../../moment/locale/dv.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Maldivian [dv]
//! author : Jawish Hameed : https://github.com/jawish

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var months = [
    'ޖެނުއަރީ',
    'ފެބްރުއަރީ',
    'މާރިޗު',
    'އޭޕްރީލު',
    'މޭ',
    'ޖޫން',
    'ޖުލައި',
    'އޯގަސްޓު',
    'ސެޕްޓެމްބަރު',
    'އޮކްޓޯބަރު',
    'ނޮވެމްބަރު',
    'ޑިސެމްބަރު'
];
var weekdays = [
    'އާދިއްތަ',
    'ހޯމަ',
    'އަންގާރަ',
    'ބުދަ',
    'ބުރާސްފަތި',
    'ހުކުރު',
    'ހޮނިހިރު'
];

var dv = moment.defineLocale('dv', {
    months : months,
    monthsShort : months,
    weekdays : weekdays,
    weekdaysShort : weekdays,
    weekdaysMin : 'އާދި_ހޯމަ_އަން_ބުދަ_ބުރާ_ހުކު_ހޮނި'.split('_'),
    longDateFormat : {

        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'D/M/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd D MMMM YYYY HH:mm'
    },
    meridiemParse: /މކ|މފ/,
    isPM : function (input) {
        return 'މފ' === input;
    },
    meridiem : function (hour, minute, isLower) {
        if (hour < 12) {
            return 'މކ';
        } else {
            return 'މފ';
        }
    },
    calendar : {
        sameDay : '[މިއަދު] LT',
        nextDay : '[މާދަމާ] LT',
        nextWeek : 'dddd LT',
        lastDay : '[އިއްޔެ] LT',
        lastWeek : '[ފާއިތުވި] dddd LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'ތެރޭގައި %s',
        past : 'ކުރިން %s',
        s : 'ސިކުންތުކޮޅެއް',
        ss : 'd% ސިކުންތު',
        m : 'މިނިޓެއް',
        mm : 'މިނިޓު %d',
        h : 'ގަޑިއިރެއް',
        hh : 'ގަޑިއިރު %d',
        d : 'ދުވަހެއް',
        dd : 'ދުވަސް %d',
        M : 'މަހެއް',
        MM : 'މަސް %d',
        y : 'އަހަރެއް',
        yy : 'އަހަރު %d'
    },
    preparse: function (string) {
        return string.replace(/،/g, ',');
    },
    postformat: function (string) {
        return string.replace(/,/g, '،');
    },
    week : {
        dow : 7,  // Sunday is the first day of the week.
        doy : 12  // The week that contains Jan 1st is the first week of the year.
    }
});

return dv;

})));


/***/ }),

/***/ "../../../../moment/locale/el.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Greek [el]
//! author : Aggelos Karalias : https://github.com/mehiel

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';

function isFunction(input) {
    return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
}


var el = moment.defineLocale('el', {
    monthsNominativeEl : 'Ιανουάριος_Φεβρουάριος_Μάρτιος_Απρίλιος_Μάιος_Ιούνιος_Ιούλιος_Αύγουστος_Σεπτέμβριος_Οκτώβριος_Νοέμβριος_Δεκέμβριος'.split('_'),
    monthsGenitiveEl : 'Ιανουαρίου_Φεβρουαρίου_Μαρτίου_Απριλίου_Μαΐου_Ιουνίου_Ιουλίου_Αυγούστου_Σεπτεμβρίου_Οκτωβρίου_Νοεμβρίου_Δεκεμβρίου'.split('_'),
    months : function (momentToFormat, format) {
        if (!momentToFormat) {
            return this._monthsNominativeEl;
        } else if (typeof format === 'string' && /D/.test(format.substring(0, format.indexOf('MMMM')))) { // if there is a day number before 'MMMM'
            return this._monthsGenitiveEl[momentToFormat.month()];
        } else {
            return this._monthsNominativeEl[momentToFormat.month()];
        }
    },
    monthsShort : 'Ιαν_Φεβ_Μαρ_Απρ_Μαϊ_Ιουν_Ιουλ_Αυγ_Σεπ_Οκτ_Νοε_Δεκ'.split('_'),
    weekdays : 'Κυριακή_Δευτέρα_Τρίτη_Τετάρτη_Πέμπτη_Παρασκευή_Σάββατο'.split('_'),
    weekdaysShort : 'Κυρ_Δευ_Τρι_Τετ_Πεμ_Παρ_Σαβ'.split('_'),
    weekdaysMin : 'Κυ_Δε_Τρ_Τε_Πε_Πα_Σα'.split('_'),
    meridiem : function (hours, minutes, isLower) {
        if (hours > 11) {
            return isLower ? 'μμ' : 'ΜΜ';
        } else {
            return isLower ? 'πμ' : 'ΠΜ';
        }
    },
    isPM : function (input) {
        return ((input + '').toLowerCase()[0] === 'μ');
    },
    meridiemParse : /[ΠΜ]\.?Μ?\.?/i,
    longDateFormat : {
        LT : 'h:mm A',
        LTS : 'h:mm:ss A',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY h:mm A',
        LLLL : 'dddd, D MMMM YYYY h:mm A'
    },
    calendarEl : {
        sameDay : '[Σήμερα {}] LT',
        nextDay : '[Αύριο {}] LT',
        nextWeek : 'dddd [{}] LT',
        lastDay : '[Χθες {}] LT',
        lastWeek : function () {
            switch (this.day()) {
                case 6:
                    return '[το προηγούμενο] dddd [{}] LT';
                default:
                    return '[την προηγούμενη] dddd [{}] LT';
            }
        },
        sameElse : 'L'
    },
    calendar : function (key, mom) {
        var output = this._calendarEl[key],
            hours = mom && mom.hours();
        if (isFunction(output)) {
            output = output.apply(mom);
        }
        return output.replace('{}', (hours % 12 === 1 ? 'στη' : 'στις'));
    },
    relativeTime : {
        future : 'σε %s',
        past : '%s πριν',
        s : 'λίγα δευτερόλεπτα',
        ss : '%d δευτερόλεπτα',
        m : 'ένα λεπτό',
        mm : '%d λεπτά',
        h : 'μία ώρα',
        hh : '%d ώρες',
        d : 'μία μέρα',
        dd : '%d μέρες',
        M : 'ένας μήνας',
        MM : '%d μήνες',
        y : 'ένας χρόνος',
        yy : '%d χρόνια'
    },
    dayOfMonthOrdinalParse: /\d{1,2}η/,
    ordinal: '%dη',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4st is the first week of the year.
    }
});

return el;

})));


/***/ }),

/***/ "../../../../moment/locale/en-au.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : English (Australia) [en-au]
//! author : Jared Morse : https://github.com/jarcoal

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var enAu = moment.defineLocale('en-au', {
    months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
    monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
    weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
    weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
    weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
    longDateFormat : {
        LT : 'h:mm A',
        LTS : 'h:mm:ss A',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY h:mm A',
        LLLL : 'dddd, D MMMM YYYY h:mm A'
    },
    calendar : {
        sameDay : '[Today at] LT',
        nextDay : '[Tomorrow at] LT',
        nextWeek : 'dddd [at] LT',
        lastDay : '[Yesterday at] LT',
        lastWeek : '[Last] dddd [at] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'in %s',
        past : '%s ago',
        s : 'a few seconds',
        ss : '%d seconds',
        m : 'a minute',
        mm : '%d minutes',
        h : 'an hour',
        hh : '%d hours',
        d : 'a day',
        dd : '%d days',
        M : 'a month',
        MM : '%d months',
        y : 'a year',
        yy : '%d years'
    },
    dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
    ordinal : function (number) {
        var b = number % 10,
            output = (~~(number % 100 / 10) === 1) ? 'th' :
            (b === 1) ? 'st' :
            (b === 2) ? 'nd' :
            (b === 3) ? 'rd' : 'th';
        return number + output;
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return enAu;

})));


/***/ }),

/***/ "../../../../moment/locale/en-ca.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : English (Canada) [en-ca]
//! author : Jonathan Abourbih : https://github.com/jonbca

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var enCa = moment.defineLocale('en-ca', {
    months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
    monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
    weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
    weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
    weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
    longDateFormat : {
        LT : 'h:mm A',
        LTS : 'h:mm:ss A',
        L : 'YYYY-MM-DD',
        LL : 'MMMM D, YYYY',
        LLL : 'MMMM D, YYYY h:mm A',
        LLLL : 'dddd, MMMM D, YYYY h:mm A'
    },
    calendar : {
        sameDay : '[Today at] LT',
        nextDay : '[Tomorrow at] LT',
        nextWeek : 'dddd [at] LT',
        lastDay : '[Yesterday at] LT',
        lastWeek : '[Last] dddd [at] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'in %s',
        past : '%s ago',
        s : 'a few seconds',
        ss : '%d seconds',
        m : 'a minute',
        mm : '%d minutes',
        h : 'an hour',
        hh : '%d hours',
        d : 'a day',
        dd : '%d days',
        M : 'a month',
        MM : '%d months',
        y : 'a year',
        yy : '%d years'
    },
    dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
    ordinal : function (number) {
        var b = number % 10,
            output = (~~(number % 100 / 10) === 1) ? 'th' :
            (b === 1) ? 'st' :
            (b === 2) ? 'nd' :
            (b === 3) ? 'rd' : 'th';
        return number + output;
    }
});

return enCa;

})));


/***/ }),

/***/ "../../../../moment/locale/en-gb.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : English (United Kingdom) [en-gb]
//! author : Chris Gedrim : https://github.com/chrisgedrim

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var enGb = moment.defineLocale('en-gb', {
    months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
    monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
    weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
    weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
    weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd, D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay : '[Today at] LT',
        nextDay : '[Tomorrow at] LT',
        nextWeek : 'dddd [at] LT',
        lastDay : '[Yesterday at] LT',
        lastWeek : '[Last] dddd [at] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'in %s',
        past : '%s ago',
        s : 'a few seconds',
        ss : '%d seconds',
        m : 'a minute',
        mm : '%d minutes',
        h : 'an hour',
        hh : '%d hours',
        d : 'a day',
        dd : '%d days',
        M : 'a month',
        MM : '%d months',
        y : 'a year',
        yy : '%d years'
    },
    dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
    ordinal : function (number) {
        var b = number % 10,
            output = (~~(number % 100 / 10) === 1) ? 'th' :
            (b === 1) ? 'st' :
            (b === 2) ? 'nd' :
            (b === 3) ? 'rd' : 'th';
        return number + output;
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return enGb;

})));


/***/ }),

/***/ "../../../../moment/locale/en-ie.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : English (Ireland) [en-ie]
//! author : Chris Cartlidge : https://github.com/chriscartlidge

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var enIe = moment.defineLocale('en-ie', {
    months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
    monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
    weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
    weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
    weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD-MM-YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay : '[Today at] LT',
        nextDay : '[Tomorrow at] LT',
        nextWeek : 'dddd [at] LT',
        lastDay : '[Yesterday at] LT',
        lastWeek : '[Last] dddd [at] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'in %s',
        past : '%s ago',
        s : 'a few seconds',
        ss : '%d seconds',
        m : 'a minute',
        mm : '%d minutes',
        h : 'an hour',
        hh : '%d hours',
        d : 'a day',
        dd : '%d days',
        M : 'a month',
        MM : '%d months',
        y : 'a year',
        yy : '%d years'
    },
    dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
    ordinal : function (number) {
        var b = number % 10,
            output = (~~(number % 100 / 10) === 1) ? 'th' :
            (b === 1) ? 'st' :
            (b === 2) ? 'nd' :
            (b === 3) ? 'rd' : 'th';
        return number + output;
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return enIe;

})));


/***/ }),

/***/ "../../../../moment/locale/en-nz.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : English (New Zealand) [en-nz]
//! author : Luke McGregor : https://github.com/lukemcgregor

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var enNz = moment.defineLocale('en-nz', {
    months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
    monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
    weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
    weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
    weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
    longDateFormat : {
        LT : 'h:mm A',
        LTS : 'h:mm:ss A',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY h:mm A',
        LLLL : 'dddd, D MMMM YYYY h:mm A'
    },
    calendar : {
        sameDay : '[Today at] LT',
        nextDay : '[Tomorrow at] LT',
        nextWeek : 'dddd [at] LT',
        lastDay : '[Yesterday at] LT',
        lastWeek : '[Last] dddd [at] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'in %s',
        past : '%s ago',
        s : 'a few seconds',
        ss : '%d seconds',
        m : 'a minute',
        mm : '%d minutes',
        h : 'an hour',
        hh : '%d hours',
        d : 'a day',
        dd : '%d days',
        M : 'a month',
        MM : '%d months',
        y : 'a year',
        yy : '%d years'
    },
    dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
    ordinal : function (number) {
        var b = number % 10,
            output = (~~(number % 100 / 10) === 1) ? 'th' :
            (b === 1) ? 'st' :
            (b === 2) ? 'nd' :
            (b === 3) ? 'rd' : 'th';
        return number + output;
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return enNz;

})));


/***/ }),

/***/ "../../../../moment/locale/eo.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Esperanto [eo]
//! author : Colin Dean : https://github.com/colindean
//! author : Mia Nordentoft Imperatori : https://github.com/miestasmia
//! comment : miestasmia corrected the translation by colindean

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var eo = moment.defineLocale('eo', {
    months : 'januaro_februaro_marto_aprilo_majo_junio_julio_aŭgusto_septembro_oktobro_novembro_decembro'.split('_'),
    monthsShort : 'jan_feb_mar_apr_maj_jun_jul_aŭg_sep_okt_nov_dec'.split('_'),
    weekdays : 'dimanĉo_lundo_mardo_merkredo_ĵaŭdo_vendredo_sabato'.split('_'),
    weekdaysShort : 'dim_lun_mard_merk_ĵaŭ_ven_sab'.split('_'),
    weekdaysMin : 'di_lu_ma_me_ĵa_ve_sa'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'YYYY-MM-DD',
        LL : 'D[-a de] MMMM, YYYY',
        LLL : 'D[-a de] MMMM, YYYY HH:mm',
        LLLL : 'dddd, [la] D[-a de] MMMM, YYYY HH:mm'
    },
    meridiemParse: /[ap]\.t\.m/i,
    isPM: function (input) {
        return input.charAt(0).toLowerCase() === 'p';
    },
    meridiem : function (hours, minutes, isLower) {
        if (hours > 11) {
            return isLower ? 'p.t.m.' : 'P.T.M.';
        } else {
            return isLower ? 'a.t.m.' : 'A.T.M.';
        }
    },
    calendar : {
        sameDay : '[Hodiaŭ je] LT',
        nextDay : '[Morgaŭ je] LT',
        nextWeek : 'dddd [je] LT',
        lastDay : '[Hieraŭ je] LT',
        lastWeek : '[pasinta] dddd [je] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'post %s',
        past : 'antaŭ %s',
        s : 'sekundoj',
        ss : '%d sekundoj',
        m : 'minuto',
        mm : '%d minutoj',
        h : 'horo',
        hh : '%d horoj',
        d : 'tago',//ne 'diurno', ĉar estas uzita por proksimumo
        dd : '%d tagoj',
        M : 'monato',
        MM : '%d monatoj',
        y : 'jaro',
        yy : '%d jaroj'
    },
    dayOfMonthOrdinalParse: /\d{1,2}a/,
    ordinal : '%da',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

return eo;

})));


/***/ }),

/***/ "../../../../moment/locale/es-do.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Spanish (Dominican Republic) [es-do]

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var monthsShortDot = 'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split('_');
var monthsShort = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_');

var monthsParse = [/^ene/i, /^feb/i, /^mar/i, /^abr/i, /^may/i, /^jun/i, /^jul/i, /^ago/i, /^sep/i, /^oct/i, /^nov/i, /^dic/i];
var monthsRegex = /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;

var esDo = moment.defineLocale('es-do', {
    months : 'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split('_'),
    monthsShort : function (m, format) {
        if (!m) {
            return monthsShortDot;
        } else if (/-MMM-/.test(format)) {
            return monthsShort[m.month()];
        } else {
            return monthsShortDot[m.month()];
        }
    },
    monthsRegex: monthsRegex,
    monthsShortRegex: monthsRegex,
    monthsStrictRegex: /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,
    monthsShortStrictRegex: /^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,
    monthsParse: monthsParse,
    longMonthsParse: monthsParse,
    shortMonthsParse: monthsParse,
    weekdays : 'domingo_lunes_martes_miércoles_jueves_viernes_sábado'.split('_'),
    weekdaysShort : 'dom._lun._mar._mié._jue._vie._sáb.'.split('_'),
    weekdaysMin : 'do_lu_ma_mi_ju_vi_sá'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'h:mm A',
        LTS : 'h:mm:ss A',
        L : 'DD/MM/YYYY',
        LL : 'D [de] MMMM [de] YYYY',
        LLL : 'D [de] MMMM [de] YYYY h:mm A',
        LLLL : 'dddd, D [de] MMMM [de] YYYY h:mm A'
    },
    calendar : {
        sameDay : function () {
            return '[hoy a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
        },
        nextDay : function () {
            return '[mañana a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
        },
        nextWeek : function () {
            return 'dddd [a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
        },
        lastDay : function () {
            return '[ayer a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
        },
        lastWeek : function () {
            return '[el] dddd [pasado a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
        },
        sameElse : 'L'
    },
    relativeTime : {
        future : 'en %s',
        past : 'hace %s',
        s : 'unos segundos',
        ss : '%d segundos',
        m : 'un minuto',
        mm : '%d minutos',
        h : 'una hora',
        hh : '%d horas',
        d : 'un día',
        dd : '%d días',
        M : 'un mes',
        MM : '%d meses',
        y : 'un año',
        yy : '%d años'
    },
    dayOfMonthOrdinalParse : /\d{1,2}º/,
    ordinal : '%dº',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return esDo;

})));


/***/ }),

/***/ "../../../../moment/locale/es-us.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Spanish (United States) [es-us]
//! author : bustta : https://github.com/bustta

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var monthsShortDot = 'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split('_');
var monthsShort = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_');

var esUs = moment.defineLocale('es-us', {
    months : 'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split('_'),
    monthsShort : function (m, format) {
        if (!m) {
            return monthsShortDot;
        } else if (/-MMM-/.test(format)) {
            return monthsShort[m.month()];
        } else {
            return monthsShortDot[m.month()];
        }
    },
    monthsParseExact : true,
    weekdays : 'domingo_lunes_martes_miércoles_jueves_viernes_sábado'.split('_'),
    weekdaysShort : 'dom._lun._mar._mié._jue._vie._sáb.'.split('_'),
    weekdaysMin : 'do_lu_ma_mi_ju_vi_sá'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'h:mm A',
        LTS : 'h:mm:ss A',
        L : 'MM/DD/YYYY',
        LL : 'MMMM [de] D [de] YYYY',
        LLL : 'MMMM [de] D [de] YYYY h:mm A',
        LLLL : 'dddd, MMMM [de] D [de] YYYY h:mm A'
    },
    calendar : {
        sameDay : function () {
            return '[hoy a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
        },
        nextDay : function () {
            return '[mañana a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
        },
        nextWeek : function () {
            return 'dddd [a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
        },
        lastDay : function () {
            return '[ayer a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
        },
        lastWeek : function () {
            return '[el] dddd [pasado a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
        },
        sameElse : 'L'
    },
    relativeTime : {
        future : 'en %s',
        past : 'hace %s',
        s : 'unos segundos',
        ss : '%d segundos',
        m : 'un minuto',
        mm : '%d minutos',
        h : 'una hora',
        hh : '%d horas',
        d : 'un día',
        dd : '%d días',
        M : 'un mes',
        MM : '%d meses',
        y : 'un año',
        yy : '%d años'
    },
    dayOfMonthOrdinalParse : /\d{1,2}º/,
    ordinal : '%dº',
    week : {
        dow : 0, // Sunday is the first day of the week.
        doy : 6  // The week that contains Jan 1st is the first week of the year.
    }
});

return esUs;

})));


/***/ }),

/***/ "../../../../moment/locale/es.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Spanish [es]
//! author : Julio Napurí : https://github.com/julionc

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var monthsShortDot = 'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split('_');
var monthsShort = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_');

var monthsParse = [/^ene/i, /^feb/i, /^mar/i, /^abr/i, /^may/i, /^jun/i, /^jul/i, /^ago/i, /^sep/i, /^oct/i, /^nov/i, /^dic/i];
var monthsRegex = /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;

var es = moment.defineLocale('es', {
    months : 'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split('_'),
    monthsShort : function (m, format) {
        if (!m) {
            return monthsShortDot;
        } else if (/-MMM-/.test(format)) {
            return monthsShort[m.month()];
        } else {
            return monthsShortDot[m.month()];
        }
    },
    monthsRegex : monthsRegex,
    monthsShortRegex : monthsRegex,
    monthsStrictRegex : /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,
    monthsShortStrictRegex : /^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,
    monthsParse : monthsParse,
    longMonthsParse : monthsParse,
    shortMonthsParse : monthsParse,
    weekdays : 'domingo_lunes_martes_miércoles_jueves_viernes_sábado'.split('_'),
    weekdaysShort : 'dom._lun._mar._mié._jue._vie._sáb.'.split('_'),
    weekdaysMin : 'do_lu_ma_mi_ju_vi_sá'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'H:mm',
        LTS : 'H:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D [de] MMMM [de] YYYY',
        LLL : 'D [de] MMMM [de] YYYY H:mm',
        LLLL : 'dddd, D [de] MMMM [de] YYYY H:mm'
    },
    calendar : {
        sameDay : function () {
            return '[hoy a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
        },
        nextDay : function () {
            return '[mañana a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
        },
        nextWeek : function () {
            return 'dddd [a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
        },
        lastDay : function () {
            return '[ayer a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
        },
        lastWeek : function () {
            return '[el] dddd [pasado a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
        },
        sameElse : 'L'
    },
    relativeTime : {
        future : 'en %s',
        past : 'hace %s',
        s : 'unos segundos',
        ss : '%d segundos',
        m : 'un minuto',
        mm : '%d minutos',
        h : 'una hora',
        hh : '%d horas',
        d : 'un día',
        dd : '%d días',
        M : 'un mes',
        MM : '%d meses',
        y : 'un año',
        yy : '%d años'
    },
    dayOfMonthOrdinalParse : /\d{1,2}º/,
    ordinal : '%dº',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return es;

})));


/***/ }),

/***/ "../../../../moment/locale/et.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Estonian [et]
//! author : Henry Kehlmann : https://github.com/madhenry
//! improvements : Illimar Tambek : https://github.com/ragulka

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


function processRelativeTime(number, withoutSuffix, key, isFuture) {
    var format = {
        's' : ['mõne sekundi', 'mõni sekund', 'paar sekundit'],
        'ss': [number + 'sekundi', number + 'sekundit'],
        'm' : ['ühe minuti', 'üks minut'],
        'mm': [number + ' minuti', number + ' minutit'],
        'h' : ['ühe tunni', 'tund aega', 'üks tund'],
        'hh': [number + ' tunni', number + ' tundi'],
        'd' : ['ühe päeva', 'üks päev'],
        'M' : ['kuu aja', 'kuu aega', 'üks kuu'],
        'MM': [number + ' kuu', number + ' kuud'],
        'y' : ['ühe aasta', 'aasta', 'üks aasta'],
        'yy': [number + ' aasta', number + ' aastat']
    };
    if (withoutSuffix) {
        return format[key][2] ? format[key][2] : format[key][1];
    }
    return isFuture ? format[key][0] : format[key][1];
}

var et = moment.defineLocale('et', {
    months        : 'jaanuar_veebruar_märts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember'.split('_'),
    monthsShort   : 'jaan_veebr_märts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets'.split('_'),
    weekdays      : 'pühapäev_esmaspäev_teisipäev_kolmapäev_neljapäev_reede_laupäev'.split('_'),
    weekdaysShort : 'P_E_T_K_N_R_L'.split('_'),
    weekdaysMin   : 'P_E_T_K_N_R_L'.split('_'),
    longDateFormat : {
        LT   : 'H:mm',
        LTS : 'H:mm:ss',
        L    : 'DD.MM.YYYY',
        LL   : 'D. MMMM YYYY',
        LLL  : 'D. MMMM YYYY H:mm',
        LLLL : 'dddd, D. MMMM YYYY H:mm'
    },
    calendar : {
        sameDay  : '[Täna,] LT',
        nextDay  : '[Homme,] LT',
        nextWeek : '[Järgmine] dddd LT',
        lastDay  : '[Eile,] LT',
        lastWeek : '[Eelmine] dddd LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : '%s pärast',
        past   : '%s tagasi',
        s      : processRelativeTime,
        ss     : processRelativeTime,
        m      : processRelativeTime,
        mm     : processRelativeTime,
        h      : processRelativeTime,
        hh     : processRelativeTime,
        d      : processRelativeTime,
        dd     : '%d päeva',
        M      : processRelativeTime,
        MM     : processRelativeTime,
        y      : processRelativeTime,
        yy     : processRelativeTime
    },
    dayOfMonthOrdinalParse: /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return et;

})));


/***/ }),

/***/ "../../../../moment/locale/eu.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Basque [eu]
//! author : Eneko Illarramendi : https://github.com/eillarra

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var eu = moment.defineLocale('eu', {
    months : 'urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua'.split('_'),
    monthsShort : 'urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.'.split('_'),
    monthsParseExact : true,
    weekdays : 'igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata'.split('_'),
    weekdaysShort : 'ig._al._ar._az._og._ol._lr.'.split('_'),
    weekdaysMin : 'ig_al_ar_az_og_ol_lr'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'YYYY-MM-DD',
        LL : 'YYYY[ko] MMMM[ren] D[a]',
        LLL : 'YYYY[ko] MMMM[ren] D[a] HH:mm',
        LLLL : 'dddd, YYYY[ko] MMMM[ren] D[a] HH:mm',
        l : 'YYYY-M-D',
        ll : 'YYYY[ko] MMM D[a]',
        lll : 'YYYY[ko] MMM D[a] HH:mm',
        llll : 'ddd, YYYY[ko] MMM D[a] HH:mm'
    },
    calendar : {
        sameDay : '[gaur] LT[etan]',
        nextDay : '[bihar] LT[etan]',
        nextWeek : 'dddd LT[etan]',
        lastDay : '[atzo] LT[etan]',
        lastWeek : '[aurreko] dddd LT[etan]',
        sameElse : 'L'
    },
    relativeTime : {
        future : '%s barru',
        past : 'duela %s',
        s : 'segundo batzuk',
        ss : '%d segundo',
        m : 'minutu bat',
        mm : '%d minutu',
        h : 'ordu bat',
        hh : '%d ordu',
        d : 'egun bat',
        dd : '%d egun',
        M : 'hilabete bat',
        MM : '%d hilabete',
        y : 'urte bat',
        yy : '%d urte'
    },
    dayOfMonthOrdinalParse: /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

return eu;

})));


/***/ }),

/***/ "../../../../moment/locale/fa.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Persian [fa]
//! author : Ebrahim Byagowi : https://github.com/ebraminio

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var symbolMap = {
    '1': '۱',
    '2': '۲',
    '3': '۳',
    '4': '۴',
    '5': '۵',
    '6': '۶',
    '7': '۷',
    '8': '۸',
    '9': '۹',
    '0': '۰'
};
var numberMap = {
    '۱': '1',
    '۲': '2',
    '۳': '3',
    '۴': '4',
    '۵': '5',
    '۶': '6',
    '۷': '7',
    '۸': '8',
    '۹': '9',
    '۰': '0'
};

var fa = moment.defineLocale('fa', {
    months : 'ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر'.split('_'),
    monthsShort : 'ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر'.split('_'),
    weekdays : 'یک\u200cشنبه_دوشنبه_سه\u200cشنبه_چهارشنبه_پنج\u200cشنبه_جمعه_شنبه'.split('_'),
    weekdaysShort : 'یک\u200cشنبه_دوشنبه_سه\u200cشنبه_چهارشنبه_پنج\u200cشنبه_جمعه_شنبه'.split('_'),
    weekdaysMin : 'ی_د_س_چ_پ_ج_ش'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd, D MMMM YYYY HH:mm'
    },
    meridiemParse: /قبل از ظهر|بعد از ظهر/,
    isPM: function (input) {
        return /بعد از ظهر/.test(input);
    },
    meridiem : function (hour, minute, isLower) {
        if (hour < 12) {
            return 'قبل از ظهر';
        } else {
            return 'بعد از ظهر';
        }
    },
    calendar : {
        sameDay : '[امروز ساعت] LT',
        nextDay : '[فردا ساعت] LT',
        nextWeek : 'dddd [ساعت] LT',
        lastDay : '[دیروز ساعت] LT',
        lastWeek : 'dddd [پیش] [ساعت] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'در %s',
        past : '%s پیش',
        s : 'چند ثانیه',
        ss : 'ثانیه d%',
        m : 'یک دقیقه',
        mm : '%d دقیقه',
        h : 'یک ساعت',
        hh : '%d ساعت',
        d : 'یک روز',
        dd : '%d روز',
        M : 'یک ماه',
        MM : '%d ماه',
        y : 'یک سال',
        yy : '%d سال'
    },
    preparse: function (string) {
        return string.replace(/[۰-۹]/g, function (match) {
            return numberMap[match];
        }).replace(/،/g, ',');
    },
    postformat: function (string) {
        return string.replace(/\d/g, function (match) {
            return symbolMap[match];
        }).replace(/,/g, '،');
    },
    dayOfMonthOrdinalParse: /\d{1,2}م/,
    ordinal : '%dم',
    week : {
        dow : 6, // Saturday is the first day of the week.
        doy : 12 // The week that contains Jan 1st is the first week of the year.
    }
});

return fa;

})));


/***/ }),

/***/ "../../../../moment/locale/fi.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Finnish [fi]
//! author : Tarmo Aidantausta : https://github.com/bleadof

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var numbersPast = 'nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän'.split(' ');
var numbersFuture = [
        'nolla', 'yhden', 'kahden', 'kolmen', 'neljän', 'viiden', 'kuuden',
        numbersPast[7], numbersPast[8], numbersPast[9]
    ];
function translate(number, withoutSuffix, key, isFuture) {
    var result = '';
    switch (key) {
        case 's':
            return isFuture ? 'muutaman sekunnin' : 'muutama sekunti';
        case 'ss':
            return isFuture ? 'sekunnin' : 'sekuntia';
        case 'm':
            return isFuture ? 'minuutin' : 'minuutti';
        case 'mm':
            result = isFuture ? 'minuutin' : 'minuuttia';
            break;
        case 'h':
            return isFuture ? 'tunnin' : 'tunti';
        case 'hh':
            result = isFuture ? 'tunnin' : 'tuntia';
            break;
        case 'd':
            return isFuture ? 'päivän' : 'päivä';
        case 'dd':
            result = isFuture ? 'päivän' : 'päivää';
            break;
        case 'M':
            return isFuture ? 'kuukauden' : 'kuukausi';
        case 'MM':
            result = isFuture ? 'kuukauden' : 'kuukautta';
            break;
        case 'y':
            return isFuture ? 'vuoden' : 'vuosi';
        case 'yy':
            result = isFuture ? 'vuoden' : 'vuotta';
            break;
    }
    result = verbalNumber(number, isFuture) + ' ' + result;
    return result;
}
function verbalNumber(number, isFuture) {
    return number < 10 ? (isFuture ? numbersFuture[number] : numbersPast[number]) : number;
}

var fi = moment.defineLocale('fi', {
    months : 'tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu'.split('_'),
    monthsShort : 'tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu'.split('_'),
    weekdays : 'sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai'.split('_'),
    weekdaysShort : 'su_ma_ti_ke_to_pe_la'.split('_'),
    weekdaysMin : 'su_ma_ti_ke_to_pe_la'.split('_'),
    longDateFormat : {
        LT : 'HH.mm',
        LTS : 'HH.mm.ss',
        L : 'DD.MM.YYYY',
        LL : 'Do MMMM[ta] YYYY',
        LLL : 'Do MMMM[ta] YYYY, [klo] HH.mm',
        LLLL : 'dddd, Do MMMM[ta] YYYY, [klo] HH.mm',
        l : 'D.M.YYYY',
        ll : 'Do MMM YYYY',
        lll : 'Do MMM YYYY, [klo] HH.mm',
        llll : 'ddd, Do MMM YYYY, [klo] HH.mm'
    },
    calendar : {
        sameDay : '[tänään] [klo] LT',
        nextDay : '[huomenna] [klo] LT',
        nextWeek : 'dddd [klo] LT',
        lastDay : '[eilen] [klo] LT',
        lastWeek : '[viime] dddd[na] [klo] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : '%s päästä',
        past : '%s sitten',
        s : translate,
        ss : translate,
        m : translate,
        mm : translate,
        h : translate,
        hh : translate,
        d : translate,
        dd : translate,
        M : translate,
        MM : translate,
        y : translate,
        yy : translate
    },
    dayOfMonthOrdinalParse: /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return fi;

})));


/***/ }),

/***/ "../../../../moment/locale/fo.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Faroese [fo]
//! author : Ragnar Johannesen : https://github.com/ragnar123

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var fo = moment.defineLocale('fo', {
    months : 'januar_februar_mars_apríl_mai_juni_juli_august_september_oktober_november_desember'.split('_'),
    monthsShort : 'jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_'),
    weekdays : 'sunnudagur_mánadagur_týsdagur_mikudagur_hósdagur_fríggjadagur_leygardagur'.split('_'),
    weekdaysShort : 'sun_mán_týs_mik_hós_frí_ley'.split('_'),
    weekdaysMin : 'su_má_tý_mi_hó_fr_le'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd D. MMMM, YYYY HH:mm'
    },
    calendar : {
        sameDay : '[Í dag kl.] LT',
        nextDay : '[Í morgin kl.] LT',
        nextWeek : 'dddd [kl.] LT',
        lastDay : '[Í gjár kl.] LT',
        lastWeek : '[síðstu] dddd [kl] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'um %s',
        past : '%s síðani',
        s : 'fá sekund',
        ss : '%d sekundir',
        m : 'ein minutt',
        mm : '%d minuttir',
        h : 'ein tími',
        hh : '%d tímar',
        d : 'ein dagur',
        dd : '%d dagar',
        M : 'ein mánaði',
        MM : '%d mánaðir',
        y : 'eitt ár',
        yy : '%d ár'
    },
    dayOfMonthOrdinalParse: /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return fo;

})));


/***/ }),

/***/ "../../../../moment/locale/fr-ca.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : French (Canada) [fr-ca]
//! author : Jonathan Abourbih : https://github.com/jonbca

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var frCa = moment.defineLocale('fr-ca', {
    months : 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_'),
    monthsShort : 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_'),
    monthsParseExact : true,
    weekdays : 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
    weekdaysShort : 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
    weekdaysMin : 'di_lu_ma_me_je_ve_sa'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'YYYY-MM-DD',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay : '[Aujourd’hui à] LT',
        nextDay : '[Demain à] LT',
        nextWeek : 'dddd [à] LT',
        lastDay : '[Hier à] LT',
        lastWeek : 'dddd [dernier à] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'dans %s',
        past : 'il y a %s',
        s : 'quelques secondes',
        ss : '%d secondes',
        m : 'une minute',
        mm : '%d minutes',
        h : 'une heure',
        hh : '%d heures',
        d : 'un jour',
        dd : '%d jours',
        M : 'un mois',
        MM : '%d mois',
        y : 'un an',
        yy : '%d ans'
    },
    dayOfMonthOrdinalParse: /\d{1,2}(er|e)/,
    ordinal : function (number, period) {
        switch (period) {
            // Words with masculine grammatical gender: mois, trimestre, jour
            default:
            case 'M':
            case 'Q':
            case 'D':
            case 'DDD':
            case 'd':
                return number + (number === 1 ? 'er' : 'e');

            // Words with feminine grammatical gender: semaine
            case 'w':
            case 'W':
                return number + (number === 1 ? 're' : 'e');
        }
    }
});

return frCa;

})));


/***/ }),

/***/ "../../../../moment/locale/fr-ch.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : French (Switzerland) [fr-ch]
//! author : Gaspard Bucher : https://github.com/gaspard

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var frCh = moment.defineLocale('fr-ch', {
    months : 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_'),
    monthsShort : 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_'),
    monthsParseExact : true,
    weekdays : 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
    weekdaysShort : 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
    weekdaysMin : 'di_lu_ma_me_je_ve_sa'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD.MM.YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay : '[Aujourd’hui à] LT',
        nextDay : '[Demain à] LT',
        nextWeek : 'dddd [à] LT',
        lastDay : '[Hier à] LT',
        lastWeek : 'dddd [dernier à] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'dans %s',
        past : 'il y a %s',
        s : 'quelques secondes',
        ss : '%d secondes',
        m : 'une minute',
        mm : '%d minutes',
        h : 'une heure',
        hh : '%d heures',
        d : 'un jour',
        dd : '%d jours',
        M : 'un mois',
        MM : '%d mois',
        y : 'un an',
        yy : '%d ans'
    },
    dayOfMonthOrdinalParse: /\d{1,2}(er|e)/,
    ordinal : function (number, period) {
        switch (period) {
            // Words with masculine grammatical gender: mois, trimestre, jour
            default:
            case 'M':
            case 'Q':
            case 'D':
            case 'DDD':
            case 'd':
                return number + (number === 1 ? 'er' : 'e');

            // Words with feminine grammatical gender: semaine
            case 'w':
            case 'W':
                return number + (number === 1 ? 're' : 'e');
        }
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return frCh;

})));


/***/ }),

/***/ "../../../../moment/locale/fr.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : French [fr]
//! author : John Fischer : https://github.com/jfroffice

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var fr = moment.defineLocale('fr', {
    months : 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_'),
    monthsShort : 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_'),
    monthsParseExact : true,
    weekdays : 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
    weekdaysShort : 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
    weekdaysMin : 'di_lu_ma_me_je_ve_sa'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay : '[Aujourd’hui à] LT',
        nextDay : '[Demain à] LT',
        nextWeek : 'dddd [à] LT',
        lastDay : '[Hier à] LT',
        lastWeek : 'dddd [dernier à] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'dans %s',
        past : 'il y a %s',
        s : 'quelques secondes',
        ss : '%d secondes',
        m : 'une minute',
        mm : '%d minutes',
        h : 'une heure',
        hh : '%d heures',
        d : 'un jour',
        dd : '%d jours',
        M : 'un mois',
        MM : '%d mois',
        y : 'un an',
        yy : '%d ans'
    },
    dayOfMonthOrdinalParse: /\d{1,2}(er|)/,
    ordinal : function (number, period) {
        switch (period) {
            // TODO: Return 'e' when day of month > 1. Move this case inside
            // block for masculine words below.
            // See https://github.com/moment/moment/issues/3375
            case 'D':
                return number + (number === 1 ? 'er' : '');

            // Words with masculine grammatical gender: mois, trimestre, jour
            default:
            case 'M':
            case 'Q':
            case 'DDD':
            case 'd':
                return number + (number === 1 ? 'er' : 'e');

            // Words with feminine grammatical gender: semaine
            case 'w':
            case 'W':
                return number + (number === 1 ? 're' : 'e');
        }
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return fr;

})));


/***/ }),

/***/ "../../../../moment/locale/fy.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Frisian [fy]
//! author : Robin van der Vliet : https://github.com/robin0van0der0v

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var monthsShortWithDots = 'jan._feb._mrt._apr._mai_jun._jul._aug._sep._okt._nov._des.'.split('_');
var monthsShortWithoutDots = 'jan_feb_mrt_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_');

var fy = moment.defineLocale('fy', {
    months : 'jannewaris_febrewaris_maart_april_maaie_juny_july_augustus_septimber_oktober_novimber_desimber'.split('_'),
    monthsShort : function (m, format) {
        if (!m) {
            return monthsShortWithDots;
        } else if (/-MMM-/.test(format)) {
            return monthsShortWithoutDots[m.month()];
        } else {
            return monthsShortWithDots[m.month()];
        }
    },
    monthsParseExact : true,
    weekdays : 'snein_moandei_tiisdei_woansdei_tongersdei_freed_sneon'.split('_'),
    weekdaysShort : 'si._mo._ti._wo._to._fr._so.'.split('_'),
    weekdaysMin : 'Si_Mo_Ti_Wo_To_Fr_So'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD-MM-YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay: '[hjoed om] LT',
        nextDay: '[moarn om] LT',
        nextWeek: 'dddd [om] LT',
        lastDay: '[juster om] LT',
        lastWeek: '[ôfrûne] dddd [om] LT',
        sameElse: 'L'
    },
    relativeTime : {
        future : 'oer %s',
        past : '%s lyn',
        s : 'in pear sekonden',
        ss : '%d sekonden',
        m : 'ien minút',
        mm : '%d minuten',
        h : 'ien oere',
        hh : '%d oeren',
        d : 'ien dei',
        dd : '%d dagen',
        M : 'ien moanne',
        MM : '%d moannen',
        y : 'ien jier',
        yy : '%d jierren'
    },
    dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
    ordinal : function (number) {
        return number + ((number === 1 || number === 8 || number >= 20) ? 'ste' : 'de');
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return fy;

})));


/***/ }),

/***/ "../../../../moment/locale/gd.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Scottish Gaelic [gd]
//! author : Jon Ashdown : https://github.com/jonashdown

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var months = [
    'Am Faoilleach', 'An Gearran', 'Am Màrt', 'An Giblean', 'An Cèitean', 'An t-Ògmhios', 'An t-Iuchar', 'An Lùnastal', 'An t-Sultain', 'An Dàmhair', 'An t-Samhain', 'An Dùbhlachd'
];

var monthsShort = ['Faoi', 'Gear', 'Màrt', 'Gibl', 'Cèit', 'Ògmh', 'Iuch', 'Lùn', 'Sult', 'Dàmh', 'Samh', 'Dùbh'];

var weekdays = ['Didòmhnaich', 'Diluain', 'Dimàirt', 'Diciadain', 'Diardaoin', 'Dihaoine', 'Disathairne'];

var weekdaysShort = ['Did', 'Dil', 'Dim', 'Dic', 'Dia', 'Dih', 'Dis'];

var weekdaysMin = ['Dò', 'Lu', 'Mà', 'Ci', 'Ar', 'Ha', 'Sa'];

var gd = moment.defineLocale('gd', {
    months : months,
    monthsShort : monthsShort,
    monthsParseExact : true,
    weekdays : weekdays,
    weekdaysShort : weekdaysShort,
    weekdaysMin : weekdaysMin,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd, D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay : '[An-diugh aig] LT',
        nextDay : '[A-màireach aig] LT',
        nextWeek : 'dddd [aig] LT',
        lastDay : '[An-dè aig] LT',
        lastWeek : 'dddd [seo chaidh] [aig] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'ann an %s',
        past : 'bho chionn %s',
        s : 'beagan diogan',
        ss : '%d diogan',
        m : 'mionaid',
        mm : '%d mionaidean',
        h : 'uair',
        hh : '%d uairean',
        d : 'latha',
        dd : '%d latha',
        M : 'mìos',
        MM : '%d mìosan',
        y : 'bliadhna',
        yy : '%d bliadhna'
    },
    dayOfMonthOrdinalParse : /\d{1,2}(d|na|mh)/,
    ordinal : function (number) {
        var output = number === 1 ? 'd' : number % 10 === 2 ? 'na' : 'mh';
        return number + output;
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return gd;

})));


/***/ }),

/***/ "../../../../moment/locale/gl.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Galician [gl]
//! author : Juan G. Hurtado : https://github.com/juanghurtado

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var gl = moment.defineLocale('gl', {
    months : 'xaneiro_febreiro_marzo_abril_maio_xuño_xullo_agosto_setembro_outubro_novembro_decembro'.split('_'),
    monthsShort : 'xan._feb._mar._abr._mai._xuñ._xul._ago._set._out._nov._dec.'.split('_'),
    monthsParseExact: true,
    weekdays : 'domingo_luns_martes_mércores_xoves_venres_sábado'.split('_'),
    weekdaysShort : 'dom._lun._mar._mér._xov._ven._sáb.'.split('_'),
    weekdaysMin : 'do_lu_ma_mé_xo_ve_sá'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'H:mm',
        LTS : 'H:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D [de] MMMM [de] YYYY',
        LLL : 'D [de] MMMM [de] YYYY H:mm',
        LLLL : 'dddd, D [de] MMMM [de] YYYY H:mm'
    },
    calendar : {
        sameDay : function () {
            return '[hoxe ' + ((this.hours() !== 1) ? 'ás' : 'á') + '] LT';
        },
        nextDay : function () {
            return '[mañá ' + ((this.hours() !== 1) ? 'ás' : 'á') + '] LT';
        },
        nextWeek : function () {
            return 'dddd [' + ((this.hours() !== 1) ? 'ás' : 'a') + '] LT';
        },
        lastDay : function () {
            return '[onte ' + ((this.hours() !== 1) ? 'á' : 'a') + '] LT';
        },
        lastWeek : function () {
            return '[o] dddd [pasado ' + ((this.hours() !== 1) ? 'ás' : 'a') + '] LT';
        },
        sameElse : 'L'
    },
    relativeTime : {
        future : function (str) {
            if (str.indexOf('un') === 0) {
                return 'n' + str;
            }
            return 'en ' + str;
        },
        past : 'hai %s',
        s : 'uns segundos',
        ss : '%d segundos',
        m : 'un minuto',
        mm : '%d minutos',
        h : 'unha hora',
        hh : '%d horas',
        d : 'un día',
        dd : '%d días',
        M : 'un mes',
        MM : '%d meses',
        y : 'un ano',
        yy : '%d anos'
    },
    dayOfMonthOrdinalParse : /\d{1,2}º/,
    ordinal : '%dº',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return gl;

})));


/***/ }),

/***/ "../../../../moment/locale/gom-latn.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Konkani Latin script [gom-latn]
//! author : The Discoverer : https://github.com/WikiDiscoverer

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


function processRelativeTime(number, withoutSuffix, key, isFuture) {
    var format = {
        's': ['thodde secondanim', 'thodde second'],
        'ss': [number + ' secondanim', number + ' second'],
        'm': ['eka mintan', 'ek minute'],
        'mm': [number + ' mintanim', number + ' mintam'],
        'h': ['eka horan', 'ek hor'],
        'hh': [number + ' horanim', number + ' hor'],
        'd': ['eka disan', 'ek dis'],
        'dd': [number + ' disanim', number + ' dis'],
        'M': ['eka mhoinean', 'ek mhoino'],
        'MM': [number + ' mhoineanim', number + ' mhoine'],
        'y': ['eka vorsan', 'ek voros'],
        'yy': [number + ' vorsanim', number + ' vorsam']
    };
    return withoutSuffix ? format[key][0] : format[key][1];
}

var gomLatn = moment.defineLocale('gom-latn', {
    months : 'Janer_Febrer_Mars_Abril_Mai_Jun_Julai_Agost_Setembr_Otubr_Novembr_Dezembr'.split('_'),
    monthsShort : 'Jan._Feb._Mars_Abr._Mai_Jun_Jul._Ago._Set._Otu._Nov._Dez.'.split('_'),
    monthsParseExact : true,
    weekdays : 'Aitar_Somar_Mongllar_Budvar_Brestar_Sukrar_Son\'var'.split('_'),
    weekdaysShort : 'Ait._Som._Mon._Bud._Bre._Suk._Son.'.split('_'),
    weekdaysMin : 'Ai_Sm_Mo_Bu_Br_Su_Sn'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'A h:mm [vazta]',
        LTS : 'A h:mm:ss [vazta]',
        L : 'DD-MM-YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY A h:mm [vazta]',
        LLLL : 'dddd, MMMM[achea] Do, YYYY, A h:mm [vazta]',
        llll: 'ddd, D MMM YYYY, A h:mm [vazta]'
    },
    calendar : {
        sameDay: '[Aiz] LT',
        nextDay: '[Faleam] LT',
        nextWeek: '[Ieta to] dddd[,] LT',
        lastDay: '[Kal] LT',
        lastWeek: '[Fatlo] dddd[,] LT',
        sameElse: 'L'
    },
    relativeTime : {
        future : '%s',
        past : '%s adim',
        s : processRelativeTime,
        ss : processRelativeTime,
        m : processRelativeTime,
        mm : processRelativeTime,
        h : processRelativeTime,
        hh : processRelativeTime,
        d : processRelativeTime,
        dd : processRelativeTime,
        M : processRelativeTime,
        MM : processRelativeTime,
        y : processRelativeTime,
        yy : processRelativeTime
    },
    dayOfMonthOrdinalParse : /\d{1,2}(er)/,
    ordinal : function (number, period) {
        switch (period) {
            // the ordinal 'er' only applies to day of the month
            case 'D':
                return number + 'er';
            default:
            case 'M':
            case 'Q':
            case 'DDD':
            case 'd':
            case 'w':
            case 'W':
                return number;
        }
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    },
    meridiemParse: /rati|sokalli|donparam|sanje/,
    meridiemHour : function (hour, meridiem) {
        if (hour === 12) {
            hour = 0;
        }
        if (meridiem === 'rati') {
            return hour < 4 ? hour : hour + 12;
        } else if (meridiem === 'sokalli') {
            return hour;
        } else if (meridiem === 'donparam') {
            return hour > 12 ? hour : hour + 12;
        } else if (meridiem === 'sanje') {
            return hour + 12;
        }
    },
    meridiem : function (hour, minute, isLower) {
        if (hour < 4) {
            return 'rati';
        } else if (hour < 12) {
            return 'sokalli';
        } else if (hour < 16) {
            return 'donparam';
        } else if (hour < 20) {
            return 'sanje';
        } else {
            return 'rati';
        }
    }
});

return gomLatn;

})));


/***/ }),

/***/ "../../../../moment/locale/gu.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Gujarati [gu]
//! author : Kaushik Thanki : https://github.com/Kaushik1987

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var symbolMap = {
        '1': '૧',
        '2': '૨',
        '3': '૩',
        '4': '૪',
        '5': '૫',
        '6': '૬',
        '7': '૭',
        '8': '૮',
        '9': '૯',
        '0': '૦'
    };
var numberMap = {
        '૧': '1',
        '૨': '2',
        '૩': '3',
        '૪': '4',
        '૫': '5',
        '૬': '6',
        '૭': '7',
        '૮': '8',
        '૯': '9',
        '૦': '0'
    };

var gu = moment.defineLocale('gu', {
    months: 'જાન્યુઆરી_ફેબ્રુઆરી_માર્ચ_એપ્રિલ_મે_જૂન_જુલાઈ_ઑગસ્ટ_સપ્ટેમ્બર_ઑક્ટ્બર_નવેમ્બર_ડિસેમ્બર'.split('_'),
    monthsShort: 'જાન્યુ._ફેબ્રુ._માર્ચ_એપ્રિ._મે_જૂન_જુલા._ઑગ._સપ્ટે._ઑક્ટ્._નવે._ડિસે.'.split('_'),
    monthsParseExact: true,
    weekdays: 'રવિવાર_સોમવાર_મંગળવાર_બુધ્વાર_ગુરુવાર_શુક્રવાર_શનિવાર'.split('_'),
    weekdaysShort: 'રવિ_સોમ_મંગળ_બુધ્_ગુરુ_શુક્ર_શનિ'.split('_'),
    weekdaysMin: 'ર_સો_મં_બુ_ગુ_શુ_શ'.split('_'),
    longDateFormat: {
        LT: 'A h:mm વાગ્યે',
        LTS: 'A h:mm:ss વાગ્યે',
        L: 'DD/MM/YYYY',
        LL: 'D MMMM YYYY',
        LLL: 'D MMMM YYYY, A h:mm વાગ્યે',
        LLLL: 'dddd, D MMMM YYYY, A h:mm વાગ્યે'
    },
    calendar: {
        sameDay: '[આજ] LT',
        nextDay: '[કાલે] LT',
        nextWeek: 'dddd, LT',
        lastDay: '[ગઇકાલે] LT',
        lastWeek: '[પાછલા] dddd, LT',
        sameElse: 'L'
    },
    relativeTime: {
        future: '%s મા',
        past: '%s પેહલા',
        s: 'અમુક પળો',
        ss: '%d સેકંડ',
        m: 'એક મિનિટ',
        mm: '%d મિનિટ',
        h: 'એક કલાક',
        hh: '%d કલાક',
        d: 'એક દિવસ',
        dd: '%d દિવસ',
        M: 'એક મહિનો',
        MM: '%d મહિનો',
        y: 'એક વર્ષ',
        yy: '%d વર્ષ'
    },
    preparse: function (string) {
        return string.replace(/[૧૨૩૪૫૬૭૮૯૦]/g, function (match) {
            return numberMap[match];
        });
    },
    postformat: function (string) {
        return string.replace(/\d/g, function (match) {
            return symbolMap[match];
        });
    },
    // Gujarati notation for meridiems are quite fuzzy in practice. While there exists
    // a rigid notion of a 'Pahar' it is not used as rigidly in modern Gujarati.
    meridiemParse: /રાત|બપોર|સવાર|સાંજ/,
    meridiemHour: function (hour, meridiem) {
        if (hour === 12) {
            hour = 0;
        }
        if (meridiem === 'રાત') {
            return hour < 4 ? hour : hour + 12;
        } else if (meridiem === 'સવાર') {
            return hour;
        } else if (meridiem === 'બપોર') {
            return hour >= 10 ? hour : hour + 12;
        } else if (meridiem === 'સાંજ') {
            return hour + 12;
        }
    },
    meridiem: function (hour, minute, isLower) {
        if (hour < 4) {
            return 'રાત';
        } else if (hour < 10) {
            return 'સવાર';
        } else if (hour < 17) {
            return 'બપોર';
        } else if (hour < 20) {
            return 'સાંજ';
        } else {
            return 'રાત';
        }
    },
    week: {
        dow: 0, // Sunday is the first day of the week.
        doy: 6 // The week that contains Jan 1st is the first week of the year.
    }
});

return gu;

})));


/***/ }),

/***/ "../../../../moment/locale/he.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Hebrew [he]
//! author : Tomer Cohen : https://github.com/tomer
//! author : Moshe Simantov : https://github.com/DevelopmentIL
//! author : Tal Ater : https://github.com/TalAter

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var he = moment.defineLocale('he', {
    months : 'ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר'.split('_'),
    monthsShort : 'ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳'.split('_'),
    weekdays : 'ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת'.split('_'),
    weekdaysShort : 'א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳'.split('_'),
    weekdaysMin : 'א_ב_ג_ד_ה_ו_ש'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D [ב]MMMM YYYY',
        LLL : 'D [ב]MMMM YYYY HH:mm',
        LLLL : 'dddd, D [ב]MMMM YYYY HH:mm',
        l : 'D/M/YYYY',
        ll : 'D MMM YYYY',
        lll : 'D MMM YYYY HH:mm',
        llll : 'ddd, D MMM YYYY HH:mm'
    },
    calendar : {
        sameDay : '[היום ב־]LT',
        nextDay : '[מחר ב־]LT',
        nextWeek : 'dddd [בשעה] LT',
        lastDay : '[אתמול ב־]LT',
        lastWeek : '[ביום] dddd [האחרון בשעה] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'בעוד %s',
        past : 'לפני %s',
        s : 'מספר שניות',
        ss : '%d שניות',
        m : 'דקה',
        mm : '%d דקות',
        h : 'שעה',
        hh : function (number) {
            if (number === 2) {
                return 'שעתיים';
            }
            return number + ' שעות';
        },
        d : 'יום',
        dd : function (number) {
            if (number === 2) {
                return 'יומיים';
            }
            return number + ' ימים';
        },
        M : 'חודש',
        MM : function (number) {
            if (number === 2) {
                return 'חודשיים';
            }
            return number + ' חודשים';
        },
        y : 'שנה',
        yy : function (number) {
            if (number === 2) {
                return 'שנתיים';
            } else if (number % 10 === 0 && number !== 10) {
                return number + ' שנה';
            }
            return number + ' שנים';
        }
    },
    meridiemParse: /אחה"צ|לפנה"צ|אחרי הצהריים|לפני הצהריים|לפנות בוקר|בבוקר|בערב/i,
    isPM : function (input) {
        return /^(אחה"צ|אחרי הצהריים|בערב)$/.test(input);
    },
    meridiem : function (hour, minute, isLower) {
        if (hour < 5) {
            return 'לפנות בוקר';
        } else if (hour < 10) {
            return 'בבוקר';
        } else if (hour < 12) {
            return isLower ? 'לפנה"צ' : 'לפני הצהריים';
        } else if (hour < 18) {
            return isLower ? 'אחה"צ' : 'אחרי הצהריים';
        } else {
            return 'בערב';
        }
    }
});

return he;

})));


/***/ }),

/***/ "../../../../moment/locale/hi.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Hindi [hi]
//! author : Mayank Singhal : https://github.com/mayanksinghal

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var symbolMap = {
    '1': '१',
    '2': '२',
    '3': '३',
    '4': '४',
    '5': '५',
    '6': '६',
    '7': '७',
    '8': '८',
    '9': '९',
    '0': '०'
};
var numberMap = {
    '१': '1',
    '२': '2',
    '३': '3',
    '४': '4',
    '५': '5',
    '६': '6',
    '७': '7',
    '८': '8',
    '९': '9',
    '०': '0'
};

var hi = moment.defineLocale('hi', {
    months : 'जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर'.split('_'),
    monthsShort : 'जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.'.split('_'),
    monthsParseExact: true,
    weekdays : 'रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार'.split('_'),
    weekdaysShort : 'रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि'.split('_'),
    weekdaysMin : 'र_सो_मं_बु_गु_शु_श'.split('_'),
    longDateFormat : {
        LT : 'A h:mm बजे',
        LTS : 'A h:mm:ss बजे',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY, A h:mm बजे',
        LLLL : 'dddd, D MMMM YYYY, A h:mm बजे'
    },
    calendar : {
        sameDay : '[आज] LT',
        nextDay : '[कल] LT',
        nextWeek : 'dddd, LT',
        lastDay : '[कल] LT',
        lastWeek : '[पिछले] dddd, LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : '%s में',
        past : '%s पहले',
        s : 'कुछ ही क्षण',
        ss : '%d सेकंड',
        m : 'एक मिनट',
        mm : '%d मिनट',
        h : 'एक घंटा',
        hh : '%d घंटे',
        d : 'एक दिन',
        dd : '%d दिन',
        M : 'एक महीने',
        MM : '%d महीने',
        y : 'एक वर्ष',
        yy : '%d वर्ष'
    },
    preparse: function (string) {
        return string.replace(/[१२३४५६७८९०]/g, function (match) {
            return numberMap[match];
        });
    },
    postformat: function (string) {
        return string.replace(/\d/g, function (match) {
            return symbolMap[match];
        });
    },
    // Hindi notation for meridiems are quite fuzzy in practice. While there exists
    // a rigid notion of a 'Pahar' it is not used as rigidly in modern Hindi.
    meridiemParse: /रात|सुबह|दोपहर|शाम/,
    meridiemHour : function (hour, meridiem) {
        if (hour === 12) {
            hour = 0;
        }
        if (meridiem === 'रात') {
            return hour < 4 ? hour : hour + 12;
        } else if (meridiem === 'सुबह') {
            return hour;
        } else if (meridiem === 'दोपहर') {
            return hour >= 10 ? hour : hour + 12;
        } else if (meridiem === 'शाम') {
            return hour + 12;
        }
    },
    meridiem : function (hour, minute, isLower) {
        if (hour < 4) {
            return 'रात';
        } else if (hour < 10) {
            return 'सुबह';
        } else if (hour < 17) {
            return 'दोपहर';
        } else if (hour < 20) {
            return 'शाम';
        } else {
            return 'रात';
        }
    },
    week : {
        dow : 0, // Sunday is the first day of the week.
        doy : 6  // The week that contains Jan 1st is the first week of the year.
    }
});

return hi;

})));


/***/ }),

/***/ "../../../../moment/locale/hr.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Croatian [hr]
//! author : Bojan Marković : https://github.com/bmarkovic

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


function translate(number, withoutSuffix, key) {
    var result = number + ' ';
    switch (key) {
        case 'ss':
            if (number === 1) {
                result += 'sekunda';
            } else if (number === 2 || number === 3 || number === 4) {
                result += 'sekunde';
            } else {
                result += 'sekundi';
            }
            return result;
        case 'm':
            return withoutSuffix ? 'jedna minuta' : 'jedne minute';
        case 'mm':
            if (number === 1) {
                result += 'minuta';
            } else if (number === 2 || number === 3 || number === 4) {
                result += 'minute';
            } else {
                result += 'minuta';
            }
            return result;
        case 'h':
            return withoutSuffix ? 'jedan sat' : 'jednog sata';
        case 'hh':
            if (number === 1) {
                result += 'sat';
            } else if (number === 2 || number === 3 || number === 4) {
                result += 'sata';
            } else {
                result += 'sati';
            }
            return result;
        case 'dd':
            if (number === 1) {
                result += 'dan';
            } else {
                result += 'dana';
            }
            return result;
        case 'MM':
            if (number === 1) {
                result += 'mjesec';
            } else if (number === 2 || number === 3 || number === 4) {
                result += 'mjeseca';
            } else {
                result += 'mjeseci';
            }
            return result;
        case 'yy':
            if (number === 1) {
                result += 'godina';
            } else if (number === 2 || number === 3 || number === 4) {
                result += 'godine';
            } else {
                result += 'godina';
            }
            return result;
    }
}

var hr = moment.defineLocale('hr', {
    months : {
        format: 'siječnja_veljače_ožujka_travnja_svibnja_lipnja_srpnja_kolovoza_rujna_listopada_studenoga_prosinca'.split('_'),
        standalone: 'siječanj_veljača_ožujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac'.split('_')
    },
    monthsShort : 'sij._velj._ožu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.'.split('_'),
    monthsParseExact: true,
    weekdays : 'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split('_'),
    weekdaysShort : 'ned._pon._uto._sri._čet._pet._sub.'.split('_'),
    weekdaysMin : 'ne_po_ut_sr_če_pe_su'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'H:mm',
        LTS : 'H:mm:ss',
        L : 'DD.MM.YYYY',
        LL : 'D. MMMM YYYY',
        LLL : 'D. MMMM YYYY H:mm',
        LLLL : 'dddd, D. MMMM YYYY H:mm'
    },
    calendar : {
        sameDay  : '[danas u] LT',
        nextDay  : '[sutra u] LT',
        nextWeek : function () {
            switch (this.day()) {
                case 0:
                    return '[u] [nedjelju] [u] LT';
                case 3:
                    return '[u] [srijedu] [u] LT';
                case 6:
                    return '[u] [subotu] [u] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                    return '[u] dddd [u] LT';
            }
        },
        lastDay  : '[jučer u] LT',
        lastWeek : function () {
            switch (this.day()) {
                case 0:
                case 3:
                    return '[prošlu] dddd [u] LT';
                case 6:
                    return '[prošle] [subote] [u] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                    return '[prošli] dddd [u] LT';
            }
        },
        sameElse : 'L'
    },
    relativeTime : {
        future : 'za %s',
        past   : 'prije %s',
        s      : 'par sekundi',
        ss     : translate,
        m      : translate,
        mm     : translate,
        h      : translate,
        hh     : translate,
        d      : 'dan',
        dd     : translate,
        M      : 'mjesec',
        MM     : translate,
        y      : 'godinu',
        yy     : translate
    },
    dayOfMonthOrdinalParse: /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

return hr;

})));


/***/ }),

/***/ "../../../../moment/locale/hu.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Hungarian [hu]
//! author : Adam Brunner : https://github.com/adambrunner

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var weekEndings = 'vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton'.split(' ');
function translate(number, withoutSuffix, key, isFuture) {
    var num = number;
    switch (key) {
        case 's':
            return (isFuture || withoutSuffix) ? 'néhány másodperc' : 'néhány másodperce';
        case 'ss':
            return num + (isFuture || withoutSuffix) ? ' másodperc' : ' másodperce';
        case 'm':
            return 'egy' + (isFuture || withoutSuffix ? ' perc' : ' perce');
        case 'mm':
            return num + (isFuture || withoutSuffix ? ' perc' : ' perce');
        case 'h':
            return 'egy' + (isFuture || withoutSuffix ? ' óra' : ' órája');
        case 'hh':
            return num + (isFuture || withoutSuffix ? ' óra' : ' órája');
        case 'd':
            return 'egy' + (isFuture || withoutSuffix ? ' nap' : ' napja');
        case 'dd':
            return num + (isFuture || withoutSuffix ? ' nap' : ' napja');
        case 'M':
            return 'egy' + (isFuture || withoutSuffix ? ' hónap' : ' hónapja');
        case 'MM':
            return num + (isFuture || withoutSuffix ? ' hónap' : ' hónapja');
        case 'y':
            return 'egy' + (isFuture || withoutSuffix ? ' év' : ' éve');
        case 'yy':
            return num + (isFuture || withoutSuffix ? ' év' : ' éve');
    }
    return '';
}
function week(isFuture) {
    return (isFuture ? '' : '[múlt] ') + '[' + weekEndings[this.day()] + '] LT[-kor]';
}

var hu = moment.defineLocale('hu', {
    months : 'január_február_március_április_május_június_július_augusztus_szeptember_október_november_december'.split('_'),
    monthsShort : 'jan_feb_márc_ápr_máj_jún_júl_aug_szept_okt_nov_dec'.split('_'),
    weekdays : 'vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat'.split('_'),
    weekdaysShort : 'vas_hét_kedd_sze_csüt_pén_szo'.split('_'),
    weekdaysMin : 'v_h_k_sze_cs_p_szo'.split('_'),
    longDateFormat : {
        LT : 'H:mm',
        LTS : 'H:mm:ss',
        L : 'YYYY.MM.DD.',
        LL : 'YYYY. MMMM D.',
        LLL : 'YYYY. MMMM D. H:mm',
        LLLL : 'YYYY. MMMM D., dddd H:mm'
    },
    meridiemParse: /de|du/i,
    isPM: function (input) {
        return input.charAt(1).toLowerCase() === 'u';
    },
    meridiem : function (hours, minutes, isLower) {
        if (hours < 12) {
            return isLower === true ? 'de' : 'DE';
        } else {
            return isLower === true ? 'du' : 'DU';
        }
    },
    calendar : {
        sameDay : '[ma] LT[-kor]',
        nextDay : '[holnap] LT[-kor]',
        nextWeek : function () {
            return week.call(this, true);
        },
        lastDay : '[tegnap] LT[-kor]',
        lastWeek : function () {
            return week.call(this, false);
        },
        sameElse : 'L'
    },
    relativeTime : {
        future : '%s múlva',
        past : '%s',
        s : translate,
        ss : translate,
        m : translate,
        mm : translate,
        h : translate,
        hh : translate,
        d : translate,
        dd : translate,
        M : translate,
        MM : translate,
        y : translate,
        yy : translate
    },
    dayOfMonthOrdinalParse: /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return hu;

})));


/***/ }),

/***/ "../../../../moment/locale/hy-am.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Armenian [hy-am]
//! author : Armendarabyan : https://github.com/armendarabyan

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var hyAm = moment.defineLocale('hy-am', {
    months : {
        format: 'հունվարի_փետրվարի_մարտի_ապրիլի_մայիսի_հունիսի_հուլիսի_օգոստոսի_սեպտեմբերի_հոկտեմբերի_նոյեմբերի_դեկտեմբերի'.split('_'),
        standalone: 'հունվար_փետրվար_մարտ_ապրիլ_մայիս_հունիս_հուլիս_օգոստոս_սեպտեմբեր_հոկտեմբեր_նոյեմբեր_դեկտեմբեր'.split('_')
    },
    monthsShort : 'հնվ_փտր_մրտ_ապր_մյս_հնս_հլս_օգս_սպտ_հկտ_նմբ_դկտ'.split('_'),
    weekdays : 'կիրակի_երկուշաբթի_երեքշաբթի_չորեքշաբթի_հինգշաբթի_ուրբաթ_շաբաթ'.split('_'),
    weekdaysShort : 'կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ'.split('_'),
    weekdaysMin : 'կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD.MM.YYYY',
        LL : 'D MMMM YYYY թ.',
        LLL : 'D MMMM YYYY թ., HH:mm',
        LLLL : 'dddd, D MMMM YYYY թ., HH:mm'
    },
    calendar : {
        sameDay: '[այսօր] LT',
        nextDay: '[վաղը] LT',
        lastDay: '[երեկ] LT',
        nextWeek: function () {
            return 'dddd [օրը ժամը] LT';
        },
        lastWeek: function () {
            return '[անցած] dddd [օրը ժամը] LT';
        },
        sameElse: 'L'
    },
    relativeTime : {
        future : '%s հետո',
        past : '%s առաջ',
        s : 'մի քանի վայրկյան',
        ss : '%d վայրկյան',
        m : 'րոպե',
        mm : '%d րոպե',
        h : 'ժամ',
        hh : '%d ժամ',
        d : 'օր',
        dd : '%d օր',
        M : 'ամիս',
        MM : '%d ամիս',
        y : 'տարի',
        yy : '%d տարի'
    },
    meridiemParse: /գիշերվա|առավոտվա|ցերեկվա|երեկոյան/,
    isPM: function (input) {
        return /^(ցերեկվա|երեկոյան)$/.test(input);
    },
    meridiem : function (hour) {
        if (hour < 4) {
            return 'գիշերվա';
        } else if (hour < 12) {
            return 'առավոտվա';
        } else if (hour < 17) {
            return 'ցերեկվա';
        } else {
            return 'երեկոյան';
        }
    },
    dayOfMonthOrdinalParse: /\d{1,2}|\d{1,2}-(ին|րդ)/,
    ordinal: function (number, period) {
        switch (period) {
            case 'DDD':
            case 'w':
            case 'W':
            case 'DDDo':
                if (number === 1) {
                    return number + '-ին';
                }
                return number + '-րդ';
            default:
                return number;
        }
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

return hyAm;

})));


/***/ }),

/***/ "../../../../moment/locale/id.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Indonesian [id]
//! author : Mohammad Satrio Utomo : https://github.com/tyok
//! reference: http://id.wikisource.org/wiki/Pedoman_Umum_Ejaan_Bahasa_Indonesia_yang_Disempurnakan

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var id = moment.defineLocale('id', {
    months : 'Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember'.split('_'),
    monthsShort : 'Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nov_Des'.split('_'),
    weekdays : 'Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu'.split('_'),
    weekdaysShort : 'Min_Sen_Sel_Rab_Kam_Jum_Sab'.split('_'),
    weekdaysMin : 'Mg_Sn_Sl_Rb_Km_Jm_Sb'.split('_'),
    longDateFormat : {
        LT : 'HH.mm',
        LTS : 'HH.mm.ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY [pukul] HH.mm',
        LLLL : 'dddd, D MMMM YYYY [pukul] HH.mm'
    },
    meridiemParse: /pagi|siang|sore|malam/,
    meridiemHour : function (hour, meridiem) {
        if (hour === 12) {
            hour = 0;
        }
        if (meridiem === 'pagi') {
            return hour;
        } else if (meridiem === 'siang') {
            return hour >= 11 ? hour : hour + 12;
        } else if (meridiem === 'sore' || meridiem === 'malam') {
            return hour + 12;
        }
    },
    meridiem : function (hours, minutes, isLower) {
        if (hours < 11) {
            return 'pagi';
        } else if (hours < 15) {
            return 'siang';
        } else if (hours < 19) {
            return 'sore';
        } else {
            return 'malam';
        }
    },
    calendar : {
        sameDay : '[Hari ini pukul] LT',
        nextDay : '[Besok pukul] LT',
        nextWeek : 'dddd [pukul] LT',
        lastDay : '[Kemarin pukul] LT',
        lastWeek : 'dddd [lalu pukul] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'dalam %s',
        past : '%s yang lalu',
        s : 'beberapa detik',
        ss : '%d detik',
        m : 'semenit',
        mm : '%d menit',
        h : 'sejam',
        hh : '%d jam',
        d : 'sehari',
        dd : '%d hari',
        M : 'sebulan',
        MM : '%d bulan',
        y : 'setahun',
        yy : '%d tahun'
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

return id;

})));


/***/ }),

/***/ "../../../../moment/locale/is.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Icelandic [is]
//! author : Hinrik Örn Sigurðsson : https://github.com/hinrik

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


function plural(n) {
    if (n % 100 === 11) {
        return true;
    } else if (n % 10 === 1) {
        return false;
    }
    return true;
}
function translate(number, withoutSuffix, key, isFuture) {
    var result = number + ' ';
    switch (key) {
        case 's':
            return withoutSuffix || isFuture ? 'nokkrar sekúndur' : 'nokkrum sekúndum';
        case 'ss':
            if (plural(number)) {
                return result + (withoutSuffix || isFuture ? 'sekúndur' : 'sekúndum');
            }
            return result + 'sekúnda';
        case 'm':
            return withoutSuffix ? 'mínúta' : 'mínútu';
        case 'mm':
            if (plural(number)) {
                return result + (withoutSuffix || isFuture ? 'mínútur' : 'mínútum');
            } else if (withoutSuffix) {
                return result + 'mínúta';
            }
            return result + 'mínútu';
        case 'hh':
            if (plural(number)) {
                return result + (withoutSuffix || isFuture ? 'klukkustundir' : 'klukkustundum');
            }
            return result + 'klukkustund';
        case 'd':
            if (withoutSuffix) {
                return 'dagur';
            }
            return isFuture ? 'dag' : 'degi';
        case 'dd':
            if (plural(number)) {
                if (withoutSuffix) {
                    return result + 'dagar';
                }
                return result + (isFuture ? 'daga' : 'dögum');
            } else if (withoutSuffix) {
                return result + 'dagur';
            }
            return result + (isFuture ? 'dag' : 'degi');
        case 'M':
            if (withoutSuffix) {
                return 'mánuður';
            }
            return isFuture ? 'mánuð' : 'mánuði';
        case 'MM':
            if (plural(number)) {
                if (withoutSuffix) {
                    return result + 'mánuðir';
                }
                return result + (isFuture ? 'mánuði' : 'mánuðum');
            } else if (withoutSuffix) {
                return result + 'mánuður';
            }
            return result + (isFuture ? 'mánuð' : 'mánuði');
        case 'y':
            return withoutSuffix || isFuture ? 'ár' : 'ári';
        case 'yy':
            if (plural(number)) {
                return result + (withoutSuffix || isFuture ? 'ár' : 'árum');
            }
            return result + (withoutSuffix || isFuture ? 'ár' : 'ári');
    }
}

var is = moment.defineLocale('is', {
    months : 'janúar_febrúar_mars_apríl_maí_júní_júlí_ágúst_september_október_nóvember_desember'.split('_'),
    monthsShort : 'jan_feb_mar_apr_maí_jún_júl_ágú_sep_okt_nóv_des'.split('_'),
    weekdays : 'sunnudagur_mánudagur_þriðjudagur_miðvikudagur_fimmtudagur_föstudagur_laugardagur'.split('_'),
    weekdaysShort : 'sun_mán_þri_mið_fim_fös_lau'.split('_'),
    weekdaysMin : 'Su_Má_Þr_Mi_Fi_Fö_La'.split('_'),
    longDateFormat : {
        LT : 'H:mm',
        LTS : 'H:mm:ss',
        L : 'DD.MM.YYYY',
        LL : 'D. MMMM YYYY',
        LLL : 'D. MMMM YYYY [kl.] H:mm',
        LLLL : 'dddd, D. MMMM YYYY [kl.] H:mm'
    },
    calendar : {
        sameDay : '[í dag kl.] LT',
        nextDay : '[á morgun kl.] LT',
        nextWeek : 'dddd [kl.] LT',
        lastDay : '[í gær kl.] LT',
        lastWeek : '[síðasta] dddd [kl.] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'eftir %s',
        past : 'fyrir %s síðan',
        s : translate,
        ss : translate,
        m : translate,
        mm : translate,
        h : 'klukkustund',
        hh : translate,
        d : translate,
        dd : translate,
        M : translate,
        MM : translate,
        y : translate,
        yy : translate
    },
    dayOfMonthOrdinalParse: /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return is;

})));


/***/ }),

/***/ "../../../../moment/locale/it.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Italian [it]
//! author : Lorenzo : https://github.com/aliem
//! author: Mattia Larentis: https://github.com/nostalgiaz

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var it = moment.defineLocale('it', {
    months : 'gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre'.split('_'),
    monthsShort : 'gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic'.split('_'),
    weekdays : 'domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato'.split('_'),
    weekdaysShort : 'dom_lun_mar_mer_gio_ven_sab'.split('_'),
    weekdaysMin : 'do_lu_ma_me_gi_ve_sa'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay: '[Oggi alle] LT',
        nextDay: '[Domani alle] LT',
        nextWeek: 'dddd [alle] LT',
        lastDay: '[Ieri alle] LT',
        lastWeek: function () {
            switch (this.day()) {
                case 0:
                    return '[la scorsa] dddd [alle] LT';
                default:
                    return '[lo scorso] dddd [alle] LT';
            }
        },
        sameElse: 'L'
    },
    relativeTime : {
        future : function (s) {
            return ((/^[0-9].+$/).test(s) ? 'tra' : 'in') + ' ' + s;
        },
        past : '%s fa',
        s : 'alcuni secondi',
        ss : '%d secondi',
        m : 'un minuto',
        mm : '%d minuti',
        h : 'un\'ora',
        hh : '%d ore',
        d : 'un giorno',
        dd : '%d giorni',
        M : 'un mese',
        MM : '%d mesi',
        y : 'un anno',
        yy : '%d anni'
    },
    dayOfMonthOrdinalParse : /\d{1,2}º/,
    ordinal: '%dº',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return it;

})));


/***/ }),

/***/ "../../../../moment/locale/ja.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Japanese [ja]
//! author : LI Long : https://github.com/baryon

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var ja = moment.defineLocale('ja', {
    months : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
    monthsShort : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
    weekdays : '日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日'.split('_'),
    weekdaysShort : '日_月_火_水_木_金_土'.split('_'),
    weekdaysMin : '日_月_火_水_木_金_土'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'YYYY/MM/DD',
        LL : 'YYYY年M月D日',
        LLL : 'YYYY年M月D日 HH:mm',
        LLLL : 'YYYY年M月D日 HH:mm dddd',
        l : 'YYYY/MM/DD',
        ll : 'YYYY年M月D日',
        lll : 'YYYY年M月D日 HH:mm',
        llll : 'YYYY年M月D日 HH:mm dddd'
    },
    meridiemParse: /午前|午後/i,
    isPM : function (input) {
        return input === '午後';
    },
    meridiem : function (hour, minute, isLower) {
        if (hour < 12) {
            return '午前';
        } else {
            return '午後';
        }
    },
    calendar : {
        sameDay : '[今日] LT',
        nextDay : '[明日] LT',
        nextWeek : '[来週]dddd LT',
        lastDay : '[昨日] LT',
        lastWeek : '[前週]dddd LT',
        sameElse : 'L'
    },
    dayOfMonthOrdinalParse : /\d{1,2}日/,
    ordinal : function (number, period) {
        switch (period) {
            case 'd':
            case 'D':
            case 'DDD':
                return number + '日';
            default:
                return number;
        }
    },
    relativeTime : {
        future : '%s後',
        past : '%s前',
        s : '数秒',
        ss : '%d秒',
        m : '1分',
        mm : '%d分',
        h : '1時間',
        hh : '%d時間',
        d : '1日',
        dd : '%d日',
        M : '1ヶ月',
        MM : '%dヶ月',
        y : '1年',
        yy : '%d年'
    }
});

return ja;

})));


/***/ }),

/***/ "../../../../moment/locale/jv.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Javanese [jv]
//! author : Rony Lantip : https://github.com/lantip
//! reference: http://jv.wikipedia.org/wiki/Basa_Jawa

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var jv = moment.defineLocale('jv', {
    months : 'Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_Nopember_Desember'.split('_'),
    monthsShort : 'Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nop_Des'.split('_'),
    weekdays : 'Minggu_Senen_Seloso_Rebu_Kemis_Jemuwah_Septu'.split('_'),
    weekdaysShort : 'Min_Sen_Sel_Reb_Kem_Jem_Sep'.split('_'),
    weekdaysMin : 'Mg_Sn_Sl_Rb_Km_Jm_Sp'.split('_'),
    longDateFormat : {
        LT : 'HH.mm',
        LTS : 'HH.mm.ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY [pukul] HH.mm',
        LLLL : 'dddd, D MMMM YYYY [pukul] HH.mm'
    },
    meridiemParse: /enjing|siyang|sonten|ndalu/,
    meridiemHour : function (hour, meridiem) {
        if (hour === 12) {
            hour = 0;
        }
        if (meridiem === 'enjing') {
            return hour;
        } else if (meridiem === 'siyang') {
            return hour >= 11 ? hour : hour + 12;
        } else if (meridiem === 'sonten' || meridiem === 'ndalu') {
            return hour + 12;
        }
    },
    meridiem : function (hours, minutes, isLower) {
        if (hours < 11) {
            return 'enjing';
        } else if (hours < 15) {
            return 'siyang';
        } else if (hours < 19) {
            return 'sonten';
        } else {
            return 'ndalu';
        }
    },
    calendar : {
        sameDay : '[Dinten puniko pukul] LT',
        nextDay : '[Mbenjang pukul] LT',
        nextWeek : 'dddd [pukul] LT',
        lastDay : '[Kala wingi pukul] LT',
        lastWeek : 'dddd [kepengker pukul] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'wonten ing %s',
        past : '%s ingkang kepengker',
        s : 'sawetawis detik',
        ss : '%d detik',
        m : 'setunggal menit',
        mm : '%d menit',
        h : 'setunggal jam',
        hh : '%d jam',
        d : 'sedinten',
        dd : '%d dinten',
        M : 'sewulan',
        MM : '%d wulan',
        y : 'setaun',
        yy : '%d taun'
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

return jv;

})));


/***/ }),

/***/ "../../../../moment/locale/ka.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Georgian [ka]
//! author : Irakli Janiashvili : https://github.com/irakli-janiashvili

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var ka = moment.defineLocale('ka', {
    months : {
        standalone: 'იანვარი_თებერვალი_მარტი_აპრილი_მაისი_ივნისი_ივლისი_აგვისტო_სექტემბერი_ოქტომბერი_ნოემბერი_დეკემბერი'.split('_'),
        format: 'იანვარს_თებერვალს_მარტს_აპრილის_მაისს_ივნისს_ივლისს_აგვისტს_სექტემბერს_ოქტომბერს_ნოემბერს_დეკემბერს'.split('_')
    },
    monthsShort : 'იან_თებ_მარ_აპრ_მაი_ივნ_ივლ_აგვ_სექ_ოქტ_ნოე_დეკ'.split('_'),
    weekdays : {
        standalone: 'კვირა_ორშაბათი_სამშაბათი_ოთხშაბათი_ხუთშაბათი_პარასკევი_შაბათი'.split('_'),
        format: 'კვირას_ორშაბათს_სამშაბათს_ოთხშაბათს_ხუთშაბათს_პარასკევს_შაბათს'.split('_'),
        isFormat: /(წინა|შემდეგ)/
    },
    weekdaysShort : 'კვი_ორშ_სამ_ოთხ_ხუთ_პარ_შაბ'.split('_'),
    weekdaysMin : 'კვ_ორ_სა_ოთ_ხუ_პა_შა'.split('_'),
    longDateFormat : {
        LT : 'h:mm A',
        LTS : 'h:mm:ss A',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY h:mm A',
        LLLL : 'dddd, D MMMM YYYY h:mm A'
    },
    calendar : {
        sameDay : '[დღეს] LT[-ზე]',
        nextDay : '[ხვალ] LT[-ზე]',
        lastDay : '[გუშინ] LT[-ზე]',
        nextWeek : '[შემდეგ] dddd LT[-ზე]',
        lastWeek : '[წინა] dddd LT-ზე',
        sameElse : 'L'
    },
    relativeTime : {
        future : function (s) {
            return (/(წამი|წუთი|საათი|წელი)/).test(s) ?
                s.replace(/ი$/, 'ში') :
                s + 'ში';
        },
        past : function (s) {
            if ((/(წამი|წუთი|საათი|დღე|თვე)/).test(s)) {
                return s.replace(/(ი|ე)$/, 'ის უკან');
            }
            if ((/წელი/).test(s)) {
                return s.replace(/წელი$/, 'წლის უკან');
            }
        },
        s : 'რამდენიმე წამი',
        ss : '%d წამი',
        m : 'წუთი',
        mm : '%d წუთი',
        h : 'საათი',
        hh : '%d საათი',
        d : 'დღე',
        dd : '%d დღე',
        M : 'თვე',
        MM : '%d თვე',
        y : 'წელი',
        yy : '%d წელი'
    },
    dayOfMonthOrdinalParse: /0|1-ლი|მე-\d{1,2}|\d{1,2}-ე/,
    ordinal : function (number) {
        if (number === 0) {
            return number;
        }
        if (number === 1) {
            return number + '-ლი';
        }
        if ((number < 20) || (number <= 100 && (number % 20 === 0)) || (number % 100 === 0)) {
            return 'მე-' + number;
        }
        return number + '-ე';
    },
    week : {
        dow : 1,
        doy : 7
    }
});

return ka;

})));


/***/ }),

/***/ "../../../../moment/locale/kk.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Kazakh [kk]
//! authors : Nurlan Rakhimzhanov : https://github.com/nurlan

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var suffixes = {
    0: '-ші',
    1: '-ші',
    2: '-ші',
    3: '-ші',
    4: '-ші',
    5: '-ші',
    6: '-шы',
    7: '-ші',
    8: '-ші',
    9: '-шы',
    10: '-шы',
    20: '-шы',
    30: '-шы',
    40: '-шы',
    50: '-ші',
    60: '-шы',
    70: '-ші',
    80: '-ші',
    90: '-шы',
    100: '-ші'
};

var kk = moment.defineLocale('kk', {
    months : 'қаңтар_ақпан_наурыз_сәуір_мамыр_маусым_шілде_тамыз_қыркүйек_қазан_қараша_желтоқсан'.split('_'),
    monthsShort : 'қаң_ақп_нау_сәу_мам_мау_шіл_там_қыр_қаз_қар_жел'.split('_'),
    weekdays : 'жексенбі_дүйсенбі_сейсенбі_сәрсенбі_бейсенбі_жұма_сенбі'.split('_'),
    weekdaysShort : 'жек_дүй_сей_сәр_бей_жұм_сен'.split('_'),
    weekdaysMin : 'жк_дй_сй_ср_бй_жм_сн'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD.MM.YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd, D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay : '[Бүгін сағат] LT',
        nextDay : '[Ертең сағат] LT',
        nextWeek : 'dddd [сағат] LT',
        lastDay : '[Кеше сағат] LT',
        lastWeek : '[Өткен аптаның] dddd [сағат] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : '%s ішінде',
        past : '%s бұрын',
        s : 'бірнеше секунд',
        ss : '%d секунд',
        m : 'бір минут',
        mm : '%d минут',
        h : 'бір сағат',
        hh : '%d сағат',
        d : 'бір күн',
        dd : '%d күн',
        M : 'бір ай',
        MM : '%d ай',
        y : 'бір жыл',
        yy : '%d жыл'
    },
    dayOfMonthOrdinalParse: /\d{1,2}-(ші|шы)/,
    ordinal : function (number) {
        var a = number % 10,
            b = number >= 100 ? 100 : null;
        return number + (suffixes[number] || suffixes[a] || suffixes[b]);
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

return kk;

})));


/***/ }),

/***/ "../../../../moment/locale/km.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Cambodian [km]
//! author : Kruy Vanna : https://github.com/kruyvanna

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var km = moment.defineLocale('km', {
    months: 'មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ'.split('_'),
    monthsShort: 'មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ'.split('_'),
    weekdays: 'អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍'.split('_'),
    weekdaysShort: 'អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍'.split('_'),
    weekdaysMin: 'អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍'.split('_'),
    longDateFormat: {
        LT: 'HH:mm',
        LTS : 'HH:mm:ss',
        L: 'DD/MM/YYYY',
        LL: 'D MMMM YYYY',
        LLL: 'D MMMM YYYY HH:mm',
        LLLL: 'dddd, D MMMM YYYY HH:mm'
    },
    calendar: {
        sameDay: '[ថ្ងៃនេះ ម៉ោង] LT',
        nextDay: '[ស្អែក ម៉ោង] LT',
        nextWeek: 'dddd [ម៉ោង] LT',
        lastDay: '[ម្សិលមិញ ម៉ោង] LT',
        lastWeek: 'dddd [សប្តាហ៍មុន] [ម៉ោង] LT',
        sameElse: 'L'
    },
    relativeTime: {
        future: '%sទៀត',
        past: '%sមុន',
        s: 'ប៉ុន្មានវិនាទី',
        ss: '%d វិនាទី',
        m: 'មួយនាទី',
        mm: '%d នាទី',
        h: 'មួយម៉ោង',
        hh: '%d ម៉ោង',
        d: 'មួយថ្ងៃ',
        dd: '%d ថ្ងៃ',
        M: 'មួយខែ',
        MM: '%d ខែ',
        y: 'មួយឆ្នាំ',
        yy: '%d ឆ្នាំ'
    },
    week: {
        dow: 1, // Monday is the first day of the week.
        doy: 4 // The week that contains Jan 4th is the first week of the year.
    }
});

return km;

})));


/***/ }),

/***/ "../../../../moment/locale/kn.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Kannada [kn]
//! author : Rajeev Naik : https://github.com/rajeevnaikte

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var symbolMap = {
    '1': '೧',
    '2': '೨',
    '3': '೩',
    '4': '೪',
    '5': '೫',
    '6': '೬',
    '7': '೭',
    '8': '೮',
    '9': '೯',
    '0': '೦'
};
var numberMap = {
    '೧': '1',
    '೨': '2',
    '೩': '3',
    '೪': '4',
    '೫': '5',
    '೬': '6',
    '೭': '7',
    '೮': '8',
    '೯': '9',
    '೦': '0'
};

var kn = moment.defineLocale('kn', {
    months : 'ಜನವರಿ_ಫೆಬ್ರವರಿ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂಬರ್_ಅಕ್ಟೋಬರ್_ನವೆಂಬರ್_ಡಿಸೆಂಬರ್'.split('_'),
    monthsShort : 'ಜನ_ಫೆಬ್ರ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂಬ_ಅಕ್ಟೋಬ_ನವೆಂಬ_ಡಿಸೆಂಬ'.split('_'),
    monthsParseExact: true,
    weekdays : 'ಭಾನುವಾರ_ಸೋಮವಾರ_ಮಂಗಳವಾರ_ಬುಧವಾರ_ಗುರುವಾರ_ಶುಕ್ರವಾರ_ಶನಿವಾರ'.split('_'),
    weekdaysShort : 'ಭಾನು_ಸೋಮ_ಮಂಗಳ_ಬುಧ_ಗುರು_ಶುಕ್ರ_ಶನಿ'.split('_'),
    weekdaysMin : 'ಭಾ_ಸೋ_ಮಂ_ಬು_ಗು_ಶು_ಶ'.split('_'),
    longDateFormat : {
        LT : 'A h:mm',
        LTS : 'A h:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY, A h:mm',
        LLLL : 'dddd, D MMMM YYYY, A h:mm'
    },
    calendar : {
        sameDay : '[ಇಂದು] LT',
        nextDay : '[ನಾಳೆ] LT',
        nextWeek : 'dddd, LT',
        lastDay : '[ನಿನ್ನೆ] LT',
        lastWeek : '[ಕೊನೆಯ] dddd, LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : '%s ನಂತರ',
        past : '%s ಹಿಂದೆ',
        s : 'ಕೆಲವು ಕ್ಷಣಗಳು',
        ss : '%d ಸೆಕೆಂಡುಗಳು',
        m : 'ಒಂದು ನಿಮಿಷ',
        mm : '%d ನಿಮಿಷ',
        h : 'ಒಂದು ಗಂಟೆ',
        hh : '%d ಗಂಟೆ',
        d : 'ಒಂದು ದಿನ',
        dd : '%d ದಿನ',
        M : 'ಒಂದು ತಿಂಗಳು',
        MM : '%d ತಿಂಗಳು',
        y : 'ಒಂದು ವರ್ಷ',
        yy : '%d ವರ್ಷ'
    },
    preparse: function (string) {
        return string.replace(/[೧೨೩೪೫೬೭೮೯೦]/g, function (match) {
            return numberMap[match];
        });
    },
    postformat: function (string) {
        return string.replace(/\d/g, function (match) {
            return symbolMap[match];
        });
    },
    meridiemParse: /ರಾತ್ರಿ|ಬೆಳಿಗ್ಗೆ|ಮಧ್ಯಾಹ್ನ|ಸಂಜೆ/,
    meridiemHour : function (hour, meridiem) {
        if (hour === 12) {
            hour = 0;
        }
        if (meridiem === 'ರಾತ್ರಿ') {
            return hour < 4 ? hour : hour + 12;
        } else if (meridiem === 'ಬೆಳಿಗ್ಗೆ') {
            return hour;
        } else if (meridiem === 'ಮಧ್ಯಾಹ್ನ') {
            return hour >= 10 ? hour : hour + 12;
        } else if (meridiem === 'ಸಂಜೆ') {
            return hour + 12;
        }
    },
    meridiem : function (hour, minute, isLower) {
        if (hour < 4) {
            return 'ರಾತ್ರಿ';
        } else if (hour < 10) {
            return 'ಬೆಳಿಗ್ಗೆ';
        } else if (hour < 17) {
            return 'ಮಧ್ಯಾಹ್ನ';
        } else if (hour < 20) {
            return 'ಸಂಜೆ';
        } else {
            return 'ರಾತ್ರಿ';
        }
    },
    dayOfMonthOrdinalParse: /\d{1,2}(ನೇ)/,
    ordinal : function (number) {
        return number + 'ನೇ';
    },
    week : {
        dow : 0, // Sunday is the first day of the week.
        doy : 6  // The week that contains Jan 1st is the first week of the year.
    }
});

return kn;

})));


/***/ }),

/***/ "../../../../moment/locale/ko.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Korean [ko]
//! author : Kyungwook, Park : https://github.com/kyungw00k
//! author : Jeeeyul Lee <jeeeyul@gmail.com>

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var ko = moment.defineLocale('ko', {
    months : '1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월'.split('_'),
    monthsShort : '1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월'.split('_'),
    weekdays : '일요일_월요일_화요일_수요일_목요일_금요일_토요일'.split('_'),
    weekdaysShort : '일_월_화_수_목_금_토'.split('_'),
    weekdaysMin : '일_월_화_수_목_금_토'.split('_'),
    longDateFormat : {
        LT : 'A h:mm',
        LTS : 'A h:mm:ss',
        L : 'YYYY.MM.DD',
        LL : 'YYYY년 MMMM D일',
        LLL : 'YYYY년 MMMM D일 A h:mm',
        LLLL : 'YYYY년 MMMM D일 dddd A h:mm',
        l : 'YYYY.MM.DD',
        ll : 'YYYY년 MMMM D일',
        lll : 'YYYY년 MMMM D일 A h:mm',
        llll : 'YYYY년 MMMM D일 dddd A h:mm'
    },
    calendar : {
        sameDay : '오늘 LT',
        nextDay : '내일 LT',
        nextWeek : 'dddd LT',
        lastDay : '어제 LT',
        lastWeek : '지난주 dddd LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : '%s 후',
        past : '%s 전',
        s : '몇 초',
        ss : '%d초',
        m : '1분',
        mm : '%d분',
        h : '한 시간',
        hh : '%d시간',
        d : '하루',
        dd : '%d일',
        M : '한 달',
        MM : '%d달',
        y : '일 년',
        yy : '%d년'
    },
    dayOfMonthOrdinalParse : /\d{1,2}(일|월|주)/,
    ordinal : function (number, period) {
        switch (period) {
            case 'd':
            case 'D':
            case 'DDD':
                return number + '일';
            case 'M':
                return number + '월';
            case 'w':
            case 'W':
                return number + '주';
            default:
                return number;
        }
    },
    meridiemParse : /오전|오후/,
    isPM : function (token) {
        return token === '오후';
    },
    meridiem : function (hour, minute, isUpper) {
        return hour < 12 ? '오전' : '오후';
    }
});

return ko;

})));


/***/ }),

/***/ "../../../../moment/locale/ky.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Kyrgyz [ky]
//! author : Chyngyz Arystan uulu : https://github.com/chyngyz

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';



var suffixes = {
    0: '-чү',
    1: '-чи',
    2: '-чи',
    3: '-чү',
    4: '-чү',
    5: '-чи',
    6: '-чы',
    7: '-чи',
    8: '-чи',
    9: '-чу',
    10: '-чу',
    20: '-чы',
    30: '-чу',
    40: '-чы',
    50: '-чү',
    60: '-чы',
    70: '-чи',
    80: '-чи',
    90: '-чу',
    100: '-чү'
};

var ky = moment.defineLocale('ky', {
    months : 'январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь'.split('_'),
    monthsShort : 'янв_фев_март_апр_май_июнь_июль_авг_сен_окт_ноя_дек'.split('_'),
    weekdays : 'Жекшемби_Дүйшөмбү_Шейшемби_Шаршемби_Бейшемби_Жума_Ишемби'.split('_'),
    weekdaysShort : 'Жек_Дүй_Шей_Шар_Бей_Жум_Ише'.split('_'),
    weekdaysMin : 'Жк_Дй_Шй_Шр_Бй_Жм_Иш'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD.MM.YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd, D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay : '[Бүгүн саат] LT',
        nextDay : '[Эртең саат] LT',
        nextWeek : 'dddd [саат] LT',
        lastDay : '[Кече саат] LT',
        lastWeek : '[Өткен аптанын] dddd [күнү] [саат] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : '%s ичинде',
        past : '%s мурун',
        s : 'бирнече секунд',
        ss : '%d секунд',
        m : 'бир мүнөт',
        mm : '%d мүнөт',
        h : 'бир саат',
        hh : '%d саат',
        d : 'бир күн',
        dd : '%d күн',
        M : 'бир ай',
        MM : '%d ай',
        y : 'бир жыл',
        yy : '%d жыл'
    },
    dayOfMonthOrdinalParse: /\d{1,2}-(чи|чы|чү|чу)/,
    ordinal : function (number) {
        var a = number % 10,
            b = number >= 100 ? 100 : null;
        return number + (suffixes[number] || suffixes[a] || suffixes[b]);
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

return ky;

})));


/***/ }),

/***/ "../../../../moment/locale/lb.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Luxembourgish [lb]
//! author : mweimerskirch : https://github.com/mweimerskirch
//! author : David Raison : https://github.com/kwisatz

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


function processRelativeTime(number, withoutSuffix, key, isFuture) {
    var format = {
        'm': ['eng Minutt', 'enger Minutt'],
        'h': ['eng Stonn', 'enger Stonn'],
        'd': ['een Dag', 'engem Dag'],
        'M': ['ee Mount', 'engem Mount'],
        'y': ['ee Joer', 'engem Joer']
    };
    return withoutSuffix ? format[key][0] : format[key][1];
}
function processFutureTime(string) {
    var number = string.substr(0, string.indexOf(' '));
    if (eifelerRegelAppliesToNumber(number)) {
        return 'a ' + string;
    }
    return 'an ' + string;
}
function processPastTime(string) {
    var number = string.substr(0, string.indexOf(' '));
    if (eifelerRegelAppliesToNumber(number)) {
        return 'viru ' + string;
    }
    return 'virun ' + string;
}
/**
 * Returns true if the word before the given number loses the '-n' ending.
 * e.g. 'an 10 Deeg' but 'a 5 Deeg'
 *
 * @param number {integer}
 * @returns {boolean}
 */
function eifelerRegelAppliesToNumber(number) {
    number = parseInt(number, 10);
    if (isNaN(number)) {
        return false;
    }
    if (number < 0) {
        // Negative Number --> always true
        return true;
    } else if (number < 10) {
        // Only 1 digit
        if (4 <= number && number <= 7) {
            return true;
        }
        return false;
    } else if (number < 100) {
        // 2 digits
        var lastDigit = number % 10, firstDigit = number / 10;
        if (lastDigit === 0) {
            return eifelerRegelAppliesToNumber(firstDigit);
        }
        return eifelerRegelAppliesToNumber(lastDigit);
    } else if (number < 10000) {
        // 3 or 4 digits --> recursively check first digit
        while (number >= 10) {
            number = number / 10;
        }
        return eifelerRegelAppliesToNumber(number);
    } else {
        // Anything larger than 4 digits: recursively check first n-3 digits
        number = number / 1000;
        return eifelerRegelAppliesToNumber(number);
    }
}

var lb = moment.defineLocale('lb', {
    months: 'Januar_Februar_Mäerz_Abrëll_Mee_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
    monthsShort: 'Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.'.split('_'),
    monthsParseExact : true,
    weekdays: 'Sonndeg_Méindeg_Dënschdeg_Mëttwoch_Donneschdeg_Freideg_Samschdeg'.split('_'),
    weekdaysShort: 'So._Mé._Dë._Më._Do._Fr._Sa.'.split('_'),
    weekdaysMin: 'So_Mé_Dë_Më_Do_Fr_Sa'.split('_'),
    weekdaysParseExact : true,
    longDateFormat: {
        LT: 'H:mm [Auer]',
        LTS: 'H:mm:ss [Auer]',
        L: 'DD.MM.YYYY',
        LL: 'D. MMMM YYYY',
        LLL: 'D. MMMM YYYY H:mm [Auer]',
        LLLL: 'dddd, D. MMMM YYYY H:mm [Auer]'
    },
    calendar: {
        sameDay: '[Haut um] LT',
        sameElse: 'L',
        nextDay: '[Muer um] LT',
        nextWeek: 'dddd [um] LT',
        lastDay: '[Gëschter um] LT',
        lastWeek: function () {
            // Different date string for 'Dënschdeg' (Tuesday) and 'Donneschdeg' (Thursday) due to phonological rule
            switch (this.day()) {
                case 2:
                case 4:
                    return '[Leschten] dddd [um] LT';
                default:
                    return '[Leschte] dddd [um] LT';
            }
        }
    },
    relativeTime : {
        future : processFutureTime,
        past : processPastTime,
        s : 'e puer Sekonnen',
        ss : '%d Sekonnen',
        m : processRelativeTime,
        mm : '%d Minutten',
        h : processRelativeTime,
        hh : '%d Stonnen',
        d : processRelativeTime,
        dd : '%d Deeg',
        M : processRelativeTime,
        MM : '%d Méint',
        y : processRelativeTime,
        yy : '%d Joer'
    },
    dayOfMonthOrdinalParse: /\d{1,2}\./,
    ordinal: '%d.',
    week: {
        dow: 1, // Monday is the first day of the week.
        doy: 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return lb;

})));


/***/ }),

/***/ "../../../../moment/locale/lo.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Lao [lo]
//! author : Ryan Hart : https://github.com/ryanhart2

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var lo = moment.defineLocale('lo', {
    months : 'ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ'.split('_'),
    monthsShort : 'ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ'.split('_'),
    weekdays : 'ອາທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ'.split('_'),
    weekdaysShort : 'ທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ'.split('_'),
    weekdaysMin : 'ທ_ຈ_ອຄ_ພ_ພຫ_ສກ_ສ'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'ວັນdddd D MMMM YYYY HH:mm'
    },
    meridiemParse: /ຕອນເຊົ້າ|ຕອນແລງ/,
    isPM: function (input) {
        return input === 'ຕອນແລງ';
    },
    meridiem : function (hour, minute, isLower) {
        if (hour < 12) {
            return 'ຕອນເຊົ້າ';
        } else {
            return 'ຕອນແລງ';
        }
    },
    calendar : {
        sameDay : '[ມື້ນີ້ເວລາ] LT',
        nextDay : '[ມື້ອື່ນເວລາ] LT',
        nextWeek : '[ວັນ]dddd[ໜ້າເວລາ] LT',
        lastDay : '[ມື້ວານນີ້ເວລາ] LT',
        lastWeek : '[ວັນ]dddd[ແລ້ວນີ້ເວລາ] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'ອີກ %s',
        past : '%sຜ່ານມາ',
        s : 'ບໍ່ເທົ່າໃດວິນາທີ',
        ss : '%d ວິນາທີ' ,
        m : '1 ນາທີ',
        mm : '%d ນາທີ',
        h : '1 ຊົ່ວໂມງ',
        hh : '%d ຊົ່ວໂມງ',
        d : '1 ມື້',
        dd : '%d ມື້',
        M : '1 ເດືອນ',
        MM : '%d ເດືອນ',
        y : '1 ປີ',
        yy : '%d ປີ'
    },
    dayOfMonthOrdinalParse: /(ທີ່)\d{1,2}/,
    ordinal : function (number) {
        return 'ທີ່' + number;
    }
});

return lo;

})));


/***/ }),

/***/ "../../../../moment/locale/lt.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Lithuanian [lt]
//! author : Mindaugas Mozūras : https://github.com/mmozuras

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var units = {
    'ss' : 'sekundė_sekundžių_sekundes',
    'm' : 'minutė_minutės_minutę',
    'mm': 'minutės_minučių_minutes',
    'h' : 'valanda_valandos_valandą',
    'hh': 'valandos_valandų_valandas',
    'd' : 'diena_dienos_dieną',
    'dd': 'dienos_dienų_dienas',
    'M' : 'mėnuo_mėnesio_mėnesį',
    'MM': 'mėnesiai_mėnesių_mėnesius',
    'y' : 'metai_metų_metus',
    'yy': 'metai_metų_metus'
};
function translateSeconds(number, withoutSuffix, key, isFuture) {
    if (withoutSuffix) {
        return 'kelios sekundės';
    } else {
        return isFuture ? 'kelių sekundžių' : 'kelias sekundes';
    }
}
function translateSingular(number, withoutSuffix, key, isFuture) {
    return withoutSuffix ? forms(key)[0] : (isFuture ? forms(key)[1] : forms(key)[2]);
}
function special(number) {
    return number % 10 === 0 || (number > 10 && number < 20);
}
function forms(key) {
    return units[key].split('_');
}
function translate(number, withoutSuffix, key, isFuture) {
    var result = number + ' ';
    if (number === 1) {
        return result + translateSingular(number, withoutSuffix, key[0], isFuture);
    } else if (withoutSuffix) {
        return result + (special(number) ? forms(key)[1] : forms(key)[0]);
    } else {
        if (isFuture) {
            return result + forms(key)[1];
        } else {
            return result + (special(number) ? forms(key)[1] : forms(key)[2]);
        }
    }
}
var lt = moment.defineLocale('lt', {
    months : {
        format: 'sausio_vasario_kovo_balandžio_gegužės_birželio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio'.split('_'),
        standalone: 'sausis_vasaris_kovas_balandis_gegužė_birželis_liepa_rugpjūtis_rugsėjis_spalis_lapkritis_gruodis'.split('_'),
        isFormat: /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?|MMMM?(\[[^\[\]]*\]|\s)+D[oD]?/
    },
    monthsShort : 'sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd'.split('_'),
    weekdays : {
        format: 'sekmadienį_pirmadienį_antradienį_trečiadienį_ketvirtadienį_penktadienį_šeštadienį'.split('_'),
        standalone: 'sekmadienis_pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis'.split('_'),
        isFormat: /dddd HH:mm/
    },
    weekdaysShort : 'Sek_Pir_Ant_Tre_Ket_Pen_Šeš'.split('_'),
    weekdaysMin : 'S_P_A_T_K_Pn_Š'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'YYYY-MM-DD',
        LL : 'YYYY [m.] MMMM D [d.]',
        LLL : 'YYYY [m.] MMMM D [d.], HH:mm [val.]',
        LLLL : 'YYYY [m.] MMMM D [d.], dddd, HH:mm [val.]',
        l : 'YYYY-MM-DD',
        ll : 'YYYY [m.] MMMM D [d.]',
        lll : 'YYYY [m.] MMMM D [d.], HH:mm [val.]',
        llll : 'YYYY [m.] MMMM D [d.], ddd, HH:mm [val.]'
    },
    calendar : {
        sameDay : '[Šiandien] LT',
        nextDay : '[Rytoj] LT',
        nextWeek : 'dddd LT',
        lastDay : '[Vakar] LT',
        lastWeek : '[Praėjusį] dddd LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'po %s',
        past : 'prieš %s',
        s : translateSeconds,
        ss : translate,
        m : translateSingular,
        mm : translate,
        h : translateSingular,
        hh : translate,
        d : translateSingular,
        dd : translate,
        M : translateSingular,
        MM : translate,
        y : translateSingular,
        yy : translate
    },
    dayOfMonthOrdinalParse: /\d{1,2}-oji/,
    ordinal : function (number) {
        return number + '-oji';
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return lt;

})));


/***/ }),

/***/ "../../../../moment/locale/lv.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Latvian [lv]
//! author : Kristaps Karlsons : https://github.com/skakri
//! author : Jānis Elmeris : https://github.com/JanisE

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var units = {
    'ss': 'sekundes_sekundēm_sekunde_sekundes'.split('_'),
    'm': 'minūtes_minūtēm_minūte_minūtes'.split('_'),
    'mm': 'minūtes_minūtēm_minūte_minūtes'.split('_'),
    'h': 'stundas_stundām_stunda_stundas'.split('_'),
    'hh': 'stundas_stundām_stunda_stundas'.split('_'),
    'd': 'dienas_dienām_diena_dienas'.split('_'),
    'dd': 'dienas_dienām_diena_dienas'.split('_'),
    'M': 'mēneša_mēnešiem_mēnesis_mēneši'.split('_'),
    'MM': 'mēneša_mēnešiem_mēnesis_mēneši'.split('_'),
    'y': 'gada_gadiem_gads_gadi'.split('_'),
    'yy': 'gada_gadiem_gads_gadi'.split('_')
};
/**
 * @param withoutSuffix boolean true = a length of time; false = before/after a period of time.
 */
function format(forms, number, withoutSuffix) {
    if (withoutSuffix) {
        // E.g. "21 minūte", "3 minūtes".
        return number % 10 === 1 && number % 100 !== 11 ? forms[2] : forms[3];
    } else {
        // E.g. "21 minūtes" as in "pēc 21 minūtes".
        // E.g. "3 minūtēm" as in "pēc 3 minūtēm".
        return number % 10 === 1 && number % 100 !== 11 ? forms[0] : forms[1];
    }
}
function relativeTimeWithPlural(number, withoutSuffix, key) {
    return number + ' ' + format(units[key], number, withoutSuffix);
}
function relativeTimeWithSingular(number, withoutSuffix, key) {
    return format(units[key], number, withoutSuffix);
}
function relativeSeconds(number, withoutSuffix) {
    return withoutSuffix ? 'dažas sekundes' : 'dažām sekundēm';
}

var lv = moment.defineLocale('lv', {
    months : 'janvāris_februāris_marts_aprīlis_maijs_jūnijs_jūlijs_augusts_septembris_oktobris_novembris_decembris'.split('_'),
    monthsShort : 'jan_feb_mar_apr_mai_jūn_jūl_aug_sep_okt_nov_dec'.split('_'),
    weekdays : 'svētdiena_pirmdiena_otrdiena_trešdiena_ceturtdiena_piektdiena_sestdiena'.split('_'),
    weekdaysShort : 'Sv_P_O_T_C_Pk_S'.split('_'),
    weekdaysMin : 'Sv_P_O_T_C_Pk_S'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD.MM.YYYY.',
        LL : 'YYYY. [gada] D. MMMM',
        LLL : 'YYYY. [gada] D. MMMM, HH:mm',
        LLLL : 'YYYY. [gada] D. MMMM, dddd, HH:mm'
    },
    calendar : {
        sameDay : '[Šodien pulksten] LT',
        nextDay : '[Rīt pulksten] LT',
        nextWeek : 'dddd [pulksten] LT',
        lastDay : '[Vakar pulksten] LT',
        lastWeek : '[Pagājušā] dddd [pulksten] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'pēc %s',
        past : 'pirms %s',
        s : relativeSeconds,
        ss : relativeTimeWithPlural,
        m : relativeTimeWithSingular,
        mm : relativeTimeWithPlural,
        h : relativeTimeWithSingular,
        hh : relativeTimeWithPlural,
        d : relativeTimeWithSingular,
        dd : relativeTimeWithPlural,
        M : relativeTimeWithSingular,
        MM : relativeTimeWithPlural,
        y : relativeTimeWithSingular,
        yy : relativeTimeWithPlural
    },
    dayOfMonthOrdinalParse: /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return lv;

})));


/***/ }),

/***/ "../../../../moment/locale/me.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Montenegrin [me]
//! author : Miodrag Nikač <miodrag@restartit.me> : https://github.com/miodragnikac

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var translator = {
    words: { //Different grammatical cases
        ss: ['sekund', 'sekunda', 'sekundi'],
        m: ['jedan minut', 'jednog minuta'],
        mm: ['minut', 'minuta', 'minuta'],
        h: ['jedan sat', 'jednog sata'],
        hh: ['sat', 'sata', 'sati'],
        dd: ['dan', 'dana', 'dana'],
        MM: ['mjesec', 'mjeseca', 'mjeseci'],
        yy: ['godina', 'godine', 'godina']
    },
    correctGrammaticalCase: function (number, wordKey) {
        return number === 1 ? wordKey[0] : (number >= 2 && number <= 4 ? wordKey[1] : wordKey[2]);
    },
    translate: function (number, withoutSuffix, key) {
        var wordKey = translator.words[key];
        if (key.length === 1) {
            return withoutSuffix ? wordKey[0] : wordKey[1];
        } else {
            return number + ' ' + translator.correctGrammaticalCase(number, wordKey);
        }
    }
};

var me = moment.defineLocale('me', {
    months: 'januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar'.split('_'),
    monthsShort: 'jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.'.split('_'),
    monthsParseExact : true,
    weekdays: 'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split('_'),
    weekdaysShort: 'ned._pon._uto._sri._čet._pet._sub.'.split('_'),
    weekdaysMin: 'ne_po_ut_sr_če_pe_su'.split('_'),
    weekdaysParseExact : true,
    longDateFormat: {
        LT: 'H:mm',
        LTS : 'H:mm:ss',
        L: 'DD.MM.YYYY',
        LL: 'D. MMMM YYYY',
        LLL: 'D. MMMM YYYY H:mm',
        LLLL: 'dddd, D. MMMM YYYY H:mm'
    },
    calendar: {
        sameDay: '[danas u] LT',
        nextDay: '[sjutra u] LT',

        nextWeek: function () {
            switch (this.day()) {
                case 0:
                    return '[u] [nedjelju] [u] LT';
                case 3:
                    return '[u] [srijedu] [u] LT';
                case 6:
                    return '[u] [subotu] [u] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                    return '[u] dddd [u] LT';
            }
        },
        lastDay  : '[juče u] LT',
        lastWeek : function () {
            var lastWeekDays = [
                '[prošle] [nedjelje] [u] LT',
                '[prošlog] [ponedjeljka] [u] LT',
                '[prošlog] [utorka] [u] LT',
                '[prošle] [srijede] [u] LT',
                '[prošlog] [četvrtka] [u] LT',
                '[prošlog] [petka] [u] LT',
                '[prošle] [subote] [u] LT'
            ];
            return lastWeekDays[this.day()];
        },
        sameElse : 'L'
    },
    relativeTime : {
        future : 'za %s',
        past   : 'prije %s',
        s      : 'nekoliko sekundi',
        ss     : translator.translate,
        m      : translator.translate,
        mm     : translator.translate,
        h      : translator.translate,
        hh     : translator.translate,
        d      : 'dan',
        dd     : translator.translate,
        M      : 'mjesec',
        MM     : translator.translate,
        y      : 'godinu',
        yy     : translator.translate
    },
    dayOfMonthOrdinalParse: /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

return me;

})));


/***/ }),

/***/ "../../../../moment/locale/mi.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Maori [mi]
//! author : John Corrigan <robbiecloset@gmail.com> : https://github.com/johnideal

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var mi = moment.defineLocale('mi', {
    months: 'Kohi-tāte_Hui-tanguru_Poutū-te-rangi_Paenga-whāwhā_Haratua_Pipiri_Hōngoingoi_Here-turi-kōkā_Mahuru_Whiringa-ā-nuku_Whiringa-ā-rangi_Hakihea'.split('_'),
    monthsShort: 'Kohi_Hui_Pou_Pae_Hara_Pipi_Hōngoi_Here_Mahu_Whi-nu_Whi-ra_Haki'.split('_'),
    monthsRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
    monthsStrictRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
    monthsShortRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
    monthsShortStrictRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,2}/i,
    weekdays: 'Rātapu_Mane_Tūrei_Wenerei_Tāite_Paraire_Hātarei'.split('_'),
    weekdaysShort: 'Ta_Ma_Tū_We_Tāi_Pa_Hā'.split('_'),
    weekdaysMin: 'Ta_Ma_Tū_We_Tāi_Pa_Hā'.split('_'),
    longDateFormat: {
        LT: 'HH:mm',
        LTS: 'HH:mm:ss',
        L: 'DD/MM/YYYY',
        LL: 'D MMMM YYYY',
        LLL: 'D MMMM YYYY [i] HH:mm',
        LLLL: 'dddd, D MMMM YYYY [i] HH:mm'
    },
    calendar: {
        sameDay: '[i teie mahana, i] LT',
        nextDay: '[apopo i] LT',
        nextWeek: 'dddd [i] LT',
        lastDay: '[inanahi i] LT',
        lastWeek: 'dddd [whakamutunga i] LT',
        sameElse: 'L'
    },
    relativeTime: {
        future: 'i roto i %s',
        past: '%s i mua',
        s: 'te hēkona ruarua',
        ss: '%d hēkona',
        m: 'he meneti',
        mm: '%d meneti',
        h: 'te haora',
        hh: '%d haora',
        d: 'he ra',
        dd: '%d ra',
        M: 'he marama',
        MM: '%d marama',
        y: 'he tau',
        yy: '%d tau'
    },
    dayOfMonthOrdinalParse: /\d{1,2}º/,
    ordinal: '%dº',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return mi;

})));


/***/ }),

/***/ "../../../../moment/locale/mk.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Macedonian [mk]
//! author : Borislav Mickov : https://github.com/B0k0

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var mk = moment.defineLocale('mk', {
    months : 'јануари_февруари_март_април_мај_јуни_јули_август_септември_октомври_ноември_декември'.split('_'),
    monthsShort : 'јан_фев_мар_апр_мај_јун_јул_авг_сеп_окт_ное_дек'.split('_'),
    weekdays : 'недела_понеделник_вторник_среда_четврток_петок_сабота'.split('_'),
    weekdaysShort : 'нед_пон_вто_сре_чет_пет_саб'.split('_'),
    weekdaysMin : 'нe_пo_вт_ср_че_пе_сa'.split('_'),
    longDateFormat : {
        LT : 'H:mm',
        LTS : 'H:mm:ss',
        L : 'D.MM.YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY H:mm',
        LLLL : 'dddd, D MMMM YYYY H:mm'
    },
    calendar : {
        sameDay : '[Денес во] LT',
        nextDay : '[Утре во] LT',
        nextWeek : '[Во] dddd [во] LT',
        lastDay : '[Вчера во] LT',
        lastWeek : function () {
            switch (this.day()) {
                case 0:
                case 3:
                case 6:
                    return '[Изминатата] dddd [во] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                    return '[Изминатиот] dddd [во] LT';
            }
        },
        sameElse : 'L'
    },
    relativeTime : {
        future : 'после %s',
        past : 'пред %s',
        s : 'неколку секунди',
        ss : '%d секунди',
        m : 'минута',
        mm : '%d минути',
        h : 'час',
        hh : '%d часа',
        d : 'ден',
        dd : '%d дена',
        M : 'месец',
        MM : '%d месеци',
        y : 'година',
        yy : '%d години'
    },
    dayOfMonthOrdinalParse: /\d{1,2}-(ев|ен|ти|ви|ри|ми)/,
    ordinal : function (number) {
        var lastDigit = number % 10,
            last2Digits = number % 100;
        if (number === 0) {
            return number + '-ев';
        } else if (last2Digits === 0) {
            return number + '-ен';
        } else if (last2Digits > 10 && last2Digits < 20) {
            return number + '-ти';
        } else if (lastDigit === 1) {
            return number + '-ви';
        } else if (lastDigit === 2) {
            return number + '-ри';
        } else if (lastDigit === 7 || lastDigit === 8) {
            return number + '-ми';
        } else {
            return number + '-ти';
        }
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

return mk;

})));


/***/ }),

/***/ "../../../../moment/locale/ml.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Malayalam [ml]
//! author : Floyd Pink : https://github.com/floydpink

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var ml = moment.defineLocale('ml', {
    months : 'ജനുവരി_ഫെബ്രുവരി_മാർച്ച്_ഏപ്രിൽ_മേയ്_ജൂൺ_ജൂലൈ_ഓഗസ്റ്റ്_സെപ്റ്റംബർ_ഒക്ടോബർ_നവംബർ_ഡിസംബർ'.split('_'),
    monthsShort : 'ജനു._ഫെബ്രു._മാർ._ഏപ്രി._മേയ്_ജൂൺ_ജൂലൈ._ഓഗ._സെപ്റ്റ._ഒക്ടോ._നവം._ഡിസം.'.split('_'),
    monthsParseExact : true,
    weekdays : 'ഞായറാഴ്ച_തിങ്കളാഴ്ച_ചൊവ്വാഴ്ച_ബുധനാഴ്ച_വ്യാഴാഴ്ച_വെള്ളിയാഴ്ച_ശനിയാഴ്ച'.split('_'),
    weekdaysShort : 'ഞായർ_തിങ്കൾ_ചൊവ്വ_ബുധൻ_വ്യാഴം_വെള്ളി_ശനി'.split('_'),
    weekdaysMin : 'ഞാ_തി_ചൊ_ബു_വ്യാ_വെ_ശ'.split('_'),
    longDateFormat : {
        LT : 'A h:mm -നു',
        LTS : 'A h:mm:ss -നു',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY, A h:mm -നു',
        LLLL : 'dddd, D MMMM YYYY, A h:mm -നു'
    },
    calendar : {
        sameDay : '[ഇന്ന്] LT',
        nextDay : '[നാളെ] LT',
        nextWeek : 'dddd, LT',
        lastDay : '[ഇന്നലെ] LT',
        lastWeek : '[കഴിഞ്ഞ] dddd, LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : '%s കഴിഞ്ഞ്',
        past : '%s മുൻപ്',
        s : 'അൽപ നിമിഷങ്ങൾ',
        ss : '%d സെക്കൻഡ്',
        m : 'ഒരു മിനിറ്റ്',
        mm : '%d മിനിറ്റ്',
        h : 'ഒരു മണിക്കൂർ',
        hh : '%d മണിക്കൂർ',
        d : 'ഒരു ദിവസം',
        dd : '%d ദിവസം',
        M : 'ഒരു മാസം',
        MM : '%d മാസം',
        y : 'ഒരു വർഷം',
        yy : '%d വർഷം'
    },
    meridiemParse: /രാത്രി|രാവിലെ|ഉച്ച കഴിഞ്ഞ്|വൈകുന്നേരം|രാത്രി/i,
    meridiemHour : function (hour, meridiem) {
        if (hour === 12) {
            hour = 0;
        }
        if ((meridiem === 'രാത്രി' && hour >= 4) ||
                meridiem === 'ഉച്ച കഴിഞ്ഞ്' ||
                meridiem === 'വൈകുന്നേരം') {
            return hour + 12;
        } else {
            return hour;
        }
    },
    meridiem : function (hour, minute, isLower) {
        if (hour < 4) {
            return 'രാത്രി';
        } else if (hour < 12) {
            return 'രാവിലെ';
        } else if (hour < 17) {
            return 'ഉച്ച കഴിഞ്ഞ്';
        } else if (hour < 20) {
            return 'വൈകുന്നേരം';
        } else {
            return 'രാത്രി';
        }
    }
});

return ml;

})));


/***/ }),

/***/ "../../../../moment/locale/mr.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Marathi [mr]
//! author : Harshad Kale : https://github.com/kalehv
//! author : Vivek Athalye : https://github.com/vnathalye

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var symbolMap = {
    '1': '१',
    '2': '२',
    '3': '३',
    '4': '४',
    '5': '५',
    '6': '६',
    '7': '७',
    '8': '८',
    '9': '९',
    '0': '०'
};
var numberMap = {
    '१': '1',
    '२': '2',
    '३': '3',
    '४': '4',
    '५': '5',
    '६': '6',
    '७': '7',
    '८': '8',
    '९': '9',
    '०': '0'
};

function relativeTimeMr(number, withoutSuffix, string, isFuture)
{
    var output = '';
    if (withoutSuffix) {
        switch (string) {
            case 's': output = 'काही सेकंद'; break;
            case 'ss': output = '%d सेकंद'; break;
            case 'm': output = 'एक मिनिट'; break;
            case 'mm': output = '%d मिनिटे'; break;
            case 'h': output = 'एक तास'; break;
            case 'hh': output = '%d तास'; break;
            case 'd': output = 'एक दिवस'; break;
            case 'dd': output = '%d दिवस'; break;
            case 'M': output = 'एक महिना'; break;
            case 'MM': output = '%d महिने'; break;
            case 'y': output = 'एक वर्ष'; break;
            case 'yy': output = '%d वर्षे'; break;
        }
    }
    else {
        switch (string) {
            case 's': output = 'काही सेकंदां'; break;
            case 'ss': output = '%d सेकंदां'; break;
            case 'm': output = 'एका मिनिटा'; break;
            case 'mm': output = '%d मिनिटां'; break;
            case 'h': output = 'एका तासा'; break;
            case 'hh': output = '%d तासां'; break;
            case 'd': output = 'एका दिवसा'; break;
            case 'dd': output = '%d दिवसां'; break;
            case 'M': output = 'एका महिन्या'; break;
            case 'MM': output = '%d महिन्यां'; break;
            case 'y': output = 'एका वर्षा'; break;
            case 'yy': output = '%d वर्षां'; break;
        }
    }
    return output.replace(/%d/i, number);
}

var mr = moment.defineLocale('mr', {
    months : 'जानेवारी_फेब्रुवारी_मार्च_एप्रिल_मे_जून_जुलै_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर'.split('_'),
    monthsShort: 'जाने._फेब्रु._मार्च._एप्रि._मे._जून._जुलै._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.'.split('_'),
    monthsParseExact : true,
    weekdays : 'रविवार_सोमवार_मंगळवार_बुधवार_गुरूवार_शुक्रवार_शनिवार'.split('_'),
    weekdaysShort : 'रवि_सोम_मंगळ_बुध_गुरू_शुक्र_शनि'.split('_'),
    weekdaysMin : 'र_सो_मं_बु_गु_शु_श'.split('_'),
    longDateFormat : {
        LT : 'A h:mm वाजता',
        LTS : 'A h:mm:ss वाजता',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY, A h:mm वाजता',
        LLLL : 'dddd, D MMMM YYYY, A h:mm वाजता'
    },
    calendar : {
        sameDay : '[आज] LT',
        nextDay : '[उद्या] LT',
        nextWeek : 'dddd, LT',
        lastDay : '[काल] LT',
        lastWeek: '[मागील] dddd, LT',
        sameElse : 'L'
    },
    relativeTime : {
        future: '%sमध्ये',
        past: '%sपूर्वी',
        s: relativeTimeMr,
        ss: relativeTimeMr,
        m: relativeTimeMr,
        mm: relativeTimeMr,
        h: relativeTimeMr,
        hh: relativeTimeMr,
        d: relativeTimeMr,
        dd: relativeTimeMr,
        M: relativeTimeMr,
        MM: relativeTimeMr,
        y: relativeTimeMr,
        yy: relativeTimeMr
    },
    preparse: function (string) {
        return string.replace(/[१२३४५६७८९०]/g, function (match) {
            return numberMap[match];
        });
    },
    postformat: function (string) {
        return string.replace(/\d/g, function (match) {
            return symbolMap[match];
        });
    },
    meridiemParse: /रात्री|सकाळी|दुपारी|सायंकाळी/,
    meridiemHour : function (hour, meridiem) {
        if (hour === 12) {
            hour = 0;
        }
        if (meridiem === 'रात्री') {
            return hour < 4 ? hour : hour + 12;
        } else if (meridiem === 'सकाळी') {
            return hour;
        } else if (meridiem === 'दुपारी') {
            return hour >= 10 ? hour : hour + 12;
        } else if (meridiem === 'सायंकाळी') {
            return hour + 12;
        }
    },
    meridiem: function (hour, minute, isLower) {
        if (hour < 4) {
            return 'रात्री';
        } else if (hour < 10) {
            return 'सकाळी';
        } else if (hour < 17) {
            return 'दुपारी';
        } else if (hour < 20) {
            return 'सायंकाळी';
        } else {
            return 'रात्री';
        }
    },
    week : {
        dow : 0, // Sunday is the first day of the week.
        doy : 6  // The week that contains Jan 1st is the first week of the year.
    }
});

return mr;

})));


/***/ }),

/***/ "../../../../moment/locale/ms-my.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Malay [ms-my]
//! note : DEPRECATED, the correct one is [ms]
//! author : Weldan Jamili : https://github.com/weldan

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var msMy = moment.defineLocale('ms-my', {
    months : 'Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember'.split('_'),
    monthsShort : 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis'.split('_'),
    weekdays : 'Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu'.split('_'),
    weekdaysShort : 'Ahd_Isn_Sel_Rab_Kha_Jum_Sab'.split('_'),
    weekdaysMin : 'Ah_Is_Sl_Rb_Km_Jm_Sb'.split('_'),
    longDateFormat : {
        LT : 'HH.mm',
        LTS : 'HH.mm.ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY [pukul] HH.mm',
        LLLL : 'dddd, D MMMM YYYY [pukul] HH.mm'
    },
    meridiemParse: /pagi|tengahari|petang|malam/,
    meridiemHour: function (hour, meridiem) {
        if (hour === 12) {
            hour = 0;
        }
        if (meridiem === 'pagi') {
            return hour;
        } else if (meridiem === 'tengahari') {
            return hour >= 11 ? hour : hour + 12;
        } else if (meridiem === 'petang' || meridiem === 'malam') {
            return hour + 12;
        }
    },
    meridiem : function (hours, minutes, isLower) {
        if (hours < 11) {
            return 'pagi';
        } else if (hours < 15) {
            return 'tengahari';
        } else if (hours < 19) {
            return 'petang';
        } else {
            return 'malam';
        }
    },
    calendar : {
        sameDay : '[Hari ini pukul] LT',
        nextDay : '[Esok pukul] LT',
        nextWeek : 'dddd [pukul] LT',
        lastDay : '[Kelmarin pukul] LT',
        lastWeek : 'dddd [lepas pukul] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'dalam %s',
        past : '%s yang lepas',
        s : 'beberapa saat',
        ss : '%d saat',
        m : 'seminit',
        mm : '%d minit',
        h : 'sejam',
        hh : '%d jam',
        d : 'sehari',
        dd : '%d hari',
        M : 'sebulan',
        MM : '%d bulan',
        y : 'setahun',
        yy : '%d tahun'
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

return msMy;

})));


/***/ }),

/***/ "../../../../moment/locale/ms.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Malay [ms]
//! author : Weldan Jamili : https://github.com/weldan

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var ms = moment.defineLocale('ms', {
    months : 'Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember'.split('_'),
    monthsShort : 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis'.split('_'),
    weekdays : 'Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu'.split('_'),
    weekdaysShort : 'Ahd_Isn_Sel_Rab_Kha_Jum_Sab'.split('_'),
    weekdaysMin : 'Ah_Is_Sl_Rb_Km_Jm_Sb'.split('_'),
    longDateFormat : {
        LT : 'HH.mm',
        LTS : 'HH.mm.ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY [pukul] HH.mm',
        LLLL : 'dddd, D MMMM YYYY [pukul] HH.mm'
    },
    meridiemParse: /pagi|tengahari|petang|malam/,
    meridiemHour: function (hour, meridiem) {
        if (hour === 12) {
            hour = 0;
        }
        if (meridiem === 'pagi') {
            return hour;
        } else if (meridiem === 'tengahari') {
            return hour >= 11 ? hour : hour + 12;
        } else if (meridiem === 'petang' || meridiem === 'malam') {
            return hour + 12;
        }
    },
    meridiem : function (hours, minutes, isLower) {
        if (hours < 11) {
            return 'pagi';
        } else if (hours < 15) {
            return 'tengahari';
        } else if (hours < 19) {
            return 'petang';
        } else {
            return 'malam';
        }
    },
    calendar : {
        sameDay : '[Hari ini pukul] LT',
        nextDay : '[Esok pukul] LT',
        nextWeek : 'dddd [pukul] LT',
        lastDay : '[Kelmarin pukul] LT',
        lastWeek : 'dddd [lepas pukul] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'dalam %s',
        past : '%s yang lepas',
        s : 'beberapa saat',
        ss : '%d saat',
        m : 'seminit',
        mm : '%d minit',
        h : 'sejam',
        hh : '%d jam',
        d : 'sehari',
        dd : '%d hari',
        M : 'sebulan',
        MM : '%d bulan',
        y : 'setahun',
        yy : '%d tahun'
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

return ms;

})));


/***/ }),

/***/ "../../../../moment/locale/mt.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Maltese (Malta) [mt]
//! author : Alessandro Maruccia : https://github.com/alesma

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var mt = moment.defineLocale('mt', {
    months : 'Jannar_Frar_Marzu_April_Mejju_Ġunju_Lulju_Awwissu_Settembru_Ottubru_Novembru_Diċembru'.split('_'),
    monthsShort : 'Jan_Fra_Mar_Apr_Mej_Ġun_Lul_Aww_Set_Ott_Nov_Diċ'.split('_'),
    weekdays : 'Il-Ħadd_It-Tnejn_It-Tlieta_L-Erbgħa_Il-Ħamis_Il-Ġimgħa_Is-Sibt'.split('_'),
    weekdaysShort : 'Ħad_Tne_Tli_Erb_Ħam_Ġim_Sib'.split('_'),
    weekdaysMin : 'Ħa_Tn_Tl_Er_Ħa_Ġi_Si'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd, D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay : '[Illum fil-]LT',
        nextDay : '[Għada fil-]LT',
        nextWeek : 'dddd [fil-]LT',
        lastDay : '[Il-bieraħ fil-]LT',
        lastWeek : 'dddd [li għadda] [fil-]LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'f’ %s',
        past : '%s ilu',
        s : 'ftit sekondi',
        ss : '%d sekondi',
        m : 'minuta',
        mm : '%d minuti',
        h : 'siegħa',
        hh : '%d siegħat',
        d : 'ġurnata',
        dd : '%d ġranet',
        M : 'xahar',
        MM : '%d xhur',
        y : 'sena',
        yy : '%d sni'
    },
    dayOfMonthOrdinalParse : /\d{1,2}º/,
    ordinal: '%dº',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return mt;

})));


/***/ }),

/***/ "../../../../moment/locale/my.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Burmese [my]
//! author : Squar team, mysquar.com
//! author : David Rossellat : https://github.com/gholadr
//! author : Tin Aung Lin : https://github.com/thanyawzinmin

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var symbolMap = {
    '1': '၁',
    '2': '၂',
    '3': '၃',
    '4': '၄',
    '5': '၅',
    '6': '၆',
    '7': '၇',
    '8': '၈',
    '9': '၉',
    '0': '၀'
};
var numberMap = {
    '၁': '1',
    '၂': '2',
    '၃': '3',
    '၄': '4',
    '၅': '5',
    '၆': '6',
    '၇': '7',
    '၈': '8',
    '၉': '9',
    '၀': '0'
};

var my = moment.defineLocale('my', {
    months: 'ဇန်နဝါရီ_ဖေဖော်ဝါရီ_မတ်_ဧပြီ_မေ_ဇွန်_ဇူလိုင်_သြဂုတ်_စက်တင်ဘာ_အောက်တိုဘာ_နိုဝင်ဘာ_ဒီဇင်ဘာ'.split('_'),
    monthsShort: 'ဇန်_ဖေ_မတ်_ပြီ_မေ_ဇွန်_လိုင်_သြ_စက်_အောက်_နို_ဒီ'.split('_'),
    weekdays: 'တနင်္ဂနွေ_တနင်္လာ_အင်္ဂါ_ဗုဒ္ဓဟူး_ကြာသပတေး_သောကြာ_စနေ'.split('_'),
    weekdaysShort: 'နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ'.split('_'),
    weekdaysMin: 'နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ'.split('_'),

    longDateFormat: {
        LT: 'HH:mm',
        LTS: 'HH:mm:ss',
        L: 'DD/MM/YYYY',
        LL: 'D MMMM YYYY',
        LLL: 'D MMMM YYYY HH:mm',
        LLLL: 'dddd D MMMM YYYY HH:mm'
    },
    calendar: {
        sameDay: '[ယနေ.] LT [မှာ]',
        nextDay: '[မနက်ဖြန်] LT [မှာ]',
        nextWeek: 'dddd LT [မှာ]',
        lastDay: '[မနေ.က] LT [မှာ]',
        lastWeek: '[ပြီးခဲ့သော] dddd LT [မှာ]',
        sameElse: 'L'
    },
    relativeTime: {
        future: 'လာမည့် %s မှာ',
        past: 'လွန်ခဲ့သော %s က',
        s: 'စက္ကန်.အနည်းငယ်',
        ss : '%d စက္ကန့်',
        m: 'တစ်မိနစ်',
        mm: '%d မိနစ်',
        h: 'တစ်နာရီ',
        hh: '%d နာရီ',
        d: 'တစ်ရက်',
        dd: '%d ရက်',
        M: 'တစ်လ',
        MM: '%d လ',
        y: 'တစ်နှစ်',
        yy: '%d နှစ်'
    },
    preparse: function (string) {
        return string.replace(/[၁၂၃၄၅၆၇၈၉၀]/g, function (match) {
            return numberMap[match];
        });
    },
    postformat: function (string) {
        return string.replace(/\d/g, function (match) {
            return symbolMap[match];
        });
    },
    week: {
        dow: 1, // Monday is the first day of the week.
        doy: 4 // The week that contains Jan 1st is the first week of the year.
    }
});

return my;

})));


/***/ }),

/***/ "../../../../moment/locale/nb.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Norwegian Bokmål [nb]
//! authors : Espen Hovlandsdal : https://github.com/rexxars
//!           Sigurd Gartmann : https://github.com/sigurdga

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var nb = moment.defineLocale('nb', {
    months : 'januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember'.split('_'),
    monthsShort : 'jan._feb._mars_april_mai_juni_juli_aug._sep._okt._nov._des.'.split('_'),
    monthsParseExact : true,
    weekdays : 'søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag'.split('_'),
    weekdaysShort : 'sø._ma._ti._on._to._fr._lø.'.split('_'),
    weekdaysMin : 'sø_ma_ti_on_to_fr_lø'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD.MM.YYYY',
        LL : 'D. MMMM YYYY',
        LLL : 'D. MMMM YYYY [kl.] HH:mm',
        LLLL : 'dddd D. MMMM YYYY [kl.] HH:mm'
    },
    calendar : {
        sameDay: '[i dag kl.] LT',
        nextDay: '[i morgen kl.] LT',
        nextWeek: 'dddd [kl.] LT',
        lastDay: '[i går kl.] LT',
        lastWeek: '[forrige] dddd [kl.] LT',
        sameElse: 'L'
    },
    relativeTime : {
        future : 'om %s',
        past : '%s siden',
        s : 'noen sekunder',
        ss : '%d sekunder',
        m : 'ett minutt',
        mm : '%d minutter',
        h : 'en time',
        hh : '%d timer',
        d : 'en dag',
        dd : '%d dager',
        M : 'en måned',
        MM : '%d måneder',
        y : 'ett år',
        yy : '%d år'
    },
    dayOfMonthOrdinalParse: /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return nb;

})));


/***/ }),

/***/ "../../../../moment/locale/ne.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Nepalese [ne]
//! author : suvash : https://github.com/suvash

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var symbolMap = {
    '1': '१',
    '2': '२',
    '3': '३',
    '4': '४',
    '5': '५',
    '6': '६',
    '7': '७',
    '8': '८',
    '9': '९',
    '0': '०'
};
var numberMap = {
    '१': '1',
    '२': '2',
    '३': '3',
    '४': '4',
    '५': '5',
    '६': '6',
    '७': '7',
    '८': '8',
    '९': '9',
    '०': '0'
};

var ne = moment.defineLocale('ne', {
    months : 'जनवरी_फेब्रुवरी_मार्च_अप्रिल_मई_जुन_जुलाई_अगष्ट_सेप्टेम्बर_अक्टोबर_नोभेम्बर_डिसेम्बर'.split('_'),
    monthsShort : 'जन._फेब्रु._मार्च_अप्रि._मई_जुन_जुलाई._अग._सेप्ट._अक्टो._नोभे._डिसे.'.split('_'),
    monthsParseExact : true,
    weekdays : 'आइतबार_सोमबार_मङ्गलबार_बुधबार_बिहिबार_शुक्रबार_शनिबार'.split('_'),
    weekdaysShort : 'आइत._सोम._मङ्गल._बुध._बिहि._शुक्र._शनि.'.split('_'),
    weekdaysMin : 'आ._सो._मं._बु._बि._शु._श.'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'Aको h:mm बजे',
        LTS : 'Aको h:mm:ss बजे',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY, Aको h:mm बजे',
        LLLL : 'dddd, D MMMM YYYY, Aको h:mm बजे'
    },
    preparse: function (string) {
        return string.replace(/[१२३४५६७८९०]/g, function (match) {
            return numberMap[match];
        });
    },
    postformat: function (string) {
        return string.replace(/\d/g, function (match) {
            return symbolMap[match];
        });
    },
    meridiemParse: /राति|बिहान|दिउँसो|साँझ/,
    meridiemHour : function (hour, meridiem) {
        if (hour === 12) {
            hour = 0;
        }
        if (meridiem === 'राति') {
            return hour < 4 ? hour : hour + 12;
        } else if (meridiem === 'बिहान') {
            return hour;
        } else if (meridiem === 'दिउँसो') {
            return hour >= 10 ? hour : hour + 12;
        } else if (meridiem === 'साँझ') {
            return hour + 12;
        }
    },
    meridiem : function (hour, minute, isLower) {
        if (hour < 3) {
            return 'राति';
        } else if (hour < 12) {
            return 'बिहान';
        } else if (hour < 16) {
            return 'दिउँसो';
        } else if (hour < 20) {
            return 'साँझ';
        } else {
            return 'राति';
        }
    },
    calendar : {
        sameDay : '[आज] LT',
        nextDay : '[भोलि] LT',
        nextWeek : '[आउँदो] dddd[,] LT',
        lastDay : '[हिजो] LT',
        lastWeek : '[गएको] dddd[,] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : '%sमा',
        past : '%s अगाडि',
        s : 'केही क्षण',
        ss : '%d सेकेण्ड',
        m : 'एक मिनेट',
        mm : '%d मिनेट',
        h : 'एक घण्टा',
        hh : '%d घण्टा',
        d : 'एक दिन',
        dd : '%d दिन',
        M : 'एक महिना',
        MM : '%d महिना',
        y : 'एक बर्ष',
        yy : '%d बर्ष'
    },
    week : {
        dow : 0, // Sunday is the first day of the week.
        doy : 6  // The week that contains Jan 1st is the first week of the year.
    }
});

return ne;

})));


/***/ }),

/***/ "../../../../moment/locale/nl-be.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Dutch (Belgium) [nl-be]
//! author : Joris Röling : https://github.com/jorisroling
//! author : Jacob Middag : https://github.com/middagj

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var monthsShortWithDots = 'jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.'.split('_');
var monthsShortWithoutDots = 'jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec'.split('_');

var monthsParse = [/^jan/i, /^feb/i, /^maart|mrt.?$/i, /^apr/i, /^mei$/i, /^jun[i.]?$/i, /^jul[i.]?$/i, /^aug/i, /^sep/i, /^okt/i, /^nov/i, /^dec/i];
var monthsRegex = /^(januari|februari|maart|april|mei|april|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;

var nlBe = moment.defineLocale('nl-be', {
    months : 'januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december'.split('_'),
    monthsShort : function (m, format) {
        if (!m) {
            return monthsShortWithDots;
        } else if (/-MMM-/.test(format)) {
            return monthsShortWithoutDots[m.month()];
        } else {
            return monthsShortWithDots[m.month()];
        }
    },

    monthsRegex: monthsRegex,
    monthsShortRegex: monthsRegex,
    monthsStrictRegex: /^(januari|februari|maart|mei|ju[nl]i|april|augustus|september|oktober|november|december)/i,
    monthsShortStrictRegex: /^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,

    monthsParse : monthsParse,
    longMonthsParse : monthsParse,
    shortMonthsParse : monthsParse,

    weekdays : 'zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag'.split('_'),
    weekdaysShort : 'zo._ma._di._wo._do._vr._za.'.split('_'),
    weekdaysMin : 'zo_ma_di_wo_do_vr_za'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay: '[vandaag om] LT',
        nextDay: '[morgen om] LT',
        nextWeek: 'dddd [om] LT',
        lastDay: '[gisteren om] LT',
        lastWeek: '[afgelopen] dddd [om] LT',
        sameElse: 'L'
    },
    relativeTime : {
        future : 'over %s',
        past : '%s geleden',
        s : 'een paar seconden',
        ss : '%d seconden',
        m : 'één minuut',
        mm : '%d minuten',
        h : 'één uur',
        hh : '%d uur',
        d : 'één dag',
        dd : '%d dagen',
        M : 'één maand',
        MM : '%d maanden',
        y : 'één jaar',
        yy : '%d jaar'
    },
    dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
    ordinal : function (number) {
        return number + ((number === 1 || number === 8 || number >= 20) ? 'ste' : 'de');
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return nlBe;

})));


/***/ }),

/***/ "../../../../moment/locale/nl.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Dutch [nl]
//! author : Joris Röling : https://github.com/jorisroling
//! author : Jacob Middag : https://github.com/middagj

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var monthsShortWithDots = 'jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.'.split('_');
var monthsShortWithoutDots = 'jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec'.split('_');

var monthsParse = [/^jan/i, /^feb/i, /^maart|mrt.?$/i, /^apr/i, /^mei$/i, /^jun[i.]?$/i, /^jul[i.]?$/i, /^aug/i, /^sep/i, /^okt/i, /^nov/i, /^dec/i];
var monthsRegex = /^(januari|februari|maart|april|mei|april|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;

var nl = moment.defineLocale('nl', {
    months : 'januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december'.split('_'),
    monthsShort : function (m, format) {
        if (!m) {
            return monthsShortWithDots;
        } else if (/-MMM-/.test(format)) {
            return monthsShortWithoutDots[m.month()];
        } else {
            return monthsShortWithDots[m.month()];
        }
    },

    monthsRegex: monthsRegex,
    monthsShortRegex: monthsRegex,
    monthsStrictRegex: /^(januari|februari|maart|mei|ju[nl]i|april|augustus|september|oktober|november|december)/i,
    monthsShortStrictRegex: /^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,

    monthsParse : monthsParse,
    longMonthsParse : monthsParse,
    shortMonthsParse : monthsParse,

    weekdays : 'zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag'.split('_'),
    weekdaysShort : 'zo._ma._di._wo._do._vr._za.'.split('_'),
    weekdaysMin : 'zo_ma_di_wo_do_vr_za'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD-MM-YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay: '[vandaag om] LT',
        nextDay: '[morgen om] LT',
        nextWeek: 'dddd [om] LT',
        lastDay: '[gisteren om] LT',
        lastWeek: '[afgelopen] dddd [om] LT',
        sameElse: 'L'
    },
    relativeTime : {
        future : 'over %s',
        past : '%s geleden',
        s : 'een paar seconden',
        ss : '%d seconden',
        m : 'één minuut',
        mm : '%d minuten',
        h : 'één uur',
        hh : '%d uur',
        d : 'één dag',
        dd : '%d dagen',
        M : 'één maand',
        MM : '%d maanden',
        y : 'één jaar',
        yy : '%d jaar'
    },
    dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
    ordinal : function (number) {
        return number + ((number === 1 || number === 8 || number >= 20) ? 'ste' : 'de');
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return nl;

})));


/***/ }),

/***/ "../../../../moment/locale/nn.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Nynorsk [nn]
//! author : https://github.com/mechuwind

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var nn = moment.defineLocale('nn', {
    months : 'januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember'.split('_'),
    monthsShort : 'jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_'),
    weekdays : 'sundag_måndag_tysdag_onsdag_torsdag_fredag_laurdag'.split('_'),
    weekdaysShort : 'sun_mån_tys_ons_tor_fre_lau'.split('_'),
    weekdaysMin : 'su_må_ty_on_to_fr_lø'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD.MM.YYYY',
        LL : 'D. MMMM YYYY',
        LLL : 'D. MMMM YYYY [kl.] H:mm',
        LLLL : 'dddd D. MMMM YYYY [kl.] HH:mm'
    },
    calendar : {
        sameDay: '[I dag klokka] LT',
        nextDay: '[I morgon klokka] LT',
        nextWeek: 'dddd [klokka] LT',
        lastDay: '[I går klokka] LT',
        lastWeek: '[Føregåande] dddd [klokka] LT',
        sameElse: 'L'
    },
    relativeTime : {
        future : 'om %s',
        past : '%s sidan',
        s : 'nokre sekund',
        ss : '%d sekund',
        m : 'eit minutt',
        mm : '%d minutt',
        h : 'ein time',
        hh : '%d timar',
        d : 'ein dag',
        dd : '%d dagar',
        M : 'ein månad',
        MM : '%d månader',
        y : 'eit år',
        yy : '%d år'
    },
    dayOfMonthOrdinalParse: /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return nn;

})));


/***/ }),

/***/ "../../../../moment/locale/pa-in.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Punjabi (India) [pa-in]
//! author : Harpreet Singh : https://github.com/harpreetkhalsagtbit

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var symbolMap = {
    '1': '੧',
    '2': '੨',
    '3': '੩',
    '4': '੪',
    '5': '੫',
    '6': '੬',
    '7': '੭',
    '8': '੮',
    '9': '੯',
    '0': '੦'
};
var numberMap = {
    '੧': '1',
    '੨': '2',
    '੩': '3',
    '੪': '4',
    '੫': '5',
    '੬': '6',
    '੭': '7',
    '੮': '8',
    '੯': '9',
    '੦': '0'
};

var paIn = moment.defineLocale('pa-in', {
    // There are months name as per Nanakshahi Calender but they are not used as rigidly in modern Punjabi.
    months : 'ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ'.split('_'),
    monthsShort : 'ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ'.split('_'),
    weekdays : 'ਐਤਵਾਰ_ਸੋਮਵਾਰ_ਮੰਗਲਵਾਰ_ਬੁਧਵਾਰ_ਵੀਰਵਾਰ_ਸ਼ੁੱਕਰਵਾਰ_ਸ਼ਨੀਚਰਵਾਰ'.split('_'),
    weekdaysShort : 'ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ'.split('_'),
    weekdaysMin : 'ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ'.split('_'),
    longDateFormat : {
        LT : 'A h:mm ਵਜੇ',
        LTS : 'A h:mm:ss ਵਜੇ',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY, A h:mm ਵਜੇ',
        LLLL : 'dddd, D MMMM YYYY, A h:mm ਵਜੇ'
    },
    calendar : {
        sameDay : '[ਅਜ] LT',
        nextDay : '[ਕਲ] LT',
        nextWeek : 'dddd, LT',
        lastDay : '[ਕਲ] LT',
        lastWeek : '[ਪਿਛਲੇ] dddd, LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : '%s ਵਿੱਚ',
        past : '%s ਪਿਛਲੇ',
        s : 'ਕੁਝ ਸਕਿੰਟ',
        ss : '%d ਸਕਿੰਟ',
        m : 'ਇਕ ਮਿੰਟ',
        mm : '%d ਮਿੰਟ',
        h : 'ਇੱਕ ਘੰਟਾ',
        hh : '%d ਘੰਟੇ',
        d : 'ਇੱਕ ਦਿਨ',
        dd : '%d ਦਿਨ',
        M : 'ਇੱਕ ਮਹੀਨਾ',
        MM : '%d ਮਹੀਨੇ',
        y : 'ਇੱਕ ਸਾਲ',
        yy : '%d ਸਾਲ'
    },
    preparse: function (string) {
        return string.replace(/[੧੨੩੪੫੬੭੮੯੦]/g, function (match) {
            return numberMap[match];
        });
    },
    postformat: function (string) {
        return string.replace(/\d/g, function (match) {
            return symbolMap[match];
        });
    },
    // Punjabi notation for meridiems are quite fuzzy in practice. While there exists
    // a rigid notion of a 'Pahar' it is not used as rigidly in modern Punjabi.
    meridiemParse: /ਰਾਤ|ਸਵੇਰ|ਦੁਪਹਿਰ|ਸ਼ਾਮ/,
    meridiemHour : function (hour, meridiem) {
        if (hour === 12) {
            hour = 0;
        }
        if (meridiem === 'ਰਾਤ') {
            return hour < 4 ? hour : hour + 12;
        } else if (meridiem === 'ਸਵੇਰ') {
            return hour;
        } else if (meridiem === 'ਦੁਪਹਿਰ') {
            return hour >= 10 ? hour : hour + 12;
        } else if (meridiem === 'ਸ਼ਾਮ') {
            return hour + 12;
        }
    },
    meridiem : function (hour, minute, isLower) {
        if (hour < 4) {
            return 'ਰਾਤ';
        } else if (hour < 10) {
            return 'ਸਵੇਰ';
        } else if (hour < 17) {
            return 'ਦੁਪਹਿਰ';
        } else if (hour < 20) {
            return 'ਸ਼ਾਮ';
        } else {
            return 'ਰਾਤ';
        }
    },
    week : {
        dow : 0, // Sunday is the first day of the week.
        doy : 6  // The week that contains Jan 1st is the first week of the year.
    }
});

return paIn;

})));


/***/ }),

/***/ "../../../../moment/locale/pl.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Polish [pl]
//! author : Rafal Hirsz : https://github.com/evoL

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var monthsNominative = 'styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień'.split('_');
var monthsSubjective = 'stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia'.split('_');
function plural(n) {
    return (n % 10 < 5) && (n % 10 > 1) && ((~~(n / 10) % 10) !== 1);
}
function translate(number, withoutSuffix, key) {
    var result = number + ' ';
    switch (key) {
        case 'ss':
            return result + (plural(number) ? 'sekundy' : 'sekund');
        case 'm':
            return withoutSuffix ? 'minuta' : 'minutę';
        case 'mm':
            return result + (plural(number) ? 'minuty' : 'minut');
        case 'h':
            return withoutSuffix  ? 'godzina'  : 'godzinę';
        case 'hh':
            return result + (plural(number) ? 'godziny' : 'godzin');
        case 'MM':
            return result + (plural(number) ? 'miesiące' : 'miesięcy');
        case 'yy':
            return result + (plural(number) ? 'lata' : 'lat');
    }
}

var pl = moment.defineLocale('pl', {
    months : function (momentToFormat, format) {
        if (!momentToFormat) {
            return monthsNominative;
        } else if (format === '') {
            // Hack: if format empty we know this is used to generate
            // RegExp by moment. Give then back both valid forms of months
            // in RegExp ready format.
            return '(' + monthsSubjective[momentToFormat.month()] + '|' + monthsNominative[momentToFormat.month()] + ')';
        } else if (/D MMMM/.test(format)) {
            return monthsSubjective[momentToFormat.month()];
        } else {
            return monthsNominative[momentToFormat.month()];
        }
    },
    monthsShort : 'sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru'.split('_'),
    weekdays : 'niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota'.split('_'),
    weekdaysShort : 'ndz_pon_wt_śr_czw_pt_sob'.split('_'),
    weekdaysMin : 'Nd_Pn_Wt_Śr_Cz_Pt_So'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD.MM.YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd, D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay: '[Dziś o] LT',
        nextDay: '[Jutro o] LT',
        nextWeek: function () {
            switch (this.day()) {
                case 0:
                    return '[W niedzielę o] LT';

                case 2:
                    return '[We wtorek o] LT';

                case 3:
                    return '[W środę o] LT';

                case 6:
                    return '[W sobotę o] LT';

                default:
                    return '[W] dddd [o] LT';
            }
        },
        lastDay: '[Wczoraj o] LT',
        lastWeek: function () {
            switch (this.day()) {
                case 0:
                    return '[W zeszłą niedzielę o] LT';
                case 3:
                    return '[W zeszłą środę o] LT';
                case 6:
                    return '[W zeszłą sobotę o] LT';
                default:
                    return '[W zeszły] dddd [o] LT';
            }
        },
        sameElse: 'L'
    },
    relativeTime : {
        future : 'za %s',
        past : '%s temu',
        s : 'kilka sekund',
        ss : translate,
        m : translate,
        mm : translate,
        h : translate,
        hh : translate,
        d : '1 dzień',
        dd : '%d dni',
        M : 'miesiąc',
        MM : translate,
        y : 'rok',
        yy : translate
    },
    dayOfMonthOrdinalParse: /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return pl;

})));


/***/ }),

/***/ "../../../../moment/locale/pt-br.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Portuguese (Brazil) [pt-br]
//! author : Caio Ribeiro Pereira : https://github.com/caio-ribeiro-pereira

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var ptBr = moment.defineLocale('pt-br', {
    months : 'janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro'.split('_'),
    monthsShort : 'jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez'.split('_'),
    weekdays : 'Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado'.split('_'),
    weekdaysShort : 'Dom_Seg_Ter_Qua_Qui_Sex_Sáb'.split('_'),
    weekdaysMin : 'Do_2ª_3ª_4ª_5ª_6ª_Sá'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D [de] MMMM [de] YYYY',
        LLL : 'D [de] MMMM [de] YYYY [às] HH:mm',
        LLLL : 'dddd, D [de] MMMM [de] YYYY [às] HH:mm'
    },
    calendar : {
        sameDay: '[Hoje às] LT',
        nextDay: '[Amanhã às] LT',
        nextWeek: 'dddd [às] LT',
        lastDay: '[Ontem às] LT',
        lastWeek: function () {
            return (this.day() === 0 || this.day() === 6) ?
                '[Último] dddd [às] LT' : // Saturday + Sunday
                '[Última] dddd [às] LT'; // Monday - Friday
        },
        sameElse: 'L'
    },
    relativeTime : {
        future : 'em %s',
        past : '%s atrás',
        s : 'poucos segundos',
        ss : '%d segundos',
        m : 'um minuto',
        mm : '%d minutos',
        h : 'uma hora',
        hh : '%d horas',
        d : 'um dia',
        dd : '%d dias',
        M : 'um mês',
        MM : '%d meses',
        y : 'um ano',
        yy : '%d anos'
    },
    dayOfMonthOrdinalParse: /\d{1,2}º/,
    ordinal : '%dº'
});

return ptBr;

})));


/***/ }),

/***/ "../../../../moment/locale/pt.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Portuguese [pt]
//! author : Jefferson : https://github.com/jalex79

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var pt = moment.defineLocale('pt', {
    months : 'janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro'.split('_'),
    monthsShort : 'jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez'.split('_'),
    weekdays : 'Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado'.split('_'),
    weekdaysShort : 'Dom_Seg_Ter_Qua_Qui_Sex_Sáb'.split('_'),
    weekdaysMin : 'Do_2ª_3ª_4ª_5ª_6ª_Sá'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D [de] MMMM [de] YYYY',
        LLL : 'D [de] MMMM [de] YYYY HH:mm',
        LLLL : 'dddd, D [de] MMMM [de] YYYY HH:mm'
    },
    calendar : {
        sameDay: '[Hoje às] LT',
        nextDay: '[Amanhã às] LT',
        nextWeek: 'dddd [às] LT',
        lastDay: '[Ontem às] LT',
        lastWeek: function () {
            return (this.day() === 0 || this.day() === 6) ?
                '[Último] dddd [às] LT' : // Saturday + Sunday
                '[Última] dddd [às] LT'; // Monday - Friday
        },
        sameElse: 'L'
    },
    relativeTime : {
        future : 'em %s',
        past : 'há %s',
        s : 'segundos',
        ss : '%d segundos',
        m : 'um minuto',
        mm : '%d minutos',
        h : 'uma hora',
        hh : '%d horas',
        d : 'um dia',
        dd : '%d dias',
        M : 'um mês',
        MM : '%d meses',
        y : 'um ano',
        yy : '%d anos'
    },
    dayOfMonthOrdinalParse: /\d{1,2}º/,
    ordinal : '%dº',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return pt;

})));


/***/ }),

/***/ "../../../../moment/locale/ro.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Romanian [ro]
//! author : Vlad Gurdiga : https://github.com/gurdiga
//! author : Valentin Agachi : https://github.com/avaly

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


function relativeTimeWithPlural(number, withoutSuffix, key) {
    var format = {
            'ss': 'secunde',
            'mm': 'minute',
            'hh': 'ore',
            'dd': 'zile',
            'MM': 'luni',
            'yy': 'ani'
        },
        separator = ' ';
    if (number % 100 >= 20 || (number >= 100 && number % 100 === 0)) {
        separator = ' de ';
    }
    return number + separator + format[key];
}

var ro = moment.defineLocale('ro', {
    months : 'ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie'.split('_'),
    monthsShort : 'ian._febr._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.'.split('_'),
    monthsParseExact: true,
    weekdays : 'duminică_luni_marți_miercuri_joi_vineri_sâmbătă'.split('_'),
    weekdaysShort : 'Dum_Lun_Mar_Mie_Joi_Vin_Sâm'.split('_'),
    weekdaysMin : 'Du_Lu_Ma_Mi_Jo_Vi_Sâ'.split('_'),
    longDateFormat : {
        LT : 'H:mm',
        LTS : 'H:mm:ss',
        L : 'DD.MM.YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY H:mm',
        LLLL : 'dddd, D MMMM YYYY H:mm'
    },
    calendar : {
        sameDay: '[azi la] LT',
        nextDay: '[mâine la] LT',
        nextWeek: 'dddd [la] LT',
        lastDay: '[ieri la] LT',
        lastWeek: '[fosta] dddd [la] LT',
        sameElse: 'L'
    },
    relativeTime : {
        future : 'peste %s',
        past : '%s în urmă',
        s : 'câteva secunde',
        ss : relativeTimeWithPlural,
        m : 'un minut',
        mm : relativeTimeWithPlural,
        h : 'o oră',
        hh : relativeTimeWithPlural,
        d : 'o zi',
        dd : relativeTimeWithPlural,
        M : 'o lună',
        MM : relativeTimeWithPlural,
        y : 'un an',
        yy : relativeTimeWithPlural
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

return ro;

})));


/***/ }),

/***/ "../../../../moment/locale/ru.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Russian [ru]
//! author : Viktorminator : https://github.com/Viktorminator
//! Author : Menelion Elensúle : https://github.com/Oire
//! author : Коренберг Марк : https://github.com/socketpair

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


function plural(word, num) {
    var forms = word.split('_');
    return num % 10 === 1 && num % 100 !== 11 ? forms[0] : (num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2]);
}
function relativeTimeWithPlural(number, withoutSuffix, key) {
    var format = {
        'ss': withoutSuffix ? 'секунда_секунды_секунд' : 'секунду_секунды_секунд',
        'mm': withoutSuffix ? 'минута_минуты_минут' : 'минуту_минуты_минут',
        'hh': 'час_часа_часов',
        'dd': 'день_дня_дней',
        'MM': 'месяц_месяца_месяцев',
        'yy': 'год_года_лет'
    };
    if (key === 'm') {
        return withoutSuffix ? 'минута' : 'минуту';
    }
    else {
        return number + ' ' + plural(format[key], +number);
    }
}
var monthsParse = [/^янв/i, /^фев/i, /^мар/i, /^апр/i, /^ма[йя]/i, /^июн/i, /^июл/i, /^авг/i, /^сен/i, /^окт/i, /^ноя/i, /^дек/i];

// http://new.gramota.ru/spravka/rules/139-prop : § 103
// Сокращения месяцев: http://new.gramota.ru/spravka/buro/search-answer?s=242637
// CLDR data:          http://www.unicode.org/cldr/charts/28/summary/ru.html#1753
var ru = moment.defineLocale('ru', {
    months : {
        format: 'января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря'.split('_'),
        standalone: 'январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь'.split('_')
    },
    monthsShort : {
        // по CLDR именно "июл." и "июн.", но какой смысл менять букву на точку ?
        format: 'янв._февр._мар._апр._мая_июня_июля_авг._сент._окт._нояб._дек.'.split('_'),
        standalone: 'янв._февр._март_апр._май_июнь_июль_авг._сент._окт._нояб._дек.'.split('_')
    },
    weekdays : {
        standalone: 'воскресенье_понедельник_вторник_среда_четверг_пятница_суббота'.split('_'),
        format: 'воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу'.split('_'),
        isFormat: /\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?\] ?dddd/
    },
    weekdaysShort : 'вс_пн_вт_ср_чт_пт_сб'.split('_'),
    weekdaysMin : 'вс_пн_вт_ср_чт_пт_сб'.split('_'),
    monthsParse : monthsParse,
    longMonthsParse : monthsParse,
    shortMonthsParse : monthsParse,

    // полные названия с падежами, по три буквы, для некоторых, по 4 буквы, сокращения с точкой и без точки
    monthsRegex: /^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,

    // копия предыдущего
    monthsShortRegex: /^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,

    // полные названия с падежами
    monthsStrictRegex: /^(январ[яь]|феврал[яь]|марта?|апрел[яь]|ма[яй]|июн[яь]|июл[яь]|августа?|сентябр[яь]|октябр[яь]|ноябр[яь]|декабр[яь])/i,

    // Выражение, которое соотвествует только сокращённым формам
    monthsShortStrictRegex: /^(янв\.|февр?\.|мар[т.]|апр\.|ма[яй]|июн[ья.]|июл[ья.]|авг\.|сент?\.|окт\.|нояб?\.|дек\.)/i,
    longDateFormat : {
        LT : 'H:mm',
        LTS : 'H:mm:ss',
        L : 'DD.MM.YYYY',
        LL : 'D MMMM YYYY г.',
        LLL : 'D MMMM YYYY г., H:mm',
        LLLL : 'dddd, D MMMM YYYY г., H:mm'
    },
    calendar : {
        sameDay: '[Сегодня в] LT',
        nextDay: '[Завтра в] LT',
        lastDay: '[Вчера в] LT',
        nextWeek: function (now) {
            if (now.week() !== this.week()) {
                switch (this.day()) {
                    case 0:
                        return '[В следующее] dddd [в] LT';
                    case 1:
                    case 2:
                    case 4:
                        return '[В следующий] dddd [в] LT';
                    case 3:
                    case 5:
                    case 6:
                        return '[В следующую] dddd [в] LT';
                }
            } else {
                if (this.day() === 2) {
                    return '[Во] dddd [в] LT';
                } else {
                    return '[В] dddd [в] LT';
                }
            }
        },
        lastWeek: function (now) {
            if (now.week() !== this.week()) {
                switch (this.day()) {
                    case 0:
                        return '[В прошлое] dddd [в] LT';
                    case 1:
                    case 2:
                    case 4:
                        return '[В прошлый] dddd [в] LT';
                    case 3:
                    case 5:
                    case 6:
                        return '[В прошлую] dddd [в] LT';
                }
            } else {
                if (this.day() === 2) {
                    return '[Во] dddd [в] LT';
                } else {
                    return '[В] dddd [в] LT';
                }
            }
        },
        sameElse: 'L'
    },
    relativeTime : {
        future : 'через %s',
        past : '%s назад',
        s : 'несколько секунд',
        ss : relativeTimeWithPlural,
        m : relativeTimeWithPlural,
        mm : relativeTimeWithPlural,
        h : 'час',
        hh : relativeTimeWithPlural,
        d : 'день',
        dd : relativeTimeWithPlural,
        M : 'месяц',
        MM : relativeTimeWithPlural,
        y : 'год',
        yy : relativeTimeWithPlural
    },
    meridiemParse: /ночи|утра|дня|вечера/i,
    isPM : function (input) {
        return /^(дня|вечера)$/.test(input);
    },
    meridiem : function (hour, minute, isLower) {
        if (hour < 4) {
            return 'ночи';
        } else if (hour < 12) {
            return 'утра';
        } else if (hour < 17) {
            return 'дня';
        } else {
            return 'вечера';
        }
    },
    dayOfMonthOrdinalParse: /\d{1,2}-(й|го|я)/,
    ordinal: function (number, period) {
        switch (period) {
            case 'M':
            case 'd':
            case 'DDD':
                return number + '-й';
            case 'D':
                return number + '-го';
            case 'w':
            case 'W':
                return number + '-я';
            default:
                return number;
        }
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return ru;

})));


/***/ }),

/***/ "../../../../moment/locale/sd.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Sindhi [sd]
//! author : Narain Sagar : https://github.com/narainsagar

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var months = [
    'جنوري',
    'فيبروري',
    'مارچ',
    'اپريل',
    'مئي',
    'جون',
    'جولاءِ',
    'آگسٽ',
    'سيپٽمبر',
    'آڪٽوبر',
    'نومبر',
    'ڊسمبر'
];
var days = [
    'آچر',
    'سومر',
    'اڱارو',
    'اربع',
    'خميس',
    'جمع',
    'ڇنڇر'
];

var sd = moment.defineLocale('sd', {
    months : months,
    monthsShort : months,
    weekdays : days,
    weekdaysShort : days,
    weekdaysMin : days,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd، D MMMM YYYY HH:mm'
    },
    meridiemParse: /صبح|شام/,
    isPM : function (input) {
        return 'شام' === input;
    },
    meridiem : function (hour, minute, isLower) {
        if (hour < 12) {
            return 'صبح';
        }
        return 'شام';
    },
    calendar : {
        sameDay : '[اڄ] LT',
        nextDay : '[سڀاڻي] LT',
        nextWeek : 'dddd [اڳين هفتي تي] LT',
        lastDay : '[ڪالهه] LT',
        lastWeek : '[گزريل هفتي] dddd [تي] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : '%s پوء',
        past : '%s اڳ',
        s : 'چند سيڪنڊ',
        ss : '%d سيڪنڊ',
        m : 'هڪ منٽ',
        mm : '%d منٽ',
        h : 'هڪ ڪلاڪ',
        hh : '%d ڪلاڪ',
        d : 'هڪ ڏينهن',
        dd : '%d ڏينهن',
        M : 'هڪ مهينو',
        MM : '%d مهينا',
        y : 'هڪ سال',
        yy : '%d سال'
    },
    preparse: function (string) {
        return string.replace(/،/g, ',');
    },
    postformat: function (string) {
        return string.replace(/,/g, '،');
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return sd;

})));


/***/ }),

/***/ "../../../../moment/locale/se.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Northern Sami [se]
//! authors : Bård Rolstad Henriksen : https://github.com/karamell

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';



var se = moment.defineLocale('se', {
    months : 'ođđajagemánnu_guovvamánnu_njukčamánnu_cuoŋománnu_miessemánnu_geassemánnu_suoidnemánnu_borgemánnu_čakčamánnu_golggotmánnu_skábmamánnu_juovlamánnu'.split('_'),
    monthsShort : 'ođđj_guov_njuk_cuo_mies_geas_suoi_borg_čakč_golg_skáb_juov'.split('_'),
    weekdays : 'sotnabeaivi_vuossárga_maŋŋebárga_gaskavahkku_duorastat_bearjadat_lávvardat'.split('_'),
    weekdaysShort : 'sotn_vuos_maŋ_gask_duor_bear_láv'.split('_'),
    weekdaysMin : 's_v_m_g_d_b_L'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD.MM.YYYY',
        LL : 'MMMM D. [b.] YYYY',
        LLL : 'MMMM D. [b.] YYYY [ti.] HH:mm',
        LLLL : 'dddd, MMMM D. [b.] YYYY [ti.] HH:mm'
    },
    calendar : {
        sameDay: '[otne ti] LT',
        nextDay: '[ihttin ti] LT',
        nextWeek: 'dddd [ti] LT',
        lastDay: '[ikte ti] LT',
        lastWeek: '[ovddit] dddd [ti] LT',
        sameElse: 'L'
    },
    relativeTime : {
        future : '%s geažes',
        past : 'maŋit %s',
        s : 'moadde sekunddat',
        ss: '%d sekunddat',
        m : 'okta minuhta',
        mm : '%d minuhtat',
        h : 'okta diimmu',
        hh : '%d diimmut',
        d : 'okta beaivi',
        dd : '%d beaivvit',
        M : 'okta mánnu',
        MM : '%d mánut',
        y : 'okta jahki',
        yy : '%d jagit'
    },
    dayOfMonthOrdinalParse: /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return se;

})));


/***/ }),

/***/ "../../../../moment/locale/si.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Sinhalese [si]
//! author : Sampath Sitinamaluwa : https://github.com/sampathsris

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


/*jshint -W100*/
var si = moment.defineLocale('si', {
    months : 'ජනවාරි_පෙබරවාරි_මාර්තු_අප්‍රේල්_මැයි_ජූනි_ජූලි_අගෝස්තු_සැප්තැම්බර්_ඔක්තෝබර්_නොවැම්බර්_දෙසැම්බර්'.split('_'),
    monthsShort : 'ජන_පෙබ_මාර්_අප්_මැයි_ජූනි_ජූලි_අගෝ_සැප්_ඔක්_නොවැ_දෙසැ'.split('_'),
    weekdays : 'ඉරිදා_සඳුදා_අඟහරුවාදා_බදාදා_බ්‍රහස්පතින්දා_සිකුරාදා_සෙනසුරාදා'.split('_'),
    weekdaysShort : 'ඉරි_සඳු_අඟ_බදා_බ්‍රහ_සිකු_සෙන'.split('_'),
    weekdaysMin : 'ඉ_ස_අ_බ_බ්‍ර_සි_සෙ'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'a h:mm',
        LTS : 'a h:mm:ss',
        L : 'YYYY/MM/DD',
        LL : 'YYYY MMMM D',
        LLL : 'YYYY MMMM D, a h:mm',
        LLLL : 'YYYY MMMM D [වැනි] dddd, a h:mm:ss'
    },
    calendar : {
        sameDay : '[අද] LT[ට]',
        nextDay : '[හෙට] LT[ට]',
        nextWeek : 'dddd LT[ට]',
        lastDay : '[ඊයේ] LT[ට]',
        lastWeek : '[පසුගිය] dddd LT[ට]',
        sameElse : 'L'
    },
    relativeTime : {
        future : '%sකින්',
        past : '%sකට පෙර',
        s : 'තත්පර කිහිපය',
        ss : 'තත්පර %d',
        m : 'මිනිත්තුව',
        mm : 'මිනිත්තු %d',
        h : 'පැය',
        hh : 'පැය %d',
        d : 'දිනය',
        dd : 'දින %d',
        M : 'මාසය',
        MM : 'මාස %d',
        y : 'වසර',
        yy : 'වසර %d'
    },
    dayOfMonthOrdinalParse: /\d{1,2} වැනි/,
    ordinal : function (number) {
        return number + ' වැනි';
    },
    meridiemParse : /පෙර වරු|පස් වරු|පෙ.ව|ප.ව./,
    isPM : function (input) {
        return input === 'ප.ව.' || input === 'පස් වරු';
    },
    meridiem : function (hours, minutes, isLower) {
        if (hours > 11) {
            return isLower ? 'ප.ව.' : 'පස් වරු';
        } else {
            return isLower ? 'පෙ.ව.' : 'පෙර වරු';
        }
    }
});

return si;

})));


/***/ }),

/***/ "../../../../moment/locale/sk.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Slovak [sk]
//! author : Martin Minka : https://github.com/k2s
//! based on work of petrbela : https://github.com/petrbela

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var months = 'január_február_marec_apríl_máj_jún_júl_august_september_október_november_december'.split('_');
var monthsShort = 'jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec'.split('_');
function plural(n) {
    return (n > 1) && (n < 5);
}
function translate(number, withoutSuffix, key, isFuture) {
    var result = number + ' ';
    switch (key) {
        case 's':  // a few seconds / in a few seconds / a few seconds ago
            return (withoutSuffix || isFuture) ? 'pár sekúnd' : 'pár sekundami';
        case 'ss': // 9 seconds / in 9 seconds / 9 seconds ago
            if (withoutSuffix || isFuture) {
                return result + (plural(number) ? 'sekundy' : 'sekúnd');
            } else {
                return result + 'sekundami';
            }
            break;
        case 'm':  // a minute / in a minute / a minute ago
            return withoutSuffix ? 'minúta' : (isFuture ? 'minútu' : 'minútou');
        case 'mm': // 9 minutes / in 9 minutes / 9 minutes ago
            if (withoutSuffix || isFuture) {
                return result + (plural(number) ? 'minúty' : 'minút');
            } else {
                return result + 'minútami';
            }
            break;
        case 'h':  // an hour / in an hour / an hour ago
            return withoutSuffix ? 'hodina' : (isFuture ? 'hodinu' : 'hodinou');
        case 'hh': // 9 hours / in 9 hours / 9 hours ago
            if (withoutSuffix || isFuture) {
                return result + (plural(number) ? 'hodiny' : 'hodín');
            } else {
                return result + 'hodinami';
            }
            break;
        case 'd':  // a day / in a day / a day ago
            return (withoutSuffix || isFuture) ? 'deň' : 'dňom';
        case 'dd': // 9 days / in 9 days / 9 days ago
            if (withoutSuffix || isFuture) {
                return result + (plural(number) ? 'dni' : 'dní');
            } else {
                return result + 'dňami';
            }
            break;
        case 'M':  // a month / in a month / a month ago
            return (withoutSuffix || isFuture) ? 'mesiac' : 'mesiacom';
        case 'MM': // 9 months / in 9 months / 9 months ago
            if (withoutSuffix || isFuture) {
                return result + (plural(number) ? 'mesiace' : 'mesiacov');
            } else {
                return result + 'mesiacmi';
            }
            break;
        case 'y':  // a year / in a year / a year ago
            return (withoutSuffix || isFuture) ? 'rok' : 'rokom';
        case 'yy': // 9 years / in 9 years / 9 years ago
            if (withoutSuffix || isFuture) {
                return result + (plural(number) ? 'roky' : 'rokov');
            } else {
                return result + 'rokmi';
            }
            break;
    }
}

var sk = moment.defineLocale('sk', {
    months : months,
    monthsShort : monthsShort,
    weekdays : 'nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota'.split('_'),
    weekdaysShort : 'ne_po_ut_st_št_pi_so'.split('_'),
    weekdaysMin : 'ne_po_ut_st_št_pi_so'.split('_'),
    longDateFormat : {
        LT: 'H:mm',
        LTS : 'H:mm:ss',
        L : 'DD.MM.YYYY',
        LL : 'D. MMMM YYYY',
        LLL : 'D. MMMM YYYY H:mm',
        LLLL : 'dddd D. MMMM YYYY H:mm'
    },
    calendar : {
        sameDay: '[dnes o] LT',
        nextDay: '[zajtra o] LT',
        nextWeek: function () {
            switch (this.day()) {
                case 0:
                    return '[v nedeľu o] LT';
                case 1:
                case 2:
                    return '[v] dddd [o] LT';
                case 3:
                    return '[v stredu o] LT';
                case 4:
                    return '[vo štvrtok o] LT';
                case 5:
                    return '[v piatok o] LT';
                case 6:
                    return '[v sobotu o] LT';
            }
        },
        lastDay: '[včera o] LT',
        lastWeek: function () {
            switch (this.day()) {
                case 0:
                    return '[minulú nedeľu o] LT';
                case 1:
                case 2:
                    return '[minulý] dddd [o] LT';
                case 3:
                    return '[minulú stredu o] LT';
                case 4:
                case 5:
                    return '[minulý] dddd [o] LT';
                case 6:
                    return '[minulú sobotu o] LT';
            }
        },
        sameElse: 'L'
    },
    relativeTime : {
        future : 'za %s',
        past : 'pred %s',
        s : translate,
        ss : translate,
        m : translate,
        mm : translate,
        h : translate,
        hh : translate,
        d : translate,
        dd : translate,
        M : translate,
        MM : translate,
        y : translate,
        yy : translate
    },
    dayOfMonthOrdinalParse: /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return sk;

})));


/***/ }),

/***/ "../../../../moment/locale/sl.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Slovenian [sl]
//! author : Robert Sedovšek : https://github.com/sedovsek

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


function processRelativeTime(number, withoutSuffix, key, isFuture) {
    var result = number + ' ';
    switch (key) {
        case 's':
            return withoutSuffix || isFuture ? 'nekaj sekund' : 'nekaj sekundami';
        case 'ss':
            if (number === 1) {
                result += withoutSuffix ? 'sekundo' : 'sekundi';
            } else if (number === 2) {
                result += withoutSuffix || isFuture ? 'sekundi' : 'sekundah';
            } else if (number < 5) {
                result += withoutSuffix || isFuture ? 'sekunde' : 'sekundah';
            } else {
                result += withoutSuffix || isFuture ? 'sekund' : 'sekund';
            }
            return result;
        case 'm':
            return withoutSuffix ? 'ena minuta' : 'eno minuto';
        case 'mm':
            if (number === 1) {
                result += withoutSuffix ? 'minuta' : 'minuto';
            } else if (number === 2) {
                result += withoutSuffix || isFuture ? 'minuti' : 'minutama';
            } else if (number < 5) {
                result += withoutSuffix || isFuture ? 'minute' : 'minutami';
            } else {
                result += withoutSuffix || isFuture ? 'minut' : 'minutami';
            }
            return result;
        case 'h':
            return withoutSuffix ? 'ena ura' : 'eno uro';
        case 'hh':
            if (number === 1) {
                result += withoutSuffix ? 'ura' : 'uro';
            } else if (number === 2) {
                result += withoutSuffix || isFuture ? 'uri' : 'urama';
            } else if (number < 5) {
                result += withoutSuffix || isFuture ? 'ure' : 'urami';
            } else {
                result += withoutSuffix || isFuture ? 'ur' : 'urami';
            }
            return result;
        case 'd':
            return withoutSuffix || isFuture ? 'en dan' : 'enim dnem';
        case 'dd':
            if (number === 1) {
                result += withoutSuffix || isFuture ? 'dan' : 'dnem';
            } else if (number === 2) {
                result += withoutSuffix || isFuture ? 'dni' : 'dnevoma';
            } else {
                result += withoutSuffix || isFuture ? 'dni' : 'dnevi';
            }
            return result;
        case 'M':
            return withoutSuffix || isFuture ? 'en mesec' : 'enim mesecem';
        case 'MM':
            if (number === 1) {
                result += withoutSuffix || isFuture ? 'mesec' : 'mesecem';
            } else if (number === 2) {
                result += withoutSuffix || isFuture ? 'meseca' : 'mesecema';
            } else if (number < 5) {
                result += withoutSuffix || isFuture ? 'mesece' : 'meseci';
            } else {
                result += withoutSuffix || isFuture ? 'mesecev' : 'meseci';
            }
            return result;
        case 'y':
            return withoutSuffix || isFuture ? 'eno leto' : 'enim letom';
        case 'yy':
            if (number === 1) {
                result += withoutSuffix || isFuture ? 'leto' : 'letom';
            } else if (number === 2) {
                result += withoutSuffix || isFuture ? 'leti' : 'letoma';
            } else if (number < 5) {
                result += withoutSuffix || isFuture ? 'leta' : 'leti';
            } else {
                result += withoutSuffix || isFuture ? 'let' : 'leti';
            }
            return result;
    }
}

var sl = moment.defineLocale('sl', {
    months : 'januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december'.split('_'),
    monthsShort : 'jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.'.split('_'),
    monthsParseExact: true,
    weekdays : 'nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota'.split('_'),
    weekdaysShort : 'ned._pon._tor._sre._čet._pet._sob.'.split('_'),
    weekdaysMin : 'ne_po_to_sr_če_pe_so'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'H:mm',
        LTS : 'H:mm:ss',
        L : 'DD.MM.YYYY',
        LL : 'D. MMMM YYYY',
        LLL : 'D. MMMM YYYY H:mm',
        LLLL : 'dddd, D. MMMM YYYY H:mm'
    },
    calendar : {
        sameDay  : '[danes ob] LT',
        nextDay  : '[jutri ob] LT',

        nextWeek : function () {
            switch (this.day()) {
                case 0:
                    return '[v] [nedeljo] [ob] LT';
                case 3:
                    return '[v] [sredo] [ob] LT';
                case 6:
                    return '[v] [soboto] [ob] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                    return '[v] dddd [ob] LT';
            }
        },
        lastDay  : '[včeraj ob] LT',
        lastWeek : function () {
            switch (this.day()) {
                case 0:
                    return '[prejšnjo] [nedeljo] [ob] LT';
                case 3:
                    return '[prejšnjo] [sredo] [ob] LT';
                case 6:
                    return '[prejšnjo] [soboto] [ob] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                    return '[prejšnji] dddd [ob] LT';
            }
        },
        sameElse : 'L'
    },
    relativeTime : {
        future : 'čez %s',
        past   : 'pred %s',
        s      : processRelativeTime,
        ss     : processRelativeTime,
        m      : processRelativeTime,
        mm     : processRelativeTime,
        h      : processRelativeTime,
        hh     : processRelativeTime,
        d      : processRelativeTime,
        dd     : processRelativeTime,
        M      : processRelativeTime,
        MM     : processRelativeTime,
        y      : processRelativeTime,
        yy     : processRelativeTime
    },
    dayOfMonthOrdinalParse: /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

return sl;

})));


/***/ }),

/***/ "../../../../moment/locale/sq.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Albanian [sq]
//! author : Flakërim Ismani : https://github.com/flakerimi
//! author : Menelion Elensúle : https://github.com/Oire
//! author : Oerd Cukalla : https://github.com/oerd

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var sq = moment.defineLocale('sq', {
    months : 'Janar_Shkurt_Mars_Prill_Maj_Qershor_Korrik_Gusht_Shtator_Tetor_Nëntor_Dhjetor'.split('_'),
    monthsShort : 'Jan_Shk_Mar_Pri_Maj_Qer_Kor_Gus_Sht_Tet_Nën_Dhj'.split('_'),
    weekdays : 'E Diel_E Hënë_E Martë_E Mërkurë_E Enjte_E Premte_E Shtunë'.split('_'),
    weekdaysShort : 'Die_Hën_Mar_Mër_Enj_Pre_Sht'.split('_'),
    weekdaysMin : 'D_H_Ma_Më_E_P_Sh'.split('_'),
    weekdaysParseExact : true,
    meridiemParse: /PD|MD/,
    isPM: function (input) {
        return input.charAt(0) === 'M';
    },
    meridiem : function (hours, minutes, isLower) {
        return hours < 12 ? 'PD' : 'MD';
    },
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd, D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay : '[Sot në] LT',
        nextDay : '[Nesër në] LT',
        nextWeek : 'dddd [në] LT',
        lastDay : '[Dje në] LT',
        lastWeek : 'dddd [e kaluar në] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'në %s',
        past : '%s më parë',
        s : 'disa sekonda',
        ss : '%d sekonda',
        m : 'një minutë',
        mm : '%d minuta',
        h : 'një orë',
        hh : '%d orë',
        d : 'një ditë',
        dd : '%d ditë',
        M : 'një muaj',
        MM : '%d muaj',
        y : 'një vit',
        yy : '%d vite'
    },
    dayOfMonthOrdinalParse: /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return sq;

})));


/***/ }),

/***/ "../../../../moment/locale/sr-cyrl.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Serbian Cyrillic [sr-cyrl]
//! author : Milan Janačković<milanjanackovic@gmail.com> : https://github.com/milan-j

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var translator = {
    words: { //Different grammatical cases
        ss: ['секунда', 'секунде', 'секунди'],
        m: ['један минут', 'једне минуте'],
        mm: ['минут', 'минуте', 'минута'],
        h: ['један сат', 'једног сата'],
        hh: ['сат', 'сата', 'сати'],
        dd: ['дан', 'дана', 'дана'],
        MM: ['месец', 'месеца', 'месеци'],
        yy: ['година', 'године', 'година']
    },
    correctGrammaticalCase: function (number, wordKey) {
        return number === 1 ? wordKey[0] : (number >= 2 && number <= 4 ? wordKey[1] : wordKey[2]);
    },
    translate: function (number, withoutSuffix, key) {
        var wordKey = translator.words[key];
        if (key.length === 1) {
            return withoutSuffix ? wordKey[0] : wordKey[1];
        } else {
            return number + ' ' + translator.correctGrammaticalCase(number, wordKey);
        }
    }
};

var srCyrl = moment.defineLocale('sr-cyrl', {
    months: 'јануар_фебруар_март_април_мај_јун_јул_август_септембар_октобар_новембар_децембар'.split('_'),
    monthsShort: 'јан._феб._мар._апр._мај_јун_јул_авг._сеп._окт._нов._дец.'.split('_'),
    monthsParseExact: true,
    weekdays: 'недеља_понедељак_уторак_среда_четвртак_петак_субота'.split('_'),
    weekdaysShort: 'нед._пон._уто._сре._чет._пет._суб.'.split('_'),
    weekdaysMin: 'не_по_ут_ср_че_пе_су'.split('_'),
    weekdaysParseExact : true,
    longDateFormat: {
        LT: 'H:mm',
        LTS : 'H:mm:ss',
        L: 'DD.MM.YYYY',
        LL: 'D. MMMM YYYY',
        LLL: 'D. MMMM YYYY H:mm',
        LLLL: 'dddd, D. MMMM YYYY H:mm'
    },
    calendar: {
        sameDay: '[данас у] LT',
        nextDay: '[сутра у] LT',
        nextWeek: function () {
            switch (this.day()) {
                case 0:
                    return '[у] [недељу] [у] LT';
                case 3:
                    return '[у] [среду] [у] LT';
                case 6:
                    return '[у] [суботу] [у] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                    return '[у] dddd [у] LT';
            }
        },
        lastDay  : '[јуче у] LT',
        lastWeek : function () {
            var lastWeekDays = [
                '[прошле] [недеље] [у] LT',
                '[прошлог] [понедељка] [у] LT',
                '[прошлог] [уторка] [у] LT',
                '[прошле] [среде] [у] LT',
                '[прошлог] [четвртка] [у] LT',
                '[прошлог] [петка] [у] LT',
                '[прошле] [суботе] [у] LT'
            ];
            return lastWeekDays[this.day()];
        },
        sameElse : 'L'
    },
    relativeTime : {
        future : 'за %s',
        past   : 'пре %s',
        s      : 'неколико секунди',
        ss     : translator.translate,
        m      : translator.translate,
        mm     : translator.translate,
        h      : translator.translate,
        hh     : translator.translate,
        d      : 'дан',
        dd     : translator.translate,
        M      : 'месец',
        MM     : translator.translate,
        y      : 'годину',
        yy     : translator.translate
    },
    dayOfMonthOrdinalParse: /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

return srCyrl;

})));


/***/ }),

/***/ "../../../../moment/locale/sr.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Serbian [sr]
//! author : Milan Janačković<milanjanackovic@gmail.com> : https://github.com/milan-j

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var translator = {
    words: { //Different grammatical cases
        ss: ['sekunda', 'sekunde', 'sekundi'],
        m: ['jedan minut', 'jedne minute'],
        mm: ['minut', 'minute', 'minuta'],
        h: ['jedan sat', 'jednog sata'],
        hh: ['sat', 'sata', 'sati'],
        dd: ['dan', 'dana', 'dana'],
        MM: ['mesec', 'meseca', 'meseci'],
        yy: ['godina', 'godine', 'godina']
    },
    correctGrammaticalCase: function (number, wordKey) {
        return number === 1 ? wordKey[0] : (number >= 2 && number <= 4 ? wordKey[1] : wordKey[2]);
    },
    translate: function (number, withoutSuffix, key) {
        var wordKey = translator.words[key];
        if (key.length === 1) {
            return withoutSuffix ? wordKey[0] : wordKey[1];
        } else {
            return number + ' ' + translator.correctGrammaticalCase(number, wordKey);
        }
    }
};

var sr = moment.defineLocale('sr', {
    months: 'januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar'.split('_'),
    monthsShort: 'jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.'.split('_'),
    monthsParseExact: true,
    weekdays: 'nedelja_ponedeljak_utorak_sreda_četvrtak_petak_subota'.split('_'),
    weekdaysShort: 'ned._pon._uto._sre._čet._pet._sub.'.split('_'),
    weekdaysMin: 'ne_po_ut_sr_če_pe_su'.split('_'),
    weekdaysParseExact : true,
    longDateFormat: {
        LT: 'H:mm',
        LTS : 'H:mm:ss',
        L: 'DD.MM.YYYY',
        LL: 'D. MMMM YYYY',
        LLL: 'D. MMMM YYYY H:mm',
        LLLL: 'dddd, D. MMMM YYYY H:mm'
    },
    calendar: {
        sameDay: '[danas u] LT',
        nextDay: '[sutra u] LT',
        nextWeek: function () {
            switch (this.day()) {
                case 0:
                    return '[u] [nedelju] [u] LT';
                case 3:
                    return '[u] [sredu] [u] LT';
                case 6:
                    return '[u] [subotu] [u] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                    return '[u] dddd [u] LT';
            }
        },
        lastDay  : '[juče u] LT',
        lastWeek : function () {
            var lastWeekDays = [
                '[prošle] [nedelje] [u] LT',
                '[prošlog] [ponedeljka] [u] LT',
                '[prošlog] [utorka] [u] LT',
                '[prošle] [srede] [u] LT',
                '[prošlog] [četvrtka] [u] LT',
                '[prošlog] [petka] [u] LT',
                '[prošle] [subote] [u] LT'
            ];
            return lastWeekDays[this.day()];
        },
        sameElse : 'L'
    },
    relativeTime : {
        future : 'za %s',
        past   : 'pre %s',
        s      : 'nekoliko sekundi',
        ss     : translator.translate,
        m      : translator.translate,
        mm     : translator.translate,
        h      : translator.translate,
        hh     : translator.translate,
        d      : 'dan',
        dd     : translator.translate,
        M      : 'mesec',
        MM     : translator.translate,
        y      : 'godinu',
        yy     : translator.translate
    },
    dayOfMonthOrdinalParse: /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

return sr;

})));


/***/ }),

/***/ "../../../../moment/locale/ss.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : siSwati [ss]
//! author : Nicolai Davies<mail@nicolai.io> : https://github.com/nicolaidavies

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';



var ss = moment.defineLocale('ss', {
    months : "Bhimbidvwane_Indlovana_Indlov'lenkhulu_Mabasa_Inkhwekhweti_Inhlaba_Kholwane_Ingci_Inyoni_Imphala_Lweti_Ingongoni".split('_'),
    monthsShort : 'Bhi_Ina_Inu_Mab_Ink_Inh_Kho_Igc_Iny_Imp_Lwe_Igo'.split('_'),
    weekdays : 'Lisontfo_Umsombuluko_Lesibili_Lesitsatfu_Lesine_Lesihlanu_Umgcibelo'.split('_'),
    weekdaysShort : 'Lis_Umb_Lsb_Les_Lsi_Lsh_Umg'.split('_'),
    weekdaysMin : 'Li_Us_Lb_Lt_Ls_Lh_Ug'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'h:mm A',
        LTS : 'h:mm:ss A',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY h:mm A',
        LLLL : 'dddd, D MMMM YYYY h:mm A'
    },
    calendar : {
        sameDay : '[Namuhla nga] LT',
        nextDay : '[Kusasa nga] LT',
        nextWeek : 'dddd [nga] LT',
        lastDay : '[Itolo nga] LT',
        lastWeek : 'dddd [leliphelile] [nga] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'nga %s',
        past : 'wenteka nga %s',
        s : 'emizuzwana lomcane',
        ss : '%d mzuzwana',
        m : 'umzuzu',
        mm : '%d emizuzu',
        h : 'lihora',
        hh : '%d emahora',
        d : 'lilanga',
        dd : '%d emalanga',
        M : 'inyanga',
        MM : '%d tinyanga',
        y : 'umnyaka',
        yy : '%d iminyaka'
    },
    meridiemParse: /ekuseni|emini|entsambama|ebusuku/,
    meridiem : function (hours, minutes, isLower) {
        if (hours < 11) {
            return 'ekuseni';
        } else if (hours < 15) {
            return 'emini';
        } else if (hours < 19) {
            return 'entsambama';
        } else {
            return 'ebusuku';
        }
    },
    meridiemHour : function (hour, meridiem) {
        if (hour === 12) {
            hour = 0;
        }
        if (meridiem === 'ekuseni') {
            return hour;
        } else if (meridiem === 'emini') {
            return hour >= 11 ? hour : hour + 12;
        } else if (meridiem === 'entsambama' || meridiem === 'ebusuku') {
            if (hour === 0) {
                return 0;
            }
            return hour + 12;
        }
    },
    dayOfMonthOrdinalParse: /\d{1,2}/,
    ordinal : '%d',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return ss;

})));


/***/ }),

/***/ "../../../../moment/locale/sv.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Swedish [sv]
//! author : Jens Alm : https://github.com/ulmus

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var sv = moment.defineLocale('sv', {
    months : 'januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december'.split('_'),
    monthsShort : 'jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec'.split('_'),
    weekdays : 'söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag'.split('_'),
    weekdaysShort : 'sön_mån_tis_ons_tor_fre_lör'.split('_'),
    weekdaysMin : 'sö_må_ti_on_to_fr_lö'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'YYYY-MM-DD',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY [kl.] HH:mm',
        LLLL : 'dddd D MMMM YYYY [kl.] HH:mm',
        lll : 'D MMM YYYY HH:mm',
        llll : 'ddd D MMM YYYY HH:mm'
    },
    calendar : {
        sameDay: '[Idag] LT',
        nextDay: '[Imorgon] LT',
        lastDay: '[Igår] LT',
        nextWeek: '[På] dddd LT',
        lastWeek: '[I] dddd[s] LT',
        sameElse: 'L'
    },
    relativeTime : {
        future : 'om %s',
        past : 'för %s sedan',
        s : 'några sekunder',
        ss : '%d sekunder',
        m : 'en minut',
        mm : '%d minuter',
        h : 'en timme',
        hh : '%d timmar',
        d : 'en dag',
        dd : '%d dagar',
        M : 'en månad',
        MM : '%d månader',
        y : 'ett år',
        yy : '%d år'
    },
    dayOfMonthOrdinalParse: /\d{1,2}(e|a)/,
    ordinal : function (number) {
        var b = number % 10,
            output = (~~(number % 100 / 10) === 1) ? 'e' :
            (b === 1) ? 'a' :
            (b === 2) ? 'a' :
            (b === 3) ? 'e' : 'e';
        return number + output;
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return sv;

})));


/***/ }),

/***/ "../../../../moment/locale/sw.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Swahili [sw]
//! author : Fahad Kassim : https://github.com/fadsel

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var sw = moment.defineLocale('sw', {
    months : 'Januari_Februari_Machi_Aprili_Mei_Juni_Julai_Agosti_Septemba_Oktoba_Novemba_Desemba'.split('_'),
    monthsShort : 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ago_Sep_Okt_Nov_Des'.split('_'),
    weekdays : 'Jumapili_Jumatatu_Jumanne_Jumatano_Alhamisi_Ijumaa_Jumamosi'.split('_'),
    weekdaysShort : 'Jpl_Jtat_Jnne_Jtan_Alh_Ijm_Jmos'.split('_'),
    weekdaysMin : 'J2_J3_J4_J5_Al_Ij_J1'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD.MM.YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd, D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay : '[leo saa] LT',
        nextDay : '[kesho saa] LT',
        nextWeek : '[wiki ijayo] dddd [saat] LT',
        lastDay : '[jana] LT',
        lastWeek : '[wiki iliyopita] dddd [saat] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : '%s baadaye',
        past : 'tokea %s',
        s : 'hivi punde',
        ss : 'sekunde %d',
        m : 'dakika moja',
        mm : 'dakika %d',
        h : 'saa limoja',
        hh : 'masaa %d',
        d : 'siku moja',
        dd : 'masiku %d',
        M : 'mwezi mmoja',
        MM : 'miezi %d',
        y : 'mwaka mmoja',
        yy : 'miaka %d'
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

return sw;

})));


/***/ }),

/***/ "../../../../moment/locale/ta.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Tamil [ta]
//! author : Arjunkumar Krishnamoorthy : https://github.com/tk120404

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var symbolMap = {
    '1': '௧',
    '2': '௨',
    '3': '௩',
    '4': '௪',
    '5': '௫',
    '6': '௬',
    '7': '௭',
    '8': '௮',
    '9': '௯',
    '0': '௦'
};
var numberMap = {
    '௧': '1',
    '௨': '2',
    '௩': '3',
    '௪': '4',
    '௫': '5',
    '௬': '6',
    '௭': '7',
    '௮': '8',
    '௯': '9',
    '௦': '0'
};

var ta = moment.defineLocale('ta', {
    months : 'ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்'.split('_'),
    monthsShort : 'ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்'.split('_'),
    weekdays : 'ஞாயிற்றுக்கிழமை_திங்கட்கிழமை_செவ்வாய்கிழமை_புதன்கிழமை_வியாழக்கிழமை_வெள்ளிக்கிழமை_சனிக்கிழமை'.split('_'),
    weekdaysShort : 'ஞாயிறு_திங்கள்_செவ்வாய்_புதன்_வியாழன்_வெள்ளி_சனி'.split('_'),
    weekdaysMin : 'ஞா_தி_செ_பு_வி_வெ_ச'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY, HH:mm',
        LLLL : 'dddd, D MMMM YYYY, HH:mm'
    },
    calendar : {
        sameDay : '[இன்று] LT',
        nextDay : '[நாளை] LT',
        nextWeek : 'dddd, LT',
        lastDay : '[நேற்று] LT',
        lastWeek : '[கடந்த வாரம்] dddd, LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : '%s இல்',
        past : '%s முன்',
        s : 'ஒரு சில விநாடிகள்',
        ss : '%d விநாடிகள்',
        m : 'ஒரு நிமிடம்',
        mm : '%d நிமிடங்கள்',
        h : 'ஒரு மணி நேரம்',
        hh : '%d மணி நேரம்',
        d : 'ஒரு நாள்',
        dd : '%d நாட்கள்',
        M : 'ஒரு மாதம்',
        MM : '%d மாதங்கள்',
        y : 'ஒரு வருடம்',
        yy : '%d ஆண்டுகள்'
    },
    dayOfMonthOrdinalParse: /\d{1,2}வது/,
    ordinal : function (number) {
        return number + 'வது';
    },
    preparse: function (string) {
        return string.replace(/[௧௨௩௪௫௬௭௮௯௦]/g, function (match) {
            return numberMap[match];
        });
    },
    postformat: function (string) {
        return string.replace(/\d/g, function (match) {
            return symbolMap[match];
        });
    },
    // refer http://ta.wikipedia.org/s/1er1
    meridiemParse: /யாமம்|வைகறை|காலை|நண்பகல்|எற்பாடு|மாலை/,
    meridiem : function (hour, minute, isLower) {
        if (hour < 2) {
            return ' யாமம்';
        } else if (hour < 6) {
            return ' வைகறை';  // வைகறை
        } else if (hour < 10) {
            return ' காலை'; // காலை
        } else if (hour < 14) {
            return ' நண்பகல்'; // நண்பகல்
        } else if (hour < 18) {
            return ' எற்பாடு'; // எற்பாடு
        } else if (hour < 22) {
            return ' மாலை'; // மாலை
        } else {
            return ' யாமம்';
        }
    },
    meridiemHour : function (hour, meridiem) {
        if (hour === 12) {
            hour = 0;
        }
        if (meridiem === 'யாமம்') {
            return hour < 2 ? hour : hour + 12;
        } else if (meridiem === 'வைகறை' || meridiem === 'காலை') {
            return hour;
        } else if (meridiem === 'நண்பகல்') {
            return hour >= 10 ? hour : hour + 12;
        } else {
            return hour + 12;
        }
    },
    week : {
        dow : 0, // Sunday is the first day of the week.
        doy : 6  // The week that contains Jan 1st is the first week of the year.
    }
});

return ta;

})));


/***/ }),

/***/ "../../../../moment/locale/te.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Telugu [te]
//! author : Krishna Chaitanya Thota : https://github.com/kcthota

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var te = moment.defineLocale('te', {
    months : 'జనవరి_ఫిబ్రవరి_మార్చి_ఏప్రిల్_మే_జూన్_జూలై_ఆగస్టు_సెప్టెంబర్_అక్టోబర్_నవంబర్_డిసెంబర్'.split('_'),
    monthsShort : 'జన._ఫిబ్ర._మార్చి_ఏప్రి._మే_జూన్_జూలై_ఆగ._సెప్._అక్టో._నవ._డిసె.'.split('_'),
    monthsParseExact : true,
    weekdays : 'ఆదివారం_సోమవారం_మంగళవారం_బుధవారం_గురువారం_శుక్రవారం_శనివారం'.split('_'),
    weekdaysShort : 'ఆది_సోమ_మంగళ_బుధ_గురు_శుక్ర_శని'.split('_'),
    weekdaysMin : 'ఆ_సో_మం_బు_గు_శు_శ'.split('_'),
    longDateFormat : {
        LT : 'A h:mm',
        LTS : 'A h:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY, A h:mm',
        LLLL : 'dddd, D MMMM YYYY, A h:mm'
    },
    calendar : {
        sameDay : '[నేడు] LT',
        nextDay : '[రేపు] LT',
        nextWeek : 'dddd, LT',
        lastDay : '[నిన్న] LT',
        lastWeek : '[గత] dddd, LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : '%s లో',
        past : '%s క్రితం',
        s : 'కొన్ని క్షణాలు',
        ss : '%d సెకన్లు',
        m : 'ఒక నిమిషం',
        mm : '%d నిమిషాలు',
        h : 'ఒక గంట',
        hh : '%d గంటలు',
        d : 'ఒక రోజు',
        dd : '%d రోజులు',
        M : 'ఒక నెల',
        MM : '%d నెలలు',
        y : 'ఒక సంవత్సరం',
        yy : '%d సంవత్సరాలు'
    },
    dayOfMonthOrdinalParse : /\d{1,2}వ/,
    ordinal : '%dవ',
    meridiemParse: /రాత్రి|ఉదయం|మధ్యాహ్నం|సాయంత్రం/,
    meridiemHour : function (hour, meridiem) {
        if (hour === 12) {
            hour = 0;
        }
        if (meridiem === 'రాత్రి') {
            return hour < 4 ? hour : hour + 12;
        } else if (meridiem === 'ఉదయం') {
            return hour;
        } else if (meridiem === 'మధ్యాహ్నం') {
            return hour >= 10 ? hour : hour + 12;
        } else if (meridiem === 'సాయంత్రం') {
            return hour + 12;
        }
    },
    meridiem : function (hour, minute, isLower) {
        if (hour < 4) {
            return 'రాత్రి';
        } else if (hour < 10) {
            return 'ఉదయం';
        } else if (hour < 17) {
            return 'మధ్యాహ్నం';
        } else if (hour < 20) {
            return 'సాయంత్రం';
        } else {
            return 'రాత్రి';
        }
    },
    week : {
        dow : 0, // Sunday is the first day of the week.
        doy : 6  // The week that contains Jan 1st is the first week of the year.
    }
});

return te;

})));


/***/ }),

/***/ "../../../../moment/locale/tet.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Tetun Dili (East Timor) [tet]
//! author : Joshua Brooks : https://github.com/joshbrooks
//! author : Onorio De J. Afonso : https://github.com/marobo

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var tet = moment.defineLocale('tet', {
    months : 'Janeiru_Fevereiru_Marsu_Abril_Maiu_Juniu_Juliu_Augustu_Setembru_Outubru_Novembru_Dezembru'.split('_'),
    monthsShort : 'Jan_Fev_Mar_Abr_Mai_Jun_Jul_Aug_Set_Out_Nov_Dez'.split('_'),
    weekdays : 'Domingu_Segunda_Tersa_Kuarta_Kinta_Sexta_Sabadu'.split('_'),
    weekdaysShort : 'Dom_Seg_Ters_Kua_Kint_Sext_Sab'.split('_'),
    weekdaysMin : 'Do_Seg_Te_Ku_Ki_Sex_Sa'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd, D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay: '[Ohin iha] LT',
        nextDay: '[Aban iha] LT',
        nextWeek: 'dddd [iha] LT',
        lastDay: '[Horiseik iha] LT',
        lastWeek: 'dddd [semana kotuk] [iha] LT',
        sameElse: 'L'
    },
    relativeTime : {
        future : 'iha %s',
        past : '%s liuba',
        s : 'minutu balun',
        ss : 'minutu %d',
        m : 'minutu ida',
        mm : 'minutus %d',
        h : 'horas ida',
        hh : 'horas %d',
        d : 'loron ida',
        dd : 'loron %d',
        M : 'fulan ida',
        MM : 'fulan %d',
        y : 'tinan ida',
        yy : 'tinan %d'
    },
    dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
    ordinal : function (number) {
        var b = number % 10,
            output = (~~(number % 100 / 10) === 1) ? 'th' :
            (b === 1) ? 'st' :
            (b === 2) ? 'nd' :
            (b === 3) ? 'rd' : 'th';
        return number + output;
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return tet;

})));


/***/ }),

/***/ "../../../../moment/locale/th.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Thai [th]
//! author : Kridsada Thanabulpong : https://github.com/sirn

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var th = moment.defineLocale('th', {
    months : 'มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม'.split('_'),
    monthsShort : 'ม.ค._ก.พ._มี.ค._เม.ย._พ.ค._มิ.ย._ก.ค._ส.ค._ก.ย._ต.ค._พ.ย._ธ.ค.'.split('_'),
    monthsParseExact: true,
    weekdays : 'อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์'.split('_'),
    weekdaysShort : 'อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์'.split('_'), // yes, three characters difference
    weekdaysMin : 'อา._จ._อ._พ._พฤ._ศ._ส.'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'H:mm',
        LTS : 'H:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY เวลา H:mm',
        LLLL : 'วันddddที่ D MMMM YYYY เวลา H:mm'
    },
    meridiemParse: /ก่อนเที่ยง|หลังเที่ยง/,
    isPM: function (input) {
        return input === 'หลังเที่ยง';
    },
    meridiem : function (hour, minute, isLower) {
        if (hour < 12) {
            return 'ก่อนเที่ยง';
        } else {
            return 'หลังเที่ยง';
        }
    },
    calendar : {
        sameDay : '[วันนี้ เวลา] LT',
        nextDay : '[พรุ่งนี้ เวลา] LT',
        nextWeek : 'dddd[หน้า เวลา] LT',
        lastDay : '[เมื่อวานนี้ เวลา] LT',
        lastWeek : '[วัน]dddd[ที่แล้ว เวลา] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'อีก %s',
        past : '%sที่แล้ว',
        s : 'ไม่กี่วินาที',
        ss : '%d วินาที',
        m : '1 นาที',
        mm : '%d นาที',
        h : '1 ชั่วโมง',
        hh : '%d ชั่วโมง',
        d : '1 วัน',
        dd : '%d วัน',
        M : '1 เดือน',
        MM : '%d เดือน',
        y : '1 ปี',
        yy : '%d ปี'
    }
});

return th;

})));


/***/ }),

/***/ "../../../../moment/locale/tl-ph.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Tagalog (Philippines) [tl-ph]
//! author : Dan Hagman : https://github.com/hagmandan

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var tlPh = moment.defineLocale('tl-ph', {
    months : 'Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre'.split('_'),
    monthsShort : 'Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis'.split('_'),
    weekdays : 'Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado'.split('_'),
    weekdaysShort : 'Lin_Lun_Mar_Miy_Huw_Biy_Sab'.split('_'),
    weekdaysMin : 'Li_Lu_Ma_Mi_Hu_Bi_Sab'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'MM/D/YYYY',
        LL : 'MMMM D, YYYY',
        LLL : 'MMMM D, YYYY HH:mm',
        LLLL : 'dddd, MMMM DD, YYYY HH:mm'
    },
    calendar : {
        sameDay: 'LT [ngayong araw]',
        nextDay: '[Bukas ng] LT',
        nextWeek: 'LT [sa susunod na] dddd',
        lastDay: 'LT [kahapon]',
        lastWeek: 'LT [noong nakaraang] dddd',
        sameElse: 'L'
    },
    relativeTime : {
        future : 'sa loob ng %s',
        past : '%s ang nakalipas',
        s : 'ilang segundo',
        ss : '%d segundo',
        m : 'isang minuto',
        mm : '%d minuto',
        h : 'isang oras',
        hh : '%d oras',
        d : 'isang araw',
        dd : '%d araw',
        M : 'isang buwan',
        MM : '%d buwan',
        y : 'isang taon',
        yy : '%d taon'
    },
    dayOfMonthOrdinalParse: /\d{1,2}/,
    ordinal : function (number) {
        return number;
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return tlPh;

})));


/***/ }),

/***/ "../../../../moment/locale/tlh.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Klingon [tlh]
//! author : Dominika Kruk : https://github.com/amaranthrose

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var numbersNouns = 'pagh_wa’_cha’_wej_loS_vagh_jav_Soch_chorgh_Hut'.split('_');

function translateFuture(output) {
    var time = output;
    time = (output.indexOf('jaj') !== -1) ?
    time.slice(0, -3) + 'leS' :
    (output.indexOf('jar') !== -1) ?
    time.slice(0, -3) + 'waQ' :
    (output.indexOf('DIS') !== -1) ?
    time.slice(0, -3) + 'nem' :
    time + ' pIq';
    return time;
}

function translatePast(output) {
    var time = output;
    time = (output.indexOf('jaj') !== -1) ?
    time.slice(0, -3) + 'Hu’' :
    (output.indexOf('jar') !== -1) ?
    time.slice(0, -3) + 'wen' :
    (output.indexOf('DIS') !== -1) ?
    time.slice(0, -3) + 'ben' :
    time + ' ret';
    return time;
}

function translate(number, withoutSuffix, string, isFuture) {
    var numberNoun = numberAsNoun(number);
    switch (string) {
        case 'ss':
            return numberNoun + ' lup';
        case 'mm':
            return numberNoun + ' tup';
        case 'hh':
            return numberNoun + ' rep';
        case 'dd':
            return numberNoun + ' jaj';
        case 'MM':
            return numberNoun + ' jar';
        case 'yy':
            return numberNoun + ' DIS';
    }
}

function numberAsNoun(number) {
    var hundred = Math.floor((number % 1000) / 100),
    ten = Math.floor((number % 100) / 10),
    one = number % 10,
    word = '';
    if (hundred > 0) {
        word += numbersNouns[hundred] + 'vatlh';
    }
    if (ten > 0) {
        word += ((word !== '') ? ' ' : '') + numbersNouns[ten] + 'maH';
    }
    if (one > 0) {
        word += ((word !== '') ? ' ' : '') + numbersNouns[one];
    }
    return (word === '') ? 'pagh' : word;
}

var tlh = moment.defineLocale('tlh', {
    months : 'tera’ jar wa’_tera’ jar cha’_tera’ jar wej_tera’ jar loS_tera’ jar vagh_tera’ jar jav_tera’ jar Soch_tera’ jar chorgh_tera’ jar Hut_tera’ jar wa’maH_tera’ jar wa’maH wa’_tera’ jar wa’maH cha’'.split('_'),
    monthsShort : 'jar wa’_jar cha’_jar wej_jar loS_jar vagh_jar jav_jar Soch_jar chorgh_jar Hut_jar wa’maH_jar wa’maH wa’_jar wa’maH cha’'.split('_'),
    monthsParseExact : true,
    weekdays : 'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split('_'),
    weekdaysShort : 'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split('_'),
    weekdaysMin : 'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD.MM.YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd, D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay: '[DaHjaj] LT',
        nextDay: '[wa’leS] LT',
        nextWeek: 'LLL',
        lastDay: '[wa’Hu’] LT',
        lastWeek: 'LLL',
        sameElse: 'L'
    },
    relativeTime : {
        future : translateFuture,
        past : translatePast,
        s : 'puS lup',
        ss : translate,
        m : 'wa’ tup',
        mm : translate,
        h : 'wa’ rep',
        hh : translate,
        d : 'wa’ jaj',
        dd : translate,
        M : 'wa’ jar',
        MM : translate,
        y : 'wa’ DIS',
        yy : translate
    },
    dayOfMonthOrdinalParse: /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return tlh;

})));


/***/ }),

/***/ "../../../../moment/locale/tr.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Turkish [tr]
//! authors : Erhan Gundogan : https://github.com/erhangundogan,
//!           Burak Yiğit Kaya: https://github.com/BYK

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var suffixes = {
    1: '\'inci',
    5: '\'inci',
    8: '\'inci',
    70: '\'inci',
    80: '\'inci',
    2: '\'nci',
    7: '\'nci',
    20: '\'nci',
    50: '\'nci',
    3: '\'üncü',
    4: '\'üncü',
    100: '\'üncü',
    6: '\'ncı',
    9: '\'uncu',
    10: '\'uncu',
    30: '\'uncu',
    60: '\'ıncı',
    90: '\'ıncı'
};

var tr = moment.defineLocale('tr', {
    months : 'Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık'.split('_'),
    monthsShort : 'Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara'.split('_'),
    weekdays : 'Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi'.split('_'),
    weekdaysShort : 'Paz_Pts_Sal_Çar_Per_Cum_Cts'.split('_'),
    weekdaysMin : 'Pz_Pt_Sa_Ça_Pe_Cu_Ct'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD.MM.YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd, D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay : '[bugün saat] LT',
        nextDay : '[yarın saat] LT',
        nextWeek : '[gelecek] dddd [saat] LT',
        lastDay : '[dün] LT',
        lastWeek : '[geçen] dddd [saat] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : '%s sonra',
        past : '%s önce',
        s : 'birkaç saniye',
        ss : '%d saniye',
        m : 'bir dakika',
        mm : '%d dakika',
        h : 'bir saat',
        hh : '%d saat',
        d : 'bir gün',
        dd : '%d gün',
        M : 'bir ay',
        MM : '%d ay',
        y : 'bir yıl',
        yy : '%d yıl'
    },
    dayOfMonthOrdinalParse: /\d{1,2}'(inci|nci|üncü|ncı|uncu|ıncı)/,
    ordinal : function (number) {
        if (number === 0) {  // special case for zero
            return number + '\'ıncı';
        }
        var a = number % 10,
            b = number % 100 - a,
            c = number >= 100 ? 100 : null;
        return number + (suffixes[a] || suffixes[b] || suffixes[c]);
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

return tr;

})));


/***/ }),

/***/ "../../../../moment/locale/tzl.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Talossan [tzl]
//! author : Robin van der Vliet : https://github.com/robin0van0der0v
//! author : Iustì Canun

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


// After the year there should be a slash and the amount of years since December 26, 1979 in Roman numerals.
// This is currently too difficult (maybe even impossible) to add.
var tzl = moment.defineLocale('tzl', {
    months : 'Januar_Fevraglh_Març_Avrïu_Mai_Gün_Julia_Guscht_Setemvar_Listopäts_Noemvar_Zecemvar'.split('_'),
    monthsShort : 'Jan_Fev_Mar_Avr_Mai_Gün_Jul_Gus_Set_Lis_Noe_Zec'.split('_'),
    weekdays : 'Súladi_Lúneçi_Maitzi_Márcuri_Xhúadi_Viénerçi_Sáturi'.split('_'),
    weekdaysShort : 'Súl_Lún_Mai_Már_Xhú_Vié_Sát'.split('_'),
    weekdaysMin : 'Sú_Lú_Ma_Má_Xh_Vi_Sá'.split('_'),
    longDateFormat : {
        LT : 'HH.mm',
        LTS : 'HH.mm.ss',
        L : 'DD.MM.YYYY',
        LL : 'D. MMMM [dallas] YYYY',
        LLL : 'D. MMMM [dallas] YYYY HH.mm',
        LLLL : 'dddd, [li] D. MMMM [dallas] YYYY HH.mm'
    },
    meridiemParse: /d\'o|d\'a/i,
    isPM : function (input) {
        return 'd\'o' === input.toLowerCase();
    },
    meridiem : function (hours, minutes, isLower) {
        if (hours > 11) {
            return isLower ? 'd\'o' : 'D\'O';
        } else {
            return isLower ? 'd\'a' : 'D\'A';
        }
    },
    calendar : {
        sameDay : '[oxhi à] LT',
        nextDay : '[demà à] LT',
        nextWeek : 'dddd [à] LT',
        lastDay : '[ieiri à] LT',
        lastWeek : '[sür el] dddd [lasteu à] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'osprei %s',
        past : 'ja%s',
        s : processRelativeTime,
        ss : processRelativeTime,
        m : processRelativeTime,
        mm : processRelativeTime,
        h : processRelativeTime,
        hh : processRelativeTime,
        d : processRelativeTime,
        dd : processRelativeTime,
        M : processRelativeTime,
        MM : processRelativeTime,
        y : processRelativeTime,
        yy : processRelativeTime
    },
    dayOfMonthOrdinalParse: /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

function processRelativeTime(number, withoutSuffix, key, isFuture) {
    var format = {
        's': ['viensas secunds', '\'iensas secunds'],
        'ss': [number + ' secunds', '' + number + ' secunds'],
        'm': ['\'n míut', '\'iens míut'],
        'mm': [number + ' míuts', '' + number + ' míuts'],
        'h': ['\'n þora', '\'iensa þora'],
        'hh': [number + ' þoras', '' + number + ' þoras'],
        'd': ['\'n ziua', '\'iensa ziua'],
        'dd': [number + ' ziuas', '' + number + ' ziuas'],
        'M': ['\'n mes', '\'iens mes'],
        'MM': [number + ' mesen', '' + number + ' mesen'],
        'y': ['\'n ar', '\'iens ar'],
        'yy': [number + ' ars', '' + number + ' ars']
    };
    return isFuture ? format[key][0] : (withoutSuffix ? format[key][0] : format[key][1]);
}

return tzl;

})));


/***/ }),

/***/ "../../../../moment/locale/tzm-latn.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Central Atlas Tamazight Latin [tzm-latn]
//! author : Abdel Said : https://github.com/abdelsaid

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var tzmLatn = moment.defineLocale('tzm-latn', {
    months : 'innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir'.split('_'),
    monthsShort : 'innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir'.split('_'),
    weekdays : 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
    weekdaysShort : 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
    weekdaysMin : 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay: '[asdkh g] LT',
        nextDay: '[aska g] LT',
        nextWeek: 'dddd [g] LT',
        lastDay: '[assant g] LT',
        lastWeek: 'dddd [g] LT',
        sameElse: 'L'
    },
    relativeTime : {
        future : 'dadkh s yan %s',
        past : 'yan %s',
        s : 'imik',
        ss : '%d imik',
        m : 'minuḍ',
        mm : '%d minuḍ',
        h : 'saɛa',
        hh : '%d tassaɛin',
        d : 'ass',
        dd : '%d ossan',
        M : 'ayowr',
        MM : '%d iyyirn',
        y : 'asgas',
        yy : '%d isgasn'
    },
    week : {
        dow : 6, // Saturday is the first day of the week.
        doy : 12  // The week that contains Jan 1st is the first week of the year.
    }
});

return tzmLatn;

})));


/***/ }),

/***/ "../../../../moment/locale/tzm.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Central Atlas Tamazight [tzm]
//! author : Abdel Said : https://github.com/abdelsaid

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var tzm = moment.defineLocale('tzm', {
    months : 'ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ'.split('_'),
    monthsShort : 'ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ'.split('_'),
    weekdays : 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
    weekdaysShort : 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
    weekdaysMin : 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS: 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay: '[ⴰⵙⴷⵅ ⴴ] LT',
        nextDay: '[ⴰⵙⴽⴰ ⴴ] LT',
        nextWeek: 'dddd [ⴴ] LT',
        lastDay: '[ⴰⵚⴰⵏⵜ ⴴ] LT',
        lastWeek: 'dddd [ⴴ] LT',
        sameElse: 'L'
    },
    relativeTime : {
        future : 'ⴷⴰⴷⵅ ⵙ ⵢⴰⵏ %s',
        past : 'ⵢⴰⵏ %s',
        s : 'ⵉⵎⵉⴽ',
        ss : '%d ⵉⵎⵉⴽ',
        m : 'ⵎⵉⵏⵓⴺ',
        mm : '%d ⵎⵉⵏⵓⴺ',
        h : 'ⵙⴰⵄⴰ',
        hh : '%d ⵜⴰⵙⵙⴰⵄⵉⵏ',
        d : 'ⴰⵙⵙ',
        dd : '%d oⵙⵙⴰⵏ',
        M : 'ⴰⵢoⵓⵔ',
        MM : '%d ⵉⵢⵢⵉⵔⵏ',
        y : 'ⴰⵙⴳⴰⵙ',
        yy : '%d ⵉⵙⴳⴰⵙⵏ'
    },
    week : {
        dow : 6, // Saturday is the first day of the week.
        doy : 12  // The week that contains Jan 1st is the first week of the year.
    }
});

return tzm;

})));


/***/ }),

/***/ "../../../../moment/locale/uk.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Ukrainian [uk]
//! author : zemlanin : https://github.com/zemlanin
//! Author : Menelion Elensúle : https://github.com/Oire

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


function plural(word, num) {
    var forms = word.split('_');
    return num % 10 === 1 && num % 100 !== 11 ? forms[0] : (num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2]);
}
function relativeTimeWithPlural(number, withoutSuffix, key) {
    var format = {
        'ss': withoutSuffix ? 'секунда_секунди_секунд' : 'секунду_секунди_секунд',
        'mm': withoutSuffix ? 'хвилина_хвилини_хвилин' : 'хвилину_хвилини_хвилин',
        'hh': withoutSuffix ? 'година_години_годин' : 'годину_години_годин',
        'dd': 'день_дні_днів',
        'MM': 'місяць_місяці_місяців',
        'yy': 'рік_роки_років'
    };
    if (key === 'm') {
        return withoutSuffix ? 'хвилина' : 'хвилину';
    }
    else if (key === 'h') {
        return withoutSuffix ? 'година' : 'годину';
    }
    else {
        return number + ' ' + plural(format[key], +number);
    }
}
function weekdaysCaseReplace(m, format) {
    var weekdays = {
        'nominative': 'неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота'.split('_'),
        'accusative': 'неділю_понеділок_вівторок_середу_четвер_п’ятницю_суботу'.split('_'),
        'genitive': 'неділі_понеділка_вівторка_середи_четверга_п’ятниці_суботи'.split('_')
    };

    if (!m) {
        return weekdays['nominative'];
    }

    var nounCase = (/(\[[ВвУу]\]) ?dddd/).test(format) ?
        'accusative' :
        ((/\[?(?:минулої|наступної)? ?\] ?dddd/).test(format) ?
            'genitive' :
            'nominative');
    return weekdays[nounCase][m.day()];
}
function processHoursFunction(str) {
    return function () {
        return str + 'о' + (this.hours() === 11 ? 'б' : '') + '] LT';
    };
}

var uk = moment.defineLocale('uk', {
    months : {
        'format': 'січня_лютого_березня_квітня_травня_червня_липня_серпня_вересня_жовтня_листопада_грудня'.split('_'),
        'standalone': 'січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень'.split('_')
    },
    monthsShort : 'січ_лют_бер_квіт_трав_черв_лип_серп_вер_жовт_лист_груд'.split('_'),
    weekdays : weekdaysCaseReplace,
    weekdaysShort : 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
    weekdaysMin : 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD.MM.YYYY',
        LL : 'D MMMM YYYY р.',
        LLL : 'D MMMM YYYY р., HH:mm',
        LLLL : 'dddd, D MMMM YYYY р., HH:mm'
    },
    calendar : {
        sameDay: processHoursFunction('[Сьогодні '),
        nextDay: processHoursFunction('[Завтра '),
        lastDay: processHoursFunction('[Вчора '),
        nextWeek: processHoursFunction('[У] dddd ['),
        lastWeek: function () {
            switch (this.day()) {
                case 0:
                case 3:
                case 5:
                case 6:
                    return processHoursFunction('[Минулої] dddd [').call(this);
                case 1:
                case 2:
                case 4:
                    return processHoursFunction('[Минулого] dddd [').call(this);
            }
        },
        sameElse: 'L'
    },
    relativeTime : {
        future : 'за %s',
        past : '%s тому',
        s : 'декілька секунд',
        ss : relativeTimeWithPlural,
        m : relativeTimeWithPlural,
        mm : relativeTimeWithPlural,
        h : 'годину',
        hh : relativeTimeWithPlural,
        d : 'день',
        dd : relativeTimeWithPlural,
        M : 'місяць',
        MM : relativeTimeWithPlural,
        y : 'рік',
        yy : relativeTimeWithPlural
    },
    // M. E.: those two are virtually unused but a user might want to implement them for his/her website for some reason
    meridiemParse: /ночі|ранку|дня|вечора/,
    isPM: function (input) {
        return /^(дня|вечора)$/.test(input);
    },
    meridiem : function (hour, minute, isLower) {
        if (hour < 4) {
            return 'ночі';
        } else if (hour < 12) {
            return 'ранку';
        } else if (hour < 17) {
            return 'дня';
        } else {
            return 'вечора';
        }
    },
    dayOfMonthOrdinalParse: /\d{1,2}-(й|го)/,
    ordinal: function (number, period) {
        switch (period) {
            case 'M':
            case 'd':
            case 'DDD':
            case 'w':
            case 'W':
                return number + '-й';
            case 'D':
                return number + '-го';
            default:
                return number;
        }
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

return uk;

})));


/***/ }),

/***/ "../../../../moment/locale/ur.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Urdu [ur]
//! author : Sawood Alam : https://github.com/ibnesayeed
//! author : Zack : https://github.com/ZackVision

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var months = [
    'جنوری',
    'فروری',
    'مارچ',
    'اپریل',
    'مئی',
    'جون',
    'جولائی',
    'اگست',
    'ستمبر',
    'اکتوبر',
    'نومبر',
    'دسمبر'
];
var days = [
    'اتوار',
    'پیر',
    'منگل',
    'بدھ',
    'جمعرات',
    'جمعہ',
    'ہفتہ'
];

var ur = moment.defineLocale('ur', {
    months : months,
    monthsShort : months,
    weekdays : days,
    weekdaysShort : days,
    weekdaysMin : days,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd، D MMMM YYYY HH:mm'
    },
    meridiemParse: /صبح|شام/,
    isPM : function (input) {
        return 'شام' === input;
    },
    meridiem : function (hour, minute, isLower) {
        if (hour < 12) {
            return 'صبح';
        }
        return 'شام';
    },
    calendar : {
        sameDay : '[آج بوقت] LT',
        nextDay : '[کل بوقت] LT',
        nextWeek : 'dddd [بوقت] LT',
        lastDay : '[گذشتہ روز بوقت] LT',
        lastWeek : '[گذشتہ] dddd [بوقت] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : '%s بعد',
        past : '%s قبل',
        s : 'چند سیکنڈ',
        ss : '%d سیکنڈ',
        m : 'ایک منٹ',
        mm : '%d منٹ',
        h : 'ایک گھنٹہ',
        hh : '%d گھنٹے',
        d : 'ایک دن',
        dd : '%d دن',
        M : 'ایک ماہ',
        MM : '%d ماہ',
        y : 'ایک سال',
        yy : '%d سال'
    },
    preparse: function (string) {
        return string.replace(/،/g, ',');
    },
    postformat: function (string) {
        return string.replace(/,/g, '،');
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return ur;

})));


/***/ }),

/***/ "../../../../moment/locale/uz-latn.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Uzbek Latin [uz-latn]
//! author : Rasulbek Mirzayev : github.com/Rasulbeeek

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var uzLatn = moment.defineLocale('uz-latn', {
    months : 'Yanvar_Fevral_Mart_Aprel_May_Iyun_Iyul_Avgust_Sentabr_Oktabr_Noyabr_Dekabr'.split('_'),
    monthsShort : 'Yan_Fev_Mar_Apr_May_Iyun_Iyul_Avg_Sen_Okt_Noy_Dek'.split('_'),
    weekdays : 'Yakshanba_Dushanba_Seshanba_Chorshanba_Payshanba_Juma_Shanba'.split('_'),
    weekdaysShort : 'Yak_Dush_Sesh_Chor_Pay_Jum_Shan'.split('_'),
    weekdaysMin : 'Ya_Du_Se_Cho_Pa_Ju_Sha'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'D MMMM YYYY, dddd HH:mm'
    },
    calendar : {
        sameDay : '[Bugun soat] LT [da]',
        nextDay : '[Ertaga] LT [da]',
        nextWeek : 'dddd [kuni soat] LT [da]',
        lastDay : '[Kecha soat] LT [da]',
        lastWeek : '[O\'tgan] dddd [kuni soat] LT [da]',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'Yaqin %s ichida',
        past : 'Bir necha %s oldin',
        s : 'soniya',
        ss : '%d soniya',
        m : 'bir daqiqa',
        mm : '%d daqiqa',
        h : 'bir soat',
        hh : '%d soat',
        d : 'bir kun',
        dd : '%d kun',
        M : 'bir oy',
        MM : '%d oy',
        y : 'bir yil',
        yy : '%d yil'
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

return uzLatn;

})));


/***/ }),

/***/ "../../../../moment/locale/uz.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Uzbek [uz]
//! author : Sardor Muminov : https://github.com/muminoff

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var uz = moment.defineLocale('uz', {
    months : 'январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр'.split('_'),
    monthsShort : 'янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек'.split('_'),
    weekdays : 'Якшанба_Душанба_Сешанба_Чоршанба_Пайшанба_Жума_Шанба'.split('_'),
    weekdaysShort : 'Якш_Душ_Сеш_Чор_Пай_Жум_Шан'.split('_'),
    weekdaysMin : 'Як_Ду_Се_Чо_Па_Жу_Ша'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'D MMMM YYYY, dddd HH:mm'
    },
    calendar : {
        sameDay : '[Бугун соат] LT [да]',
        nextDay : '[Эртага] LT [да]',
        nextWeek : 'dddd [куни соат] LT [да]',
        lastDay : '[Кеча соат] LT [да]',
        lastWeek : '[Утган] dddd [куни соат] LT [да]',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'Якин %s ичида',
        past : 'Бир неча %s олдин',
        s : 'фурсат',
        ss : '%d фурсат',
        m : 'бир дакика',
        mm : '%d дакика',
        h : 'бир соат',
        hh : '%d соат',
        d : 'бир кун',
        dd : '%d кун',
        M : 'бир ой',
        MM : '%d ой',
        y : 'бир йил',
        yy : '%d йил'
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 4th is the first week of the year.
    }
});

return uz;

})));


/***/ }),

/***/ "../../../../moment/locale/vi.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Vietnamese [vi]
//! author : Bang Nguyen : https://github.com/bangnk

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var vi = moment.defineLocale('vi', {
    months : 'tháng 1_tháng 2_tháng 3_tháng 4_tháng 5_tháng 6_tháng 7_tháng 8_tháng 9_tháng 10_tháng 11_tháng 12'.split('_'),
    monthsShort : 'Th01_Th02_Th03_Th04_Th05_Th06_Th07_Th08_Th09_Th10_Th11_Th12'.split('_'),
    monthsParseExact : true,
    weekdays : 'chủ nhật_thứ hai_thứ ba_thứ tư_thứ năm_thứ sáu_thứ bảy'.split('_'),
    weekdaysShort : 'CN_T2_T3_T4_T5_T6_T7'.split('_'),
    weekdaysMin : 'CN_T2_T3_T4_T5_T6_T7'.split('_'),
    weekdaysParseExact : true,
    meridiemParse: /sa|ch/i,
    isPM : function (input) {
        return /^ch$/i.test(input);
    },
    meridiem : function (hours, minutes, isLower) {
        if (hours < 12) {
            return isLower ? 'sa' : 'SA';
        } else {
            return isLower ? 'ch' : 'CH';
        }
    },
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM [năm] YYYY',
        LLL : 'D MMMM [năm] YYYY HH:mm',
        LLLL : 'dddd, D MMMM [năm] YYYY HH:mm',
        l : 'DD/M/YYYY',
        ll : 'D MMM YYYY',
        lll : 'D MMM YYYY HH:mm',
        llll : 'ddd, D MMM YYYY HH:mm'
    },
    calendar : {
        sameDay: '[Hôm nay lúc] LT',
        nextDay: '[Ngày mai lúc] LT',
        nextWeek: 'dddd [tuần tới lúc] LT',
        lastDay: '[Hôm qua lúc] LT',
        lastWeek: 'dddd [tuần rồi lúc] LT',
        sameElse: 'L'
    },
    relativeTime : {
        future : '%s tới',
        past : '%s trước',
        s : 'vài giây',
        ss : '%d giây' ,
        m : 'một phút',
        mm : '%d phút',
        h : 'một giờ',
        hh : '%d giờ',
        d : 'một ngày',
        dd : '%d ngày',
        M : 'một tháng',
        MM : '%d tháng',
        y : 'một năm',
        yy : '%d năm'
    },
    dayOfMonthOrdinalParse: /\d{1,2}/,
    ordinal : function (number) {
        return number;
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return vi;

})));


/***/ }),

/***/ "../../../../moment/locale/x-pseudo.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Pseudo [x-pseudo]
//! author : Andrew Hood : https://github.com/andrewhood125

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var xPseudo = moment.defineLocale('x-pseudo', {
    months : 'J~áñúá~rý_F~ébrú~árý_~Márc~h_Áp~ríl_~Máý_~Júñé~_Júl~ý_Áú~gúst~_Sép~témb~ér_Ó~ctób~ér_Ñ~óvém~bér_~Décé~mbér'.split('_'),
    monthsShort : 'J~áñ_~Féb_~Már_~Ápr_~Máý_~Júñ_~Júl_~Áúg_~Sép_~Óct_~Ñóv_~Déc'.split('_'),
    monthsParseExact : true,
    weekdays : 'S~úñdá~ý_Mó~ñdáý~_Túé~sdáý~_Wéd~ñésd~áý_T~húrs~dáý_~Fríd~áý_S~átúr~dáý'.split('_'),
    weekdaysShort : 'S~úñ_~Móñ_~Túé_~Wéd_~Thú_~Frí_~Sát'.split('_'),
    weekdaysMin : 'S~ú_Mó~_Tú_~Wé_T~h_Fr~_Sá'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'HH:mm',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd, D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay : '[T~ódá~ý át] LT',
        nextDay : '[T~ómó~rró~w át] LT',
        nextWeek : 'dddd [át] LT',
        lastDay : '[Ý~ést~érdá~ý át] LT',
        lastWeek : '[L~ást] dddd [át] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'í~ñ %s',
        past : '%s á~gó',
        s : 'á ~féw ~sécó~ñds',
        ss : '%d s~écóñ~ds',
        m : 'á ~míñ~úté',
        mm : '%d m~íñú~tés',
        h : 'á~ñ hó~úr',
        hh : '%d h~óúrs',
        d : 'á ~dáý',
        dd : '%d d~áýs',
        M : 'á ~móñ~th',
        MM : '%d m~óñt~hs',
        y : 'á ~ýéár',
        yy : '%d ý~éárs'
    },
    dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
    ordinal : function (number) {
        var b = number % 10,
            output = (~~(number % 100 / 10) === 1) ? 'th' :
            (b === 1) ? 'st' :
            (b === 2) ? 'nd' :
            (b === 3) ? 'rd' : 'th';
        return number + output;
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return xPseudo;

})));


/***/ }),

/***/ "../../../../moment/locale/yo.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Yoruba Nigeria [yo]
//! author : Atolagbe Abisoye : https://github.com/andela-batolagbe

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var yo = moment.defineLocale('yo', {
    months : 'Sẹ́rẹ́_Èrèlè_Ẹrẹ̀nà_Ìgbé_Èbibi_Òkùdu_Agẹmo_Ògún_Owewe_Ọ̀wàrà_Bélú_Ọ̀pẹ̀̀'.split('_'),
    monthsShort : 'Sẹ́r_Èrl_Ẹrn_Ìgb_Èbi_Òkù_Agẹ_Ògú_Owe_Ọ̀wà_Bél_Ọ̀pẹ̀̀'.split('_'),
    weekdays : 'Àìkú_Ajé_Ìsẹ́gun_Ọjọ́rú_Ọjọ́bọ_Ẹtì_Àbámẹ́ta'.split('_'),
    weekdaysShort : 'Àìk_Ajé_Ìsẹ́_Ọjr_Ọjb_Ẹtì_Àbá'.split('_'),
    weekdaysMin : 'Àì_Aj_Ìs_Ọr_Ọb_Ẹt_Àb'.split('_'),
    longDateFormat : {
        LT : 'h:mm A',
        LTS : 'h:mm:ss A',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY h:mm A',
        LLLL : 'dddd, D MMMM YYYY h:mm A'
    },
    calendar : {
        sameDay : '[Ònì ni] LT',
        nextDay : '[Ọ̀la ni] LT',
        nextWeek : 'dddd [Ọsẹ̀ tón\'bọ] [ni] LT',
        lastDay : '[Àna ni] LT',
        lastWeek : 'dddd [Ọsẹ̀ tólọ́] [ni] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'ní %s',
        past : '%s kọjá',
        s : 'ìsẹjú aayá die',
        ss :'aayá %d',
        m : 'ìsẹjú kan',
        mm : 'ìsẹjú %d',
        h : 'wákati kan',
        hh : 'wákati %d',
        d : 'ọjọ́ kan',
        dd : 'ọjọ́ %d',
        M : 'osù kan',
        MM : 'osù %d',
        y : 'ọdún kan',
        yy : 'ọdún %d'
    },
    dayOfMonthOrdinalParse : /ọjọ́\s\d{1,2}/,
    ordinal : 'ọjọ́ %d',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4 // The week that contains Jan 4th is the first week of the year.
    }
});

return yo;

})));


/***/ }),

/***/ "../../../../moment/locale/zh-cn.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Chinese (China) [zh-cn]
//! author : suupic : https://github.com/suupic
//! author : Zeno Zeng : https://github.com/zenozeng

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var zhCn = moment.defineLocale('zh-cn', {
    months : '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),
    monthsShort : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
    weekdays : '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
    weekdaysShort : '周日_周一_周二_周三_周四_周五_周六'.split('_'),
    weekdaysMin : '日_一_二_三_四_五_六'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'YYYY/MM/DD',
        LL : 'YYYY年M月D日',
        LLL : 'YYYY年M月D日Ah点mm分',
        LLLL : 'YYYY年M月D日ddddAh点mm分',
        l : 'YYYY/M/D',
        ll : 'YYYY年M月D日',
        lll : 'YYYY年M月D日 HH:mm',
        llll : 'YYYY年M月D日dddd HH:mm'
    },
    meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
    meridiemHour: function (hour, meridiem) {
        if (hour === 12) {
            hour = 0;
        }
        if (meridiem === '凌晨' || meridiem === '早上' ||
                meridiem === '上午') {
            return hour;
        } else if (meridiem === '下午' || meridiem === '晚上') {
            return hour + 12;
        } else {
            // '中午'
            return hour >= 11 ? hour : hour + 12;
        }
    },
    meridiem : function (hour, minute, isLower) {
        var hm = hour * 100 + minute;
        if (hm < 600) {
            return '凌晨';
        } else if (hm < 900) {
            return '早上';
        } else if (hm < 1130) {
            return '上午';
        } else if (hm < 1230) {
            return '中午';
        } else if (hm < 1800) {
            return '下午';
        } else {
            return '晚上';
        }
    },
    calendar : {
        sameDay : '[今天]LT',
        nextDay : '[明天]LT',
        nextWeek : '[下]ddddLT',
        lastDay : '[昨天]LT',
        lastWeek : '[上]ddddLT',
        sameElse : 'L'
    },
    dayOfMonthOrdinalParse: /\d{1,2}(日|月|周)/,
    ordinal : function (number, period) {
        switch (period) {
            case 'd':
            case 'D':
            case 'DDD':
                return number + '日';
            case 'M':
                return number + '月';
            case 'w':
            case 'W':
                return number + '周';
            default:
                return number;
        }
    },
    relativeTime : {
        future : '%s内',
        past : '%s前',
        s : '几秒',
        ss : '%d 秒',
        m : '1 分钟',
        mm : '%d 分钟',
        h : '1 小时',
        hh : '%d 小时',
        d : '1 天',
        dd : '%d 天',
        M : '1 个月',
        MM : '%d 个月',
        y : '1 年',
        yy : '%d 年'
    },
    week : {
        // GB/T 7408-1994《数据元和交换格式·信息交换·日期和时间表示法》与ISO 8601:1988等效
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return zhCn;

})));


/***/ }),

/***/ "../../../../moment/locale/zh-hk.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Chinese (Hong Kong) [zh-hk]
//! author : Ben : https://github.com/ben-lin
//! author : Chris Lam : https://github.com/hehachris
//! author : Konstantin : https://github.com/skfd

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var zhHk = moment.defineLocale('zh-hk', {
    months : '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),
    monthsShort : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
    weekdays : '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
    weekdaysShort : '週日_週一_週二_週三_週四_週五_週六'.split('_'),
    weekdaysMin : '日_一_二_三_四_五_六'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'YYYY/MM/DD',
        LL : 'YYYY年M月D日',
        LLL : 'YYYY年M月D日 HH:mm',
        LLLL : 'YYYY年M月D日dddd HH:mm',
        l : 'YYYY/M/D',
        ll : 'YYYY年M月D日',
        lll : 'YYYY年M月D日 HH:mm',
        llll : 'YYYY年M月D日dddd HH:mm'
    },
    meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
    meridiemHour : function (hour, meridiem) {
        if (hour === 12) {
            hour = 0;
        }
        if (meridiem === '凌晨' || meridiem === '早上' || meridiem === '上午') {
            return hour;
        } else if (meridiem === '中午') {
            return hour >= 11 ? hour : hour + 12;
        } else if (meridiem === '下午' || meridiem === '晚上') {
            return hour + 12;
        }
    },
    meridiem : function (hour, minute, isLower) {
        var hm = hour * 100 + minute;
        if (hm < 600) {
            return '凌晨';
        } else if (hm < 900) {
            return '早上';
        } else if (hm < 1130) {
            return '上午';
        } else if (hm < 1230) {
            return '中午';
        } else if (hm < 1800) {
            return '下午';
        } else {
            return '晚上';
        }
    },
    calendar : {
        sameDay : '[今天]LT',
        nextDay : '[明天]LT',
        nextWeek : '[下]ddddLT',
        lastDay : '[昨天]LT',
        lastWeek : '[上]ddddLT',
        sameElse : 'L'
    },
    dayOfMonthOrdinalParse: /\d{1,2}(日|月|週)/,
    ordinal : function (number, period) {
        switch (period) {
            case 'd' :
            case 'D' :
            case 'DDD' :
                return number + '日';
            case 'M' :
                return number + '月';
            case 'w' :
            case 'W' :
                return number + '週';
            default :
                return number;
        }
    },
    relativeTime : {
        future : '%s內',
        past : '%s前',
        s : '幾秒',
        ss : '%d 秒',
        m : '1 分鐘',
        mm : '%d 分鐘',
        h : '1 小時',
        hh : '%d 小時',
        d : '1 天',
        dd : '%d 天',
        M : '1 個月',
        MM : '%d 個月',
        y : '1 年',
        yy : '%d 年'
    }
});

return zhHk;

})));


/***/ }),

/***/ "../../../../moment/locale/zh-tw.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Chinese (Taiwan) [zh-tw]
//! author : Ben : https://github.com/ben-lin
//! author : Chris Lam : https://github.com/hehachris

;(function (global, factory) {
    true ? factory(__webpack_require__("../../../../moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var zhTw = moment.defineLocale('zh-tw', {
    months : '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),
    monthsShort : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
    weekdays : '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
    weekdaysShort : '週日_週一_週二_週三_週四_週五_週六'.split('_'),
    weekdaysMin : '日_一_二_三_四_五_六'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'YYYY/MM/DD',
        LL : 'YYYY年M月D日',
        LLL : 'YYYY年M月D日 HH:mm',
        LLLL : 'YYYY年M月D日dddd HH:mm',
        l : 'YYYY/M/D',
        ll : 'YYYY年M月D日',
        lll : 'YYYY年M月D日 HH:mm',
        llll : 'YYYY年M月D日dddd HH:mm'
    },
    meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
    meridiemHour : function (hour, meridiem) {
        if (hour === 12) {
            hour = 0;
        }
        if (meridiem === '凌晨' || meridiem === '早上' || meridiem === '上午') {
            return hour;
        } else if (meridiem === '中午') {
            return hour >= 11 ? hour : hour + 12;
        } else if (meridiem === '下午' || meridiem === '晚上') {
            return hour + 12;
        }
    },
    meridiem : function (hour, minute, isLower) {
        var hm = hour * 100 + minute;
        if (hm < 600) {
            return '凌晨';
        } else if (hm < 900) {
            return '早上';
        } else if (hm < 1130) {
            return '上午';
        } else if (hm < 1230) {
            return '中午';
        } else if (hm < 1800) {
            return '下午';
        } else {
            return '晚上';
        }
    },
    calendar : {
        sameDay : '[今天]LT',
        nextDay : '[明天]LT',
        nextWeek : '[下]ddddLT',
        lastDay : '[昨天]LT',
        lastWeek : '[上]ddddLT',
        sameElse : 'L'
    },
    dayOfMonthOrdinalParse: /\d{1,2}(日|月|週)/,
    ordinal : function (number, period) {
        switch (period) {
            case 'd' :
            case 'D' :
            case 'DDD' :
                return number + '日';
            case 'M' :
                return number + '月';
            case 'w' :
            case 'W' :
                return number + '週';
            default :
                return number;
        }
    },
    relativeTime : {
        future : '%s內',
        past : '%s前',
        s : '幾秒',
        ss : '%d 秒',
        m : '1 分鐘',
        mm : '%d 分鐘',
        h : '1 小時',
        hh : '%d 小時',
        d : '1 天',
        dd : '%d 天',
        M : '1 個月',
        MM : '%d 個月',
        y : '1 年',
        yy : '%d 年'
    }
});

return zhTw;

})));


/***/ }),

/***/ "../../../../moment/moment.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {var require;//! moment.js
//! version : 2.20.1
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com

;(function (global, factory) {
     true ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    global.moment = factory()
}(this, (function () { 'use strict';

var hookCallback;

function hooks () {
    return hookCallback.apply(null, arguments);
}

// This is done to register the method called with moment()
// without creating circular dependencies.
function setHookCallback (callback) {
    hookCallback = callback;
}

function isArray(input) {
    return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';
}

function isObject(input) {
    // IE8 will treat undefined and null as object if it wasn't for
    // input != null
    return input != null && Object.prototype.toString.call(input) === '[object Object]';
}

function isObjectEmpty(obj) {
    if (Object.getOwnPropertyNames) {
        return (Object.getOwnPropertyNames(obj).length === 0);
    } else {
        var k;
        for (k in obj) {
            if (obj.hasOwnProperty(k)) {
                return false;
            }
        }
        return true;
    }
}

function isUndefined(input) {
    return input === void 0;
}

function isNumber(input) {
    return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]';
}

function isDate(input) {
    return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
}

function map(arr, fn) {
    var res = [], i;
    for (i = 0; i < arr.length; ++i) {
        res.push(fn(arr[i], i));
    }
    return res;
}

function hasOwnProp(a, b) {
    return Object.prototype.hasOwnProperty.call(a, b);
}

function extend(a, b) {
    for (var i in b) {
        if (hasOwnProp(b, i)) {
            a[i] = b[i];
        }
    }

    if (hasOwnProp(b, 'toString')) {
        a.toString = b.toString;
    }

    if (hasOwnProp(b, 'valueOf')) {
        a.valueOf = b.valueOf;
    }

    return a;
}

function createUTC (input, format, locale, strict) {
    return createLocalOrUTC(input, format, locale, strict, true).utc();
}

function defaultParsingFlags() {
    // We need to deep clone this object.
    return {
        empty           : false,
        unusedTokens    : [],
        unusedInput     : [],
        overflow        : -2,
        charsLeftOver   : 0,
        nullInput       : false,
        invalidMonth    : null,
        invalidFormat   : false,
        userInvalidated : false,
        iso             : false,
        parsedDateParts : [],
        meridiem        : null,
        rfc2822         : false,
        weekdayMismatch : false
    };
}

function getParsingFlags(m) {
    if (m._pf == null) {
        m._pf = defaultParsingFlags();
    }
    return m._pf;
}

var some;
if (Array.prototype.some) {
    some = Array.prototype.some;
} else {
    some = function (fun) {
        var t = Object(this);
        var len = t.length >>> 0;

        for (var i = 0; i < len; i++) {
            if (i in t && fun.call(this, t[i], i, t)) {
                return true;
            }
        }

        return false;
    };
}

function isValid(m) {
    if (m._isValid == null) {
        var flags = getParsingFlags(m);
        var parsedParts = some.call(flags.parsedDateParts, function (i) {
            return i != null;
        });
        var isNowValid = !isNaN(m._d.getTime()) &&
            flags.overflow < 0 &&
            !flags.empty &&
            !flags.invalidMonth &&
            !flags.invalidWeekday &&
            !flags.weekdayMismatch &&
            !flags.nullInput &&
            !flags.invalidFormat &&
            !flags.userInvalidated &&
            (!flags.meridiem || (flags.meridiem && parsedParts));

        if (m._strict) {
            isNowValid = isNowValid &&
                flags.charsLeftOver === 0 &&
                flags.unusedTokens.length === 0 &&
                flags.bigHour === undefined;
        }

        if (Object.isFrozen == null || !Object.isFrozen(m)) {
            m._isValid = isNowValid;
        }
        else {
            return isNowValid;
        }
    }
    return m._isValid;
}

function createInvalid (flags) {
    var m = createUTC(NaN);
    if (flags != null) {
        extend(getParsingFlags(m), flags);
    }
    else {
        getParsingFlags(m).userInvalidated = true;
    }

    return m;
}

// Plugins that add properties should also add the key here (null value),
// so we can properly clone ourselves.
var momentProperties = hooks.momentProperties = [];

function copyConfig(to, from) {
    var i, prop, val;

    if (!isUndefined(from._isAMomentObject)) {
        to._isAMomentObject = from._isAMomentObject;
    }
    if (!isUndefined(from._i)) {
        to._i = from._i;
    }
    if (!isUndefined(from._f)) {
        to._f = from._f;
    }
    if (!isUndefined(from._l)) {
        to._l = from._l;
    }
    if (!isUndefined(from._strict)) {
        to._strict = from._strict;
    }
    if (!isUndefined(from._tzm)) {
        to._tzm = from._tzm;
    }
    if (!isUndefined(from._isUTC)) {
        to._isUTC = from._isUTC;
    }
    if (!isUndefined(from._offset)) {
        to._offset = from._offset;
    }
    if (!isUndefined(from._pf)) {
        to._pf = getParsingFlags(from);
    }
    if (!isUndefined(from._locale)) {
        to._locale = from._locale;
    }

    if (momentProperties.length > 0) {
        for (i = 0; i < momentProperties.length; i++) {
            prop = momentProperties[i];
            val = from[prop];
            if (!isUndefined(val)) {
                to[prop] = val;
            }
        }
    }

    return to;
}

var updateInProgress = false;

// Moment prototype object
function Moment(config) {
    copyConfig(this, config);
    this._d = new Date(config._d != null ? config._d.getTime() : NaN);
    if (!this.isValid()) {
        this._d = new Date(NaN);
    }
    // Prevent infinite loop in case updateOffset creates new moment
    // objects.
    if (updateInProgress === false) {
        updateInProgress = true;
        hooks.updateOffset(this);
        updateInProgress = false;
    }
}

function isMoment (obj) {
    return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);
}

function absFloor (number) {
    if (number < 0) {
        // -0 -> 0
        return Math.ceil(number) || 0;
    } else {
        return Math.floor(number);
    }
}

function toInt(argumentForCoercion) {
    var coercedNumber = +argumentForCoercion,
        value = 0;

    if (coercedNumber !== 0 && isFinite(coercedNumber)) {
        value = absFloor(coercedNumber);
    }

    return value;
}

// compare two arrays, return the number of differences
function compareArrays(array1, array2, dontConvert) {
    var len = Math.min(array1.length, array2.length),
        lengthDiff = Math.abs(array1.length - array2.length),
        diffs = 0,
        i;
    for (i = 0; i < len; i++) {
        if ((dontConvert && array1[i] !== array2[i]) ||
            (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {
            diffs++;
        }
    }
    return diffs + lengthDiff;
}

function warn(msg) {
    if (hooks.suppressDeprecationWarnings === false &&
            (typeof console !==  'undefined') && console.warn) {
        console.warn('Deprecation warning: ' + msg);
    }
}

function deprecate(msg, fn) {
    var firstTime = true;

    return extend(function () {
        if (hooks.deprecationHandler != null) {
            hooks.deprecationHandler(null, msg);
        }
        if (firstTime) {
            var args = [];
            var arg;
            for (var i = 0; i < arguments.length; i++) {
                arg = '';
                if (typeof arguments[i] === 'object') {
                    arg += '\n[' + i + '] ';
                    for (var key in arguments[0]) {
                        arg += key + ': ' + arguments[0][key] + ', ';
                    }
                    arg = arg.slice(0, -2); // Remove trailing comma and space
                } else {
                    arg = arguments[i];
                }
                args.push(arg);
            }
            warn(msg + '\nArguments: ' + Array.prototype.slice.call(args).join('') + '\n' + (new Error()).stack);
            firstTime = false;
        }
        return fn.apply(this, arguments);
    }, fn);
}

var deprecations = {};

function deprecateSimple(name, msg) {
    if (hooks.deprecationHandler != null) {
        hooks.deprecationHandler(name, msg);
    }
    if (!deprecations[name]) {
        warn(msg);
        deprecations[name] = true;
    }
}

hooks.suppressDeprecationWarnings = false;
hooks.deprecationHandler = null;

function isFunction(input) {
    return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
}

function set (config) {
    var prop, i;
    for (i in config) {
        prop = config[i];
        if (isFunction(prop)) {
            this[i] = prop;
        } else {
            this['_' + i] = prop;
        }
    }
    this._config = config;
    // Lenient ordinal parsing accepts just a number in addition to
    // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
    // TODO: Remove "ordinalParse" fallback in next major release.
    this._dayOfMonthOrdinalParseLenient = new RegExp(
        (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) +
            '|' + (/\d{1,2}/).source);
}

function mergeConfigs(parentConfig, childConfig) {
    var res = extend({}, parentConfig), prop;
    for (prop in childConfig) {
        if (hasOwnProp(childConfig, prop)) {
            if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
                res[prop] = {};
                extend(res[prop], parentConfig[prop]);
                extend(res[prop], childConfig[prop]);
            } else if (childConfig[prop] != null) {
                res[prop] = childConfig[prop];
            } else {
                delete res[prop];
            }
        }
    }
    for (prop in parentConfig) {
        if (hasOwnProp(parentConfig, prop) &&
                !hasOwnProp(childConfig, prop) &&
                isObject(parentConfig[prop])) {
            // make sure changes to properties don't modify parent config
            res[prop] = extend({}, res[prop]);
        }
    }
    return res;
}

function Locale(config) {
    if (config != null) {
        this.set(config);
    }
}

var keys;

if (Object.keys) {
    keys = Object.keys;
} else {
    keys = function (obj) {
        var i, res = [];
        for (i in obj) {
            if (hasOwnProp(obj, i)) {
                res.push(i);
            }
        }
        return res;
    };
}

var defaultCalendar = {
    sameDay : '[Today at] LT',
    nextDay : '[Tomorrow at] LT',
    nextWeek : 'dddd [at] LT',
    lastDay : '[Yesterday at] LT',
    lastWeek : '[Last] dddd [at] LT',
    sameElse : 'L'
};

function calendar (key, mom, now) {
    var output = this._calendar[key] || this._calendar['sameElse'];
    return isFunction(output) ? output.call(mom, now) : output;
}

var defaultLongDateFormat = {
    LTS  : 'h:mm:ss A',
    LT   : 'h:mm A',
    L    : 'MM/DD/YYYY',
    LL   : 'MMMM D, YYYY',
    LLL  : 'MMMM D, YYYY h:mm A',
    LLLL : 'dddd, MMMM D, YYYY h:mm A'
};

function longDateFormat (key) {
    var format = this._longDateFormat[key],
        formatUpper = this._longDateFormat[key.toUpperCase()];

    if (format || !formatUpper) {
        return format;
    }

    this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {
        return val.slice(1);
    });

    return this._longDateFormat[key];
}

var defaultInvalidDate = 'Invalid date';

function invalidDate () {
    return this._invalidDate;
}

var defaultOrdinal = '%d';
var defaultDayOfMonthOrdinalParse = /\d{1,2}/;

function ordinal (number) {
    return this._ordinal.replace('%d', number);
}

var defaultRelativeTime = {
    future : 'in %s',
    past   : '%s ago',
    s  : 'a few seconds',
    ss : '%d seconds',
    m  : 'a minute',
    mm : '%d minutes',
    h  : 'an hour',
    hh : '%d hours',
    d  : 'a day',
    dd : '%d days',
    M  : 'a month',
    MM : '%d months',
    y  : 'a year',
    yy : '%d years'
};

function relativeTime (number, withoutSuffix, string, isFuture) {
    var output = this._relativeTime[string];
    return (isFunction(output)) ?
        output(number, withoutSuffix, string, isFuture) :
        output.replace(/%d/i, number);
}

function pastFuture (diff, output) {
    var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
    return isFunction(format) ? format(output) : format.replace(/%s/i, output);
}

var aliases = {};

function addUnitAlias (unit, shorthand) {
    var lowerCase = unit.toLowerCase();
    aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
}

function normalizeUnits(units) {
    return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
}

function normalizeObjectUnits(inputObject) {
    var normalizedInput = {},
        normalizedProp,
        prop;

    for (prop in inputObject) {
        if (hasOwnProp(inputObject, prop)) {
            normalizedProp = normalizeUnits(prop);
            if (normalizedProp) {
                normalizedInput[normalizedProp] = inputObject[prop];
            }
        }
    }

    return normalizedInput;
}

var priorities = {};

function addUnitPriority(unit, priority) {
    priorities[unit] = priority;
}

function getPrioritizedUnits(unitsObj) {
    var units = [];
    for (var u in unitsObj) {
        units.push({unit: u, priority: priorities[u]});
    }
    units.sort(function (a, b) {
        return a.priority - b.priority;
    });
    return units;
}

function zeroFill(number, targetLength, forceSign) {
    var absNumber = '' + Math.abs(number),
        zerosToFill = targetLength - absNumber.length,
        sign = number >= 0;
    return (sign ? (forceSign ? '+' : '') : '-') +
        Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
}

var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;

var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;

var formatFunctions = {};

var formatTokenFunctions = {};

// token:    'M'
// padded:   ['MM', 2]
// ordinal:  'Mo'
// callback: function () { this.month() + 1 }
function addFormatToken (token, padded, ordinal, callback) {
    var func = callback;
    if (typeof callback === 'string') {
        func = function () {
            return this[callback]();
        };
    }
    if (token) {
        formatTokenFunctions[token] = func;
    }
    if (padded) {
        formatTokenFunctions[padded[0]] = function () {
            return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
        };
    }
    if (ordinal) {
        formatTokenFunctions[ordinal] = function () {
            return this.localeData().ordinal(func.apply(this, arguments), token);
        };
    }
}

function removeFormattingTokens(input) {
    if (input.match(/\[[\s\S]/)) {
        return input.replace(/^\[|\]$/g, '');
    }
    return input.replace(/\\/g, '');
}

function makeFormatFunction(format) {
    var array = format.match(formattingTokens), i, length;

    for (i = 0, length = array.length; i < length; i++) {
        if (formatTokenFunctions[array[i]]) {
            array[i] = formatTokenFunctions[array[i]];
        } else {
            array[i] = removeFormattingTokens(array[i]);
        }
    }

    return function (mom) {
        var output = '', i;
        for (i = 0; i < length; i++) {
            output += isFunction(array[i]) ? array[i].call(mom, format) : array[i];
        }
        return output;
    };
}

// format date using native date object
function formatMoment(m, format) {
    if (!m.isValid()) {
        return m.localeData().invalidDate();
    }

    format = expandFormat(format, m.localeData());
    formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);

    return formatFunctions[format](m);
}

function expandFormat(format, locale) {
    var i = 5;

    function replaceLongDateFormatTokens(input) {
        return locale.longDateFormat(input) || input;
    }

    localFormattingTokens.lastIndex = 0;
    while (i >= 0 && localFormattingTokens.test(format)) {
        format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
        localFormattingTokens.lastIndex = 0;
        i -= 1;
    }

    return format;
}

var match1         = /\d/;            //       0 - 9
var match2         = /\d\d/;          //      00 - 99
var match3         = /\d{3}/;         //     000 - 999
var match4         = /\d{4}/;         //    0000 - 9999
var match6         = /[+-]?\d{6}/;    // -999999 - 999999
var match1to2      = /\d\d?/;         //       0 - 99
var match3to4      = /\d\d\d\d?/;     //     999 - 9999
var match5to6      = /\d\d\d\d\d\d?/; //   99999 - 999999
var match1to3      = /\d{1,3}/;       //       0 - 999
var match1to4      = /\d{1,4}/;       //       0 - 9999
var match1to6      = /[+-]?\d{1,6}/;  // -999999 - 999999

var matchUnsigned  = /\d+/;           //       0 - inf
var matchSigned    = /[+-]?\d+/;      //    -inf - inf

var matchOffset    = /Z|[+-]\d\d:?\d\d/gi; // +00:00 -00:00 +0000 -0000 or Z
var matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z

var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/; // 123456789 123456789.123

// any word (or two) characters or numbers including two/three word month in arabic.
// includes scottish gaelic two word and hyphenated months
var matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i;


var regexes = {};

function addRegexToken (token, regex, strictRegex) {
    regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {
        return (isStrict && strictRegex) ? strictRegex : regex;
    };
}

function getParseRegexForToken (token, config) {
    if (!hasOwnProp(regexes, token)) {
        return new RegExp(unescapeFormat(token));
    }

    return regexes[token](config._strict, config._locale);
}

// Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
function unescapeFormat(s) {
    return regexEscape(s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
        return p1 || p2 || p3 || p4;
    }));
}

function regexEscape(s) {
    return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
}

var tokens = {};

function addParseToken (token, callback) {
    var i, func = callback;
    if (typeof token === 'string') {
        token = [token];
    }
    if (isNumber(callback)) {
        func = function (input, array) {
            array[callback] = toInt(input);
        };
    }
    for (i = 0; i < token.length; i++) {
        tokens[token[i]] = func;
    }
}

function addWeekParseToken (token, callback) {
    addParseToken(token, function (input, array, config, token) {
        config._w = config._w || {};
        callback(input, config._w, config, token);
    });
}

function addTimeToArrayFromToken(token, input, config) {
    if (input != null && hasOwnProp(tokens, token)) {
        tokens[token](input, config._a, config, token);
    }
}

var YEAR = 0;
var MONTH = 1;
var DATE = 2;
var HOUR = 3;
var MINUTE = 4;
var SECOND = 5;
var MILLISECOND = 6;
var WEEK = 7;
var WEEKDAY = 8;

// FORMATTING

addFormatToken('Y', 0, 0, function () {
    var y = this.year();
    return y <= 9999 ? '' + y : '+' + y;
});

addFormatToken(0, ['YY', 2], 0, function () {
    return this.year() % 100;
});

addFormatToken(0, ['YYYY',   4],       0, 'year');
addFormatToken(0, ['YYYYY',  5],       0, 'year');
addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

// ALIASES

addUnitAlias('year', 'y');

// PRIORITIES

addUnitPriority('year', 1);

// PARSING

addRegexToken('Y',      matchSigned);
addRegexToken('YY',     match1to2, match2);
addRegexToken('YYYY',   match1to4, match4);
addRegexToken('YYYYY',  match1to6, match6);
addRegexToken('YYYYYY', match1to6, match6);

addParseToken(['YYYYY', 'YYYYYY'], YEAR);
addParseToken('YYYY', function (input, array) {
    array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
});
addParseToken('YY', function (input, array) {
    array[YEAR] = hooks.parseTwoDigitYear(input);
});
addParseToken('Y', function (input, array) {
    array[YEAR] = parseInt(input, 10);
});

// HELPERS

function daysInYear(year) {
    return isLeapYear(year) ? 366 : 365;
}

function isLeapYear(year) {
    return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
}

// HOOKS

hooks.parseTwoDigitYear = function (input) {
    return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
};

// MOMENTS

var getSetYear = makeGetSet('FullYear', true);

function getIsLeapYear () {
    return isLeapYear(this.year());
}

function makeGetSet (unit, keepTime) {
    return function (value) {
        if (value != null) {
            set$1(this, unit, value);
            hooks.updateOffset(this, keepTime);
            return this;
        } else {
            return get(this, unit);
        }
    };
}

function get (mom, unit) {
    return mom.isValid() ?
        mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;
}

function set$1 (mom, unit, value) {
    if (mom.isValid() && !isNaN(value)) {
        if (unit === 'FullYear' && isLeapYear(mom.year()) && mom.month() === 1 && mom.date() === 29) {
            mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value, mom.month(), daysInMonth(value, mom.month()));
        }
        else {
            mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
        }
    }
}

// MOMENTS

function stringGet (units) {
    units = normalizeUnits(units);
    if (isFunction(this[units])) {
        return this[units]();
    }
    return this;
}


function stringSet (units, value) {
    if (typeof units === 'object') {
        units = normalizeObjectUnits(units);
        var prioritized = getPrioritizedUnits(units);
        for (var i = 0; i < prioritized.length; i++) {
            this[prioritized[i].unit](units[prioritized[i].unit]);
        }
    } else {
        units = normalizeUnits(units);
        if (isFunction(this[units])) {
            return this[units](value);
        }
    }
    return this;
}

function mod(n, x) {
    return ((n % x) + x) % x;
}

var indexOf;

if (Array.prototype.indexOf) {
    indexOf = Array.prototype.indexOf;
} else {
    indexOf = function (o) {
        // I know
        var i;
        for (i = 0; i < this.length; ++i) {
            if (this[i] === o) {
                return i;
            }
        }
        return -1;
    };
}

function daysInMonth(year, month) {
    if (isNaN(year) || isNaN(month)) {
        return NaN;
    }
    var modMonth = mod(month, 12);
    year += (month - modMonth) / 12;
    return modMonth === 1 ? (isLeapYear(year) ? 29 : 28) : (31 - modMonth % 7 % 2);
}

// FORMATTING

addFormatToken('M', ['MM', 2], 'Mo', function () {
    return this.month() + 1;
});

addFormatToken('MMM', 0, 0, function (format) {
    return this.localeData().monthsShort(this, format);
});

addFormatToken('MMMM', 0, 0, function (format) {
    return this.localeData().months(this, format);
});

// ALIASES

addUnitAlias('month', 'M');

// PRIORITY

addUnitPriority('month', 8);

// PARSING

addRegexToken('M',    match1to2);
addRegexToken('MM',   match1to2, match2);
addRegexToken('MMM',  function (isStrict, locale) {
    return locale.monthsShortRegex(isStrict);
});
addRegexToken('MMMM', function (isStrict, locale) {
    return locale.monthsRegex(isStrict);
});

addParseToken(['M', 'MM'], function (input, array) {
    array[MONTH] = toInt(input) - 1;
});

addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
    var month = config._locale.monthsParse(input, token, config._strict);
    // if we didn't find a month name, mark the date as invalid.
    if (month != null) {
        array[MONTH] = month;
    } else {
        getParsingFlags(config).invalidMonth = input;
    }
});

// LOCALES

var MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/;
var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');
function localeMonths (m, format) {
    if (!m) {
        return isArray(this._months) ? this._months :
            this._months['standalone'];
    }
    return isArray(this._months) ? this._months[m.month()] :
        this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];
}

var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');
function localeMonthsShort (m, format) {
    if (!m) {
        return isArray(this._monthsShort) ? this._monthsShort :
            this._monthsShort['standalone'];
    }
    return isArray(this._monthsShort) ? this._monthsShort[m.month()] :
        this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];
}

function handleStrictParse(monthName, format, strict) {
    var i, ii, mom, llc = monthName.toLocaleLowerCase();
    if (!this._monthsParse) {
        // this is not used
        this._monthsParse = [];
        this._longMonthsParse = [];
        this._shortMonthsParse = [];
        for (i = 0; i < 12; ++i) {
            mom = createUTC([2000, i]);
            this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();
            this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
        }
    }

    if (strict) {
        if (format === 'MMM') {
            ii = indexOf.call(this._shortMonthsParse, llc);
            return ii !== -1 ? ii : null;
        } else {
            ii = indexOf.call(this._longMonthsParse, llc);
            return ii !== -1 ? ii : null;
        }
    } else {
        if (format === 'MMM') {
            ii = indexOf.call(this._shortMonthsParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf.call(this._longMonthsParse, llc);
            return ii !== -1 ? ii : null;
        } else {
            ii = indexOf.call(this._longMonthsParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf.call(this._shortMonthsParse, llc);
            return ii !== -1 ? ii : null;
        }
    }
}

function localeMonthsParse (monthName, format, strict) {
    var i, mom, regex;

    if (this._monthsParseExact) {
        return handleStrictParse.call(this, monthName, format, strict);
    }

    if (!this._monthsParse) {
        this._monthsParse = [];
        this._longMonthsParse = [];
        this._shortMonthsParse = [];
    }

    // TODO: add sorting
    // Sorting makes sure if one month (or abbr) is a prefix of another
    // see sorting in computeMonthsParse
    for (i = 0; i < 12; i++) {
        // make the regex if we don't have it already
        mom = createUTC([2000, i]);
        if (strict && !this._longMonthsParse[i]) {
            this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
            this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
        }
        if (!strict && !this._monthsParse[i]) {
            regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
            this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
        }
        // test the regex
        if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
            return i;
        } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
            return i;
        } else if (!strict && this._monthsParse[i].test(monthName)) {
            return i;
        }
    }
}

// MOMENTS

function setMonth (mom, value) {
    var dayOfMonth;

    if (!mom.isValid()) {
        // No op
        return mom;
    }

    if (typeof value === 'string') {
        if (/^\d+$/.test(value)) {
            value = toInt(value);
        } else {
            value = mom.localeData().monthsParse(value);
            // TODO: Another silent failure?
            if (!isNumber(value)) {
                return mom;
            }
        }
    }

    dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
    mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
    return mom;
}

function getSetMonth (value) {
    if (value != null) {
        setMonth(this, value);
        hooks.updateOffset(this, true);
        return this;
    } else {
        return get(this, 'Month');
    }
}

function getDaysInMonth () {
    return daysInMonth(this.year(), this.month());
}

var defaultMonthsShortRegex = matchWord;
function monthsShortRegex (isStrict) {
    if (this._monthsParseExact) {
        if (!hasOwnProp(this, '_monthsRegex')) {
            computeMonthsParse.call(this);
        }
        if (isStrict) {
            return this._monthsShortStrictRegex;
        } else {
            return this._monthsShortRegex;
        }
    } else {
        if (!hasOwnProp(this, '_monthsShortRegex')) {
            this._monthsShortRegex = defaultMonthsShortRegex;
        }
        return this._monthsShortStrictRegex && isStrict ?
            this._monthsShortStrictRegex : this._monthsShortRegex;
    }
}

var defaultMonthsRegex = matchWord;
function monthsRegex (isStrict) {
    if (this._monthsParseExact) {
        if (!hasOwnProp(this, '_monthsRegex')) {
            computeMonthsParse.call(this);
        }
        if (isStrict) {
            return this._monthsStrictRegex;
        } else {
            return this._monthsRegex;
        }
    } else {
        if (!hasOwnProp(this, '_monthsRegex')) {
            this._monthsRegex = defaultMonthsRegex;
        }
        return this._monthsStrictRegex && isStrict ?
            this._monthsStrictRegex : this._monthsRegex;
    }
}

function computeMonthsParse () {
    function cmpLenRev(a, b) {
        return b.length - a.length;
    }

    var shortPieces = [], longPieces = [], mixedPieces = [],
        i, mom;
    for (i = 0; i < 12; i++) {
        // make the regex if we don't have it already
        mom = createUTC([2000, i]);
        shortPieces.push(this.monthsShort(mom, ''));
        longPieces.push(this.months(mom, ''));
        mixedPieces.push(this.months(mom, ''));
        mixedPieces.push(this.monthsShort(mom, ''));
    }
    // Sorting makes sure if one month (or abbr) is a prefix of another it
    // will match the longer piece.
    shortPieces.sort(cmpLenRev);
    longPieces.sort(cmpLenRev);
    mixedPieces.sort(cmpLenRev);
    for (i = 0; i < 12; i++) {
        shortPieces[i] = regexEscape(shortPieces[i]);
        longPieces[i] = regexEscape(longPieces[i]);
    }
    for (i = 0; i < 24; i++) {
        mixedPieces[i] = regexEscape(mixedPieces[i]);
    }

    this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
    this._monthsShortRegex = this._monthsRegex;
    this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
    this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
}

function createDate (y, m, d, h, M, s, ms) {
    // can't just apply() to create a date:
    // https://stackoverflow.com/q/181348
    var date = new Date(y, m, d, h, M, s, ms);

    // the date constructor remaps years 0-99 to 1900-1999
    if (y < 100 && y >= 0 && isFinite(date.getFullYear())) {
        date.setFullYear(y);
    }
    return date;
}

function createUTCDate (y) {
    var date = new Date(Date.UTC.apply(null, arguments));

    // the Date.UTC function remaps years 0-99 to 1900-1999
    if (y < 100 && y >= 0 && isFinite(date.getUTCFullYear())) {
        date.setUTCFullYear(y);
    }
    return date;
}

// start-of-first-week - start-of-year
function firstWeekOffset(year, dow, doy) {
    var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
        fwd = 7 + dow - doy,
        // first-week day local weekday -- which local weekday is fwd
        fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;

    return -fwdlw + fwd - 1;
}

// https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
    var localWeekday = (7 + weekday - dow) % 7,
        weekOffset = firstWeekOffset(year, dow, doy),
        dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
        resYear, resDayOfYear;

    if (dayOfYear <= 0) {
        resYear = year - 1;
        resDayOfYear = daysInYear(resYear) + dayOfYear;
    } else if (dayOfYear > daysInYear(year)) {
        resYear = year + 1;
        resDayOfYear = dayOfYear - daysInYear(year);
    } else {
        resYear = year;
        resDayOfYear = dayOfYear;
    }

    return {
        year: resYear,
        dayOfYear: resDayOfYear
    };
}

function weekOfYear(mom, dow, doy) {
    var weekOffset = firstWeekOffset(mom.year(), dow, doy),
        week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
        resWeek, resYear;

    if (week < 1) {
        resYear = mom.year() - 1;
        resWeek = week + weeksInYear(resYear, dow, doy);
    } else if (week > weeksInYear(mom.year(), dow, doy)) {
        resWeek = week - weeksInYear(mom.year(), dow, doy);
        resYear = mom.year() + 1;
    } else {
        resYear = mom.year();
        resWeek = week;
    }

    return {
        week: resWeek,
        year: resYear
    };
}

function weeksInYear(year, dow, doy) {
    var weekOffset = firstWeekOffset(year, dow, doy),
        weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
    return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
}

// FORMATTING

addFormatToken('w', ['ww', 2], 'wo', 'week');
addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

// ALIASES

addUnitAlias('week', 'w');
addUnitAlias('isoWeek', 'W');

// PRIORITIES

addUnitPriority('week', 5);
addUnitPriority('isoWeek', 5);

// PARSING

addRegexToken('w',  match1to2);
addRegexToken('ww', match1to2, match2);
addRegexToken('W',  match1to2);
addRegexToken('WW', match1to2, match2);

addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {
    week[token.substr(0, 1)] = toInt(input);
});

// HELPERS

// LOCALES

function localeWeek (mom) {
    return weekOfYear(mom, this._week.dow, this._week.doy).week;
}

var defaultLocaleWeek = {
    dow : 0, // Sunday is the first day of the week.
    doy : 6  // The week that contains Jan 1st is the first week of the year.
};

function localeFirstDayOfWeek () {
    return this._week.dow;
}

function localeFirstDayOfYear () {
    return this._week.doy;
}

// MOMENTS

function getSetWeek (input) {
    var week = this.localeData().week(this);
    return input == null ? week : this.add((input - week) * 7, 'd');
}

function getSetISOWeek (input) {
    var week = weekOfYear(this, 1, 4).week;
    return input == null ? week : this.add((input - week) * 7, 'd');
}

// FORMATTING

addFormatToken('d', 0, 'do', 'day');

addFormatToken('dd', 0, 0, function (format) {
    return this.localeData().weekdaysMin(this, format);
});

addFormatToken('ddd', 0, 0, function (format) {
    return this.localeData().weekdaysShort(this, format);
});

addFormatToken('dddd', 0, 0, function (format) {
    return this.localeData().weekdays(this, format);
});

addFormatToken('e', 0, 0, 'weekday');
addFormatToken('E', 0, 0, 'isoWeekday');

// ALIASES

addUnitAlias('day', 'd');
addUnitAlias('weekday', 'e');
addUnitAlias('isoWeekday', 'E');

// PRIORITY
addUnitPriority('day', 11);
addUnitPriority('weekday', 11);
addUnitPriority('isoWeekday', 11);

// PARSING

addRegexToken('d',    match1to2);
addRegexToken('e',    match1to2);
addRegexToken('E',    match1to2);
addRegexToken('dd',   function (isStrict, locale) {
    return locale.weekdaysMinRegex(isStrict);
});
addRegexToken('ddd',   function (isStrict, locale) {
    return locale.weekdaysShortRegex(isStrict);
});
addRegexToken('dddd',   function (isStrict, locale) {
    return locale.weekdaysRegex(isStrict);
});

addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
    var weekday = config._locale.weekdaysParse(input, token, config._strict);
    // if we didn't get a weekday name, mark the date as invalid
    if (weekday != null) {
        week.d = weekday;
    } else {
        getParsingFlags(config).invalidWeekday = input;
    }
});

addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
    week[token] = toInt(input);
});

// HELPERS

function parseWeekday(input, locale) {
    if (typeof input !== 'string') {
        return input;
    }

    if (!isNaN(input)) {
        return parseInt(input, 10);
    }

    input = locale.weekdaysParse(input);
    if (typeof input === 'number') {
        return input;
    }

    return null;
}

function parseIsoWeekday(input, locale) {
    if (typeof input === 'string') {
        return locale.weekdaysParse(input) % 7 || 7;
    }
    return isNaN(input) ? null : input;
}

// LOCALES

var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');
function localeWeekdays (m, format) {
    if (!m) {
        return isArray(this._weekdays) ? this._weekdays :
            this._weekdays['standalone'];
    }
    return isArray(this._weekdays) ? this._weekdays[m.day()] :
        this._weekdays[this._weekdays.isFormat.test(format) ? 'format' : 'standalone'][m.day()];
}

var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');
function localeWeekdaysShort (m) {
    return (m) ? this._weekdaysShort[m.day()] : this._weekdaysShort;
}

var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');
function localeWeekdaysMin (m) {
    return (m) ? this._weekdaysMin[m.day()] : this._weekdaysMin;
}

function handleStrictParse$1(weekdayName, format, strict) {
    var i, ii, mom, llc = weekdayName.toLocaleLowerCase();
    if (!this._weekdaysParse) {
        this._weekdaysParse = [];
        this._shortWeekdaysParse = [];
        this._minWeekdaysParse = [];

        for (i = 0; i < 7; ++i) {
            mom = createUTC([2000, 1]).day(i);
            this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();
            this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();
            this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
        }
    }

    if (strict) {
        if (format === 'dddd') {
            ii = indexOf.call(this._weekdaysParse, llc);
            return ii !== -1 ? ii : null;
        } else if (format === 'ddd') {
            ii = indexOf.call(this._shortWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
        } else {
            ii = indexOf.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
        }
    } else {
        if (format === 'dddd') {
            ii = indexOf.call(this._weekdaysParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf.call(this._shortWeekdaysParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
        } else if (format === 'ddd') {
            ii = indexOf.call(this._shortWeekdaysParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf.call(this._weekdaysParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
        } else {
            ii = indexOf.call(this._minWeekdaysParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf.call(this._weekdaysParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf.call(this._shortWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
        }
    }
}

function localeWeekdaysParse (weekdayName, format, strict) {
    var i, mom, regex;

    if (this._weekdaysParseExact) {
        return handleStrictParse$1.call(this, weekdayName, format, strict);
    }

    if (!this._weekdaysParse) {
        this._weekdaysParse = [];
        this._minWeekdaysParse = [];
        this._shortWeekdaysParse = [];
        this._fullWeekdaysParse = [];
    }

    for (i = 0; i < 7; i++) {
        // make the regex if we don't have it already

        mom = createUTC([2000, 1]).day(i);
        if (strict && !this._fullWeekdaysParse[i]) {
            this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\.?') + '$', 'i');
            this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\.?') + '$', 'i');
            this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\.?') + '$', 'i');
        }
        if (!this._weekdaysParse[i]) {
            regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
            this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
        }
        // test the regex
        if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {
            return i;
        } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {
            return i;
        } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {
            return i;
        } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
            return i;
        }
    }
}

// MOMENTS

function getSetDayOfWeek (input) {
    if (!this.isValid()) {
        return input != null ? this : NaN;
    }
    var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
    if (input != null) {
        input = parseWeekday(input, this.localeData());
        return this.add(input - day, 'd');
    } else {
        return day;
    }
}

function getSetLocaleDayOfWeek (input) {
    if (!this.isValid()) {
        return input != null ? this : NaN;
    }
    var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
    return input == null ? weekday : this.add(input - weekday, 'd');
}

function getSetISODayOfWeek (input) {
    if (!this.isValid()) {
        return input != null ? this : NaN;
    }

    // behaves the same as moment#day except
    // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
    // as a setter, sunday should belong to the previous week.

    if (input != null) {
        var weekday = parseIsoWeekday(input, this.localeData());
        return this.day(this.day() % 7 ? weekday : weekday - 7);
    } else {
        return this.day() || 7;
    }
}

var defaultWeekdaysRegex = matchWord;
function weekdaysRegex (isStrict) {
    if (this._weekdaysParseExact) {
        if (!hasOwnProp(this, '_weekdaysRegex')) {
            computeWeekdaysParse.call(this);
        }
        if (isStrict) {
            return this._weekdaysStrictRegex;
        } else {
            return this._weekdaysRegex;
        }
    } else {
        if (!hasOwnProp(this, '_weekdaysRegex')) {
            this._weekdaysRegex = defaultWeekdaysRegex;
        }
        return this._weekdaysStrictRegex && isStrict ?
            this._weekdaysStrictRegex : this._weekdaysRegex;
    }
}

var defaultWeekdaysShortRegex = matchWord;
function weekdaysShortRegex (isStrict) {
    if (this._weekdaysParseExact) {
        if (!hasOwnProp(this, '_weekdaysRegex')) {
            computeWeekdaysParse.call(this);
        }
        if (isStrict) {
            return this._weekdaysShortStrictRegex;
        } else {
            return this._weekdaysShortRegex;
        }
    } else {
        if (!hasOwnProp(this, '_weekdaysShortRegex')) {
            this._weekdaysShortRegex = defaultWeekdaysShortRegex;
        }
        return this._weekdaysShortStrictRegex && isStrict ?
            this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
    }
}

var defaultWeekdaysMinRegex = matchWord;
function weekdaysMinRegex (isStrict) {
    if (this._weekdaysParseExact) {
        if (!hasOwnProp(this, '_weekdaysRegex')) {
            computeWeekdaysParse.call(this);
        }
        if (isStrict) {
            return this._weekdaysMinStrictRegex;
        } else {
            return this._weekdaysMinRegex;
        }
    } else {
        if (!hasOwnProp(this, '_weekdaysMinRegex')) {
            this._weekdaysMinRegex = defaultWeekdaysMinRegex;
        }
        return this._weekdaysMinStrictRegex && isStrict ?
            this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
    }
}


function computeWeekdaysParse () {
    function cmpLenRev(a, b) {
        return b.length - a.length;
    }

    var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [],
        i, mom, minp, shortp, longp;
    for (i = 0; i < 7; i++) {
        // make the regex if we don't have it already
        mom = createUTC([2000, 1]).day(i);
        minp = this.weekdaysMin(mom, '');
        shortp = this.weekdaysShort(mom, '');
        longp = this.weekdays(mom, '');
        minPieces.push(minp);
        shortPieces.push(shortp);
        longPieces.push(longp);
        mixedPieces.push(minp);
        mixedPieces.push(shortp);
        mixedPieces.push(longp);
    }
    // Sorting makes sure if one weekday (or abbr) is a prefix of another it
    // will match the longer piece.
    minPieces.sort(cmpLenRev);
    shortPieces.sort(cmpLenRev);
    longPieces.sort(cmpLenRev);
    mixedPieces.sort(cmpLenRev);
    for (i = 0; i < 7; i++) {
        shortPieces[i] = regexEscape(shortPieces[i]);
        longPieces[i] = regexEscape(longPieces[i]);
        mixedPieces[i] = regexEscape(mixedPieces[i]);
    }

    this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
    this._weekdaysShortRegex = this._weekdaysRegex;
    this._weekdaysMinRegex = this._weekdaysRegex;

    this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
    this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
    this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');
}

// FORMATTING

function hFormat() {
    return this.hours() % 12 || 12;
}

function kFormat() {
    return this.hours() || 24;
}

addFormatToken('H', ['HH', 2], 0, 'hour');
addFormatToken('h', ['hh', 2], 0, hFormat);
addFormatToken('k', ['kk', 2], 0, kFormat);

addFormatToken('hmm', 0, 0, function () {
    return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
});

addFormatToken('hmmss', 0, 0, function () {
    return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) +
        zeroFill(this.seconds(), 2);
});

addFormatToken('Hmm', 0, 0, function () {
    return '' + this.hours() + zeroFill(this.minutes(), 2);
});

addFormatToken('Hmmss', 0, 0, function () {
    return '' + this.hours() + zeroFill(this.minutes(), 2) +
        zeroFill(this.seconds(), 2);
});

function meridiem (token, lowercase) {
    addFormatToken(token, 0, 0, function () {
        return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
    });
}

meridiem('a', true);
meridiem('A', false);

// ALIASES

addUnitAlias('hour', 'h');

// PRIORITY
addUnitPriority('hour', 13);

// PARSING

function matchMeridiem (isStrict, locale) {
    return locale._meridiemParse;
}

addRegexToken('a',  matchMeridiem);
addRegexToken('A',  matchMeridiem);
addRegexToken('H',  match1to2);
addRegexToken('h',  match1to2);
addRegexToken('k',  match1to2);
addRegexToken('HH', match1to2, match2);
addRegexToken('hh', match1to2, match2);
addRegexToken('kk', match1to2, match2);

addRegexToken('hmm', match3to4);
addRegexToken('hmmss', match5to6);
addRegexToken('Hmm', match3to4);
addRegexToken('Hmmss', match5to6);

addParseToken(['H', 'HH'], HOUR);
addParseToken(['k', 'kk'], function (input, array, config) {
    var kInput = toInt(input);
    array[HOUR] = kInput === 24 ? 0 : kInput;
});
addParseToken(['a', 'A'], function (input, array, config) {
    config._isPm = config._locale.isPM(input);
    config._meridiem = input;
});
addParseToken(['h', 'hh'], function (input, array, config) {
    array[HOUR] = toInt(input);
    getParsingFlags(config).bigHour = true;
});
addParseToken('hmm', function (input, array, config) {
    var pos = input.length - 2;
    array[HOUR] = toInt(input.substr(0, pos));
    array[MINUTE] = toInt(input.substr(pos));
    getParsingFlags(config).bigHour = true;
});
addParseToken('hmmss', function (input, array, config) {
    var pos1 = input.length - 4;
    var pos2 = input.length - 2;
    array[HOUR] = toInt(input.substr(0, pos1));
    array[MINUTE] = toInt(input.substr(pos1, 2));
    array[SECOND] = toInt(input.substr(pos2));
    getParsingFlags(config).bigHour = true;
});
addParseToken('Hmm', function (input, array, config) {
    var pos = input.length - 2;
    array[HOUR] = toInt(input.substr(0, pos));
    array[MINUTE] = toInt(input.substr(pos));
});
addParseToken('Hmmss', function (input, array, config) {
    var pos1 = input.length - 4;
    var pos2 = input.length - 2;
    array[HOUR] = toInt(input.substr(0, pos1));
    array[MINUTE] = toInt(input.substr(pos1, 2));
    array[SECOND] = toInt(input.substr(pos2));
});

// LOCALES

function localeIsPM (input) {
    // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
    // Using charAt should be more compatible.
    return ((input + '').toLowerCase().charAt(0) === 'p');
}

var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;
function localeMeridiem (hours, minutes, isLower) {
    if (hours > 11) {
        return isLower ? 'pm' : 'PM';
    } else {
        return isLower ? 'am' : 'AM';
    }
}


// MOMENTS

// Setting the hour should keep the time, because the user explicitly
// specified which hour he wants. So trying to maintain the same hour (in
// a new timezone) makes sense. Adding/subtracting hours does not follow
// this rule.
var getSetHour = makeGetSet('Hours', true);

// months
// week
// weekdays
// meridiem
var baseConfig = {
    calendar: defaultCalendar,
    longDateFormat: defaultLongDateFormat,
    invalidDate: defaultInvalidDate,
    ordinal: defaultOrdinal,
    dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
    relativeTime: defaultRelativeTime,

    months: defaultLocaleMonths,
    monthsShort: defaultLocaleMonthsShort,

    week: defaultLocaleWeek,

    weekdays: defaultLocaleWeekdays,
    weekdaysMin: defaultLocaleWeekdaysMin,
    weekdaysShort: defaultLocaleWeekdaysShort,

    meridiemParse: defaultLocaleMeridiemParse
};

// internal storage for locale config files
var locales = {};
var localeFamilies = {};
var globalLocale;

function normalizeLocale(key) {
    return key ? key.toLowerCase().replace('_', '-') : key;
}

// pick the locale from the array
// try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
// substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
function chooseLocale(names) {
    var i = 0, j, next, locale, split;

    while (i < names.length) {
        split = normalizeLocale(names[i]).split('-');
        j = split.length;
        next = normalizeLocale(names[i + 1]);
        next = next ? next.split('-') : null;
        while (j > 0) {
            locale = loadLocale(split.slice(0, j).join('-'));
            if (locale) {
                return locale;
            }
            if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
                //the next array item is better than a shallower substring of this one
                break;
            }
            j--;
        }
        i++;
    }
    return null;
}

function loadLocale(name) {
    var oldLocale = null;
    // TODO: Find a better way to register and load all the locales in Node
    if (!locales[name] && (typeof module !== 'undefined') &&
            module && module.exports) {
        try {
            oldLocale = globalLocale._abbr;
            var aliasedRequire = require;
            __webpack_require__("../../../../moment/locale recursive ^\\.\\/.*$")("./" + name);
            getSetGlobalLocale(oldLocale);
        } catch (e) {}
    }
    return locales[name];
}

// This function will load locale and then set the global locale.  If
// no arguments are passed in, it will simply return the current global
// locale key.
function getSetGlobalLocale (key, values) {
    var data;
    if (key) {
        if (isUndefined(values)) {
            data = getLocale(key);
        }
        else {
            data = defineLocale(key, values);
        }

        if (data) {
            // moment.duration._locale = moment._locale = data;
            globalLocale = data;
        }
    }

    return globalLocale._abbr;
}

function defineLocale (name, config) {
    if (config !== null) {
        var parentConfig = baseConfig;
        config.abbr = name;
        if (locales[name] != null) {
            deprecateSimple('defineLocaleOverride',
                    'use moment.updateLocale(localeName, config) to change ' +
                    'an existing locale. moment.defineLocale(localeName, ' +
                    'config) should only be used for creating a new locale ' +
                    'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');
            parentConfig = locales[name]._config;
        } else if (config.parentLocale != null) {
            if (locales[config.parentLocale] != null) {
                parentConfig = locales[config.parentLocale]._config;
            } else {
                if (!localeFamilies[config.parentLocale]) {
                    localeFamilies[config.parentLocale] = [];
                }
                localeFamilies[config.parentLocale].push({
                    name: name,
                    config: config
                });
                return null;
            }
        }
        locales[name] = new Locale(mergeConfigs(parentConfig, config));

        if (localeFamilies[name]) {
            localeFamilies[name].forEach(function (x) {
                defineLocale(x.name, x.config);
            });
        }

        // backwards compat for now: also set the locale
        // make sure we set the locale AFTER all child locales have been
        // created, so we won't end up with the child locale set.
        getSetGlobalLocale(name);


        return locales[name];
    } else {
        // useful for testing
        delete locales[name];
        return null;
    }
}

function updateLocale(name, config) {
    if (config != null) {
        var locale, tmpLocale, parentConfig = baseConfig;
        // MERGE
        tmpLocale = loadLocale(name);
        if (tmpLocale != null) {
            parentConfig = tmpLocale._config;
        }
        config = mergeConfigs(parentConfig, config);
        locale = new Locale(config);
        locale.parentLocale = locales[name];
        locales[name] = locale;

        // backwards compat for now: also set the locale
        getSetGlobalLocale(name);
    } else {
        // pass null for config to unupdate, useful for tests
        if (locales[name] != null) {
            if (locales[name].parentLocale != null) {
                locales[name] = locales[name].parentLocale;
            } else if (locales[name] != null) {
                delete locales[name];
            }
        }
    }
    return locales[name];
}

// returns locale data
function getLocale (key) {
    var locale;

    if (key && key._locale && key._locale._abbr) {
        key = key._locale._abbr;
    }

    if (!key) {
        return globalLocale;
    }

    if (!isArray(key)) {
        //short-circuit everything else
        locale = loadLocale(key);
        if (locale) {
            return locale;
        }
        key = [key];
    }

    return chooseLocale(key);
}

function listLocales() {
    return keys(locales);
}

function checkOverflow (m) {
    var overflow;
    var a = m._a;

    if (a && getParsingFlags(m).overflow === -2) {
        overflow =
            a[MONTH]       < 0 || a[MONTH]       > 11  ? MONTH :
            a[DATE]        < 1 || a[DATE]        > daysInMonth(a[YEAR], a[MONTH]) ? DATE :
            a[HOUR]        < 0 || a[HOUR]        > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :
            a[MINUTE]      < 0 || a[MINUTE]      > 59  ? MINUTE :
            a[SECOND]      < 0 || a[SECOND]      > 59  ? SECOND :
            a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :
            -1;

        if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
            overflow = DATE;
        }
        if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
            overflow = WEEK;
        }
        if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
            overflow = WEEKDAY;
        }

        getParsingFlags(m).overflow = overflow;
    }

    return m;
}

// Pick the first defined of two or three arguments.
function defaults(a, b, c) {
    if (a != null) {
        return a;
    }
    if (b != null) {
        return b;
    }
    return c;
}

function currentDateArray(config) {
    // hooks is actually the exported moment object
    var nowValue = new Date(hooks.now());
    if (config._useUTC) {
        return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];
    }
    return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
}

// convert an array to a date.
// the array should mirror the parameters below
// note: all values past the year are optional and will default to the lowest possible value.
// [year, month, day , hour, minute, second, millisecond]
function configFromArray (config) {
    var i, date, input = [], currentDate, expectedWeekday, yearToUse;

    if (config._d) {
        return;
    }

    currentDate = currentDateArray(config);

    //compute day of the year from weeks and weekdays
    if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
        dayOfYearFromWeekInfo(config);
    }

    //if the day of the year is set, figure out what it is
    if (config._dayOfYear != null) {
        yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

        if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {
            getParsingFlags(config)._overflowDayOfYear = true;
        }

        date = createUTCDate(yearToUse, 0, config._dayOfYear);
        config._a[MONTH] = date.getUTCMonth();
        config._a[DATE] = date.getUTCDate();
    }

    // Default to current date.
    // * if no year, month, day of month are given, default to today
    // * if day of month is given, default month and year
    // * if month is given, default only year
    // * if year is given, don't default anything
    for (i = 0; i < 3 && config._a[i] == null; ++i) {
        config._a[i] = input[i] = currentDate[i];
    }

    // Zero out whatever was not defaulted, including time
    for (; i < 7; i++) {
        config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];
    }

    // Check for 24:00:00.000
    if (config._a[HOUR] === 24 &&
            config._a[MINUTE] === 0 &&
            config._a[SECOND] === 0 &&
            config._a[MILLISECOND] === 0) {
        config._nextDay = true;
        config._a[HOUR] = 0;
    }

    config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
    expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay();

    // Apply timezone offset from input. The actual utcOffset can be changed
    // with parseZone.
    if (config._tzm != null) {
        config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
    }

    if (config._nextDay) {
        config._a[HOUR] = 24;
    }

    // check for mismatching day of week
    if (config._w && typeof config._w.d !== 'undefined' && config._w.d !== expectedWeekday) {
        getParsingFlags(config).weekdayMismatch = true;
    }
}

function dayOfYearFromWeekInfo(config) {
    var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;

    w = config._w;
    if (w.GG != null || w.W != null || w.E != null) {
        dow = 1;
        doy = 4;

        // TODO: We need to take the current isoWeekYear, but that depends on
        // how we interpret now (local, utc, fixed offset). So create
        // a now version of current config (take local/utc/offset flags, and
        // create now).
        weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
        week = defaults(w.W, 1);
        weekday = defaults(w.E, 1);
        if (weekday < 1 || weekday > 7) {
            weekdayOverflow = true;
        }
    } else {
        dow = config._locale._week.dow;
        doy = config._locale._week.doy;

        var curWeek = weekOfYear(createLocal(), dow, doy);

        weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);

        // Default to current week.
        week = defaults(w.w, curWeek.week);

        if (w.d != null) {
            // weekday -- low day numbers are considered next week
            weekday = w.d;
            if (weekday < 0 || weekday > 6) {
                weekdayOverflow = true;
            }
        } else if (w.e != null) {
            // local weekday -- counting starts from begining of week
            weekday = w.e + dow;
            if (w.e < 0 || w.e > 6) {
                weekdayOverflow = true;
            }
        } else {
            // default to begining of week
            weekday = dow;
        }
    }
    if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
        getParsingFlags(config)._overflowWeeks = true;
    } else if (weekdayOverflow != null) {
        getParsingFlags(config)._overflowWeekday = true;
    } else {
        temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
        config._a[YEAR] = temp.year;
        config._dayOfYear = temp.dayOfYear;
    }
}

// iso 8601 regex
// 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
var basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;

var tzRegex = /Z|[+-]\d\d(?::?\d\d)?/;

var isoDates = [
    ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
    ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
    ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
    ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
    ['YYYY-DDD', /\d{4}-\d{3}/],
    ['YYYY-MM', /\d{4}-\d\d/, false],
    ['YYYYYYMMDD', /[+-]\d{10}/],
    ['YYYYMMDD', /\d{8}/],
    // YYYYMM is NOT allowed by the standard
    ['GGGG[W]WWE', /\d{4}W\d{3}/],
    ['GGGG[W]WW', /\d{4}W\d{2}/, false],
    ['YYYYDDD', /\d{7}/]
];

// iso time formats and regexes
var isoTimes = [
    ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
    ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
    ['HH:mm:ss', /\d\d:\d\d:\d\d/],
    ['HH:mm', /\d\d:\d\d/],
    ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
    ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
    ['HHmmss', /\d\d\d\d\d\d/],
    ['HHmm', /\d\d\d\d/],
    ['HH', /\d\d/]
];

var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;

// date from iso format
function configFromISO(config) {
    var i, l,
        string = config._i,
        match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
        allowTime, dateFormat, timeFormat, tzFormat;

    if (match) {
        getParsingFlags(config).iso = true;

        for (i = 0, l = isoDates.length; i < l; i++) {
            if (isoDates[i][1].exec(match[1])) {
                dateFormat = isoDates[i][0];
                allowTime = isoDates[i][2] !== false;
                break;
            }
        }
        if (dateFormat == null) {
            config._isValid = false;
            return;
        }
        if (match[3]) {
            for (i = 0, l = isoTimes.length; i < l; i++) {
                if (isoTimes[i][1].exec(match[3])) {
                    // match[2] should be 'T' or space
                    timeFormat = (match[2] || ' ') + isoTimes[i][0];
                    break;
                }
            }
            if (timeFormat == null) {
                config._isValid = false;
                return;
            }
        }
        if (!allowTime && timeFormat != null) {
            config._isValid = false;
            return;
        }
        if (match[4]) {
            if (tzRegex.exec(match[4])) {
                tzFormat = 'Z';
            } else {
                config._isValid = false;
                return;
            }
        }
        config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
        configFromStringAndFormat(config);
    } else {
        config._isValid = false;
    }
}

// RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3
var rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/;

function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
    var result = [
        untruncateYear(yearStr),
        defaultLocaleMonthsShort.indexOf(monthStr),
        parseInt(dayStr, 10),
        parseInt(hourStr, 10),
        parseInt(minuteStr, 10)
    ];

    if (secondStr) {
        result.push(parseInt(secondStr, 10));
    }

    return result;
}

function untruncateYear(yearStr) {
    var year = parseInt(yearStr, 10);
    if (year <= 49) {
        return 2000 + year;
    } else if (year <= 999) {
        return 1900 + year;
    }
    return year;
}

function preprocessRFC2822(s) {
    // Remove comments and folding whitespace and replace multiple-spaces with a single space
    return s.replace(/\([^)]*\)|[\n\t]/g, ' ').replace(/(\s\s+)/g, ' ').trim();
}

function checkWeekday(weekdayStr, parsedInput, config) {
    if (weekdayStr) {
        // TODO: Replace the vanilla JS Date object with an indepentent day-of-week check.
        var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),
            weekdayActual = new Date(parsedInput[0], parsedInput[1], parsedInput[2]).getDay();
        if (weekdayProvided !== weekdayActual) {
            getParsingFlags(config).weekdayMismatch = true;
            config._isValid = false;
            return false;
        }
    }
    return true;
}

var obsOffsets = {
    UT: 0,
    GMT: 0,
    EDT: -4 * 60,
    EST: -5 * 60,
    CDT: -5 * 60,
    CST: -6 * 60,
    MDT: -6 * 60,
    MST: -7 * 60,
    PDT: -7 * 60,
    PST: -8 * 60
};

function calculateOffset(obsOffset, militaryOffset, numOffset) {
    if (obsOffset) {
        return obsOffsets[obsOffset];
    } else if (militaryOffset) {
        // the only allowed military tz is Z
        return 0;
    } else {
        var hm = parseInt(numOffset, 10);
        var m = hm % 100, h = (hm - m) / 100;
        return h * 60 + m;
    }
}

// date and time from ref 2822 format
function configFromRFC2822(config) {
    var match = rfc2822.exec(preprocessRFC2822(config._i));
    if (match) {
        var parsedArray = extractFromRFC2822Strings(match[4], match[3], match[2], match[5], match[6], match[7]);
        if (!checkWeekday(match[1], parsedArray, config)) {
            return;
        }

        config._a = parsedArray;
        config._tzm = calculateOffset(match[8], match[9], match[10]);

        config._d = createUTCDate.apply(null, config._a);
        config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);

        getParsingFlags(config).rfc2822 = true;
    } else {
        config._isValid = false;
    }
}

// date from iso format or fallback
function configFromString(config) {
    var matched = aspNetJsonRegex.exec(config._i);

    if (matched !== null) {
        config._d = new Date(+matched[1]);
        return;
    }

    configFromISO(config);
    if (config._isValid === false) {
        delete config._isValid;
    } else {
        return;
    }

    configFromRFC2822(config);
    if (config._isValid === false) {
        delete config._isValid;
    } else {
        return;
    }

    // Final attempt, use Input Fallback
    hooks.createFromInputFallback(config);
}

hooks.createFromInputFallback = deprecate(
    'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' +
    'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' +
    'discouraged and will be removed in an upcoming major release. Please refer to ' +
    'http://momentjs.com/guides/#/warnings/js-date/ for more info.',
    function (config) {
        config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
    }
);

// constant that refers to the ISO standard
hooks.ISO_8601 = function () {};

// constant that refers to the RFC 2822 form
hooks.RFC_2822 = function () {};

// date from string and format string
function configFromStringAndFormat(config) {
    // TODO: Move this to another part of the creation flow to prevent circular deps
    if (config._f === hooks.ISO_8601) {
        configFromISO(config);
        return;
    }
    if (config._f === hooks.RFC_2822) {
        configFromRFC2822(config);
        return;
    }
    config._a = [];
    getParsingFlags(config).empty = true;

    // This array is used to make a Date, either with `new Date` or `Date.UTC`
    var string = '' + config._i,
        i, parsedInput, tokens, token, skipped,
        stringLength = string.length,
        totalParsedInputLength = 0;

    tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];

    for (i = 0; i < tokens.length; i++) {
        token = tokens[i];
        parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
        // console.log('token', token, 'parsedInput', parsedInput,
        //         'regex', getParseRegexForToken(token, config));
        if (parsedInput) {
            skipped = string.substr(0, string.indexOf(parsedInput));
            if (skipped.length > 0) {
                getParsingFlags(config).unusedInput.push(skipped);
            }
            string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
            totalParsedInputLength += parsedInput.length;
        }
        // don't parse if it's not a known token
        if (formatTokenFunctions[token]) {
            if (parsedInput) {
                getParsingFlags(config).empty = false;
            }
            else {
                getParsingFlags(config).unusedTokens.push(token);
            }
            addTimeToArrayFromToken(token, parsedInput, config);
        }
        else if (config._strict && !parsedInput) {
            getParsingFlags(config).unusedTokens.push(token);
        }
    }

    // add remaining unparsed input length to the string
    getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
    if (string.length > 0) {
        getParsingFlags(config).unusedInput.push(string);
    }

    // clear _12h flag if hour is <= 12
    if (config._a[HOUR] <= 12 &&
        getParsingFlags(config).bigHour === true &&
        config._a[HOUR] > 0) {
        getParsingFlags(config).bigHour = undefined;
    }

    getParsingFlags(config).parsedDateParts = config._a.slice(0);
    getParsingFlags(config).meridiem = config._meridiem;
    // handle meridiem
    config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);

    configFromArray(config);
    checkOverflow(config);
}


function meridiemFixWrap (locale, hour, meridiem) {
    var isPm;

    if (meridiem == null) {
        // nothing to do
        return hour;
    }
    if (locale.meridiemHour != null) {
        return locale.meridiemHour(hour, meridiem);
    } else if (locale.isPM != null) {
        // Fallback
        isPm = locale.isPM(meridiem);
        if (isPm && hour < 12) {
            hour += 12;
        }
        if (!isPm && hour === 12) {
            hour = 0;
        }
        return hour;
    } else {
        // this is not supposed to happen
        return hour;
    }
}

// date from string and array of format strings
function configFromStringAndArray(config) {
    var tempConfig,
        bestMoment,

        scoreToBeat,
        i,
        currentScore;

    if (config._f.length === 0) {
        getParsingFlags(config).invalidFormat = true;
        config._d = new Date(NaN);
        return;
    }

    for (i = 0; i < config._f.length; i++) {
        currentScore = 0;
        tempConfig = copyConfig({}, config);
        if (config._useUTC != null) {
            tempConfig._useUTC = config._useUTC;
        }
        tempConfig._f = config._f[i];
        configFromStringAndFormat(tempConfig);

        if (!isValid(tempConfig)) {
            continue;
        }

        // if there is any input that was not parsed add a penalty for that format
        currentScore += getParsingFlags(tempConfig).charsLeftOver;

        //or tokens
        currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

        getParsingFlags(tempConfig).score = currentScore;

        if (scoreToBeat == null || currentScore < scoreToBeat) {
            scoreToBeat = currentScore;
            bestMoment = tempConfig;
        }
    }

    extend(config, bestMoment || tempConfig);
}

function configFromObject(config) {
    if (config._d) {
        return;
    }

    var i = normalizeObjectUnits(config._i);
    config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function (obj) {
        return obj && parseInt(obj, 10);
    });

    configFromArray(config);
}

function createFromConfig (config) {
    var res = new Moment(checkOverflow(prepareConfig(config)));
    if (res._nextDay) {
        // Adding is smart enough around DST
        res.add(1, 'd');
        res._nextDay = undefined;
    }

    return res;
}

function prepareConfig (config) {
    var input = config._i,
        format = config._f;

    config._locale = config._locale || getLocale(config._l);

    if (input === null || (format === undefined && input === '')) {
        return createInvalid({nullInput: true});
    }

    if (typeof input === 'string') {
        config._i = input = config._locale.preparse(input);
    }

    if (isMoment(input)) {
        return new Moment(checkOverflow(input));
    } else if (isDate(input)) {
        config._d = input;
    } else if (isArray(format)) {
        configFromStringAndArray(config);
    } else if (format) {
        configFromStringAndFormat(config);
    }  else {
        configFromInput(config);
    }

    if (!isValid(config)) {
        config._d = null;
    }

    return config;
}

function configFromInput(config) {
    var input = config._i;
    if (isUndefined(input)) {
        config._d = new Date(hooks.now());
    } else if (isDate(input)) {
        config._d = new Date(input.valueOf());
    } else if (typeof input === 'string') {
        configFromString(config);
    } else if (isArray(input)) {
        config._a = map(input.slice(0), function (obj) {
            return parseInt(obj, 10);
        });
        configFromArray(config);
    } else if (isObject(input)) {
        configFromObject(config);
    } else if (isNumber(input)) {
        // from milliseconds
        config._d = new Date(input);
    } else {
        hooks.createFromInputFallback(config);
    }
}

function createLocalOrUTC (input, format, locale, strict, isUTC) {
    var c = {};

    if (locale === true || locale === false) {
        strict = locale;
        locale = undefined;
    }

    if ((isObject(input) && isObjectEmpty(input)) ||
            (isArray(input) && input.length === 0)) {
        input = undefined;
    }
    // object construction must be done this way.
    // https://github.com/moment/moment/issues/1423
    c._isAMomentObject = true;
    c._useUTC = c._isUTC = isUTC;
    c._l = locale;
    c._i = input;
    c._f = format;
    c._strict = strict;

    return createFromConfig(c);
}

function createLocal (input, format, locale, strict) {
    return createLocalOrUTC(input, format, locale, strict, false);
}

var prototypeMin = deprecate(
    'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',
    function () {
        var other = createLocal.apply(null, arguments);
        if (this.isValid() && other.isValid()) {
            return other < this ? this : other;
        } else {
            return createInvalid();
        }
    }
);

var prototypeMax = deprecate(
    'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',
    function () {
        var other = createLocal.apply(null, arguments);
        if (this.isValid() && other.isValid()) {
            return other > this ? this : other;
        } else {
            return createInvalid();
        }
    }
);

// Pick a moment m from moments so that m[fn](other) is true for all
// other. This relies on the function fn to be transitive.
//
// moments should either be an array of moment objects or an array, whose
// first element is an array of moment objects.
function pickBy(fn, moments) {
    var res, i;
    if (moments.length === 1 && isArray(moments[0])) {
        moments = moments[0];
    }
    if (!moments.length) {
        return createLocal();
    }
    res = moments[0];
    for (i = 1; i < moments.length; ++i) {
        if (!moments[i].isValid() || moments[i][fn](res)) {
            res = moments[i];
        }
    }
    return res;
}

// TODO: Use [].sort instead?
function min () {
    var args = [].slice.call(arguments, 0);

    return pickBy('isBefore', args);
}

function max () {
    var args = [].slice.call(arguments, 0);

    return pickBy('isAfter', args);
}

var now = function () {
    return Date.now ? Date.now() : +(new Date());
};

var ordering = ['year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', 'millisecond'];

function isDurationValid(m) {
    for (var key in m) {
        if (!(indexOf.call(ordering, key) !== -1 && (m[key] == null || !isNaN(m[key])))) {
            return false;
        }
    }

    var unitHasDecimal = false;
    for (var i = 0; i < ordering.length; ++i) {
        if (m[ordering[i]]) {
            if (unitHasDecimal) {
                return false; // only allow non-integers for smallest unit
            }
            if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
                unitHasDecimal = true;
            }
        }
    }

    return true;
}

function isValid$1() {
    return this._isValid;
}

function createInvalid$1() {
    return createDuration(NaN);
}

function Duration (duration) {
    var normalizedInput = normalizeObjectUnits(duration),
        years = normalizedInput.year || 0,
        quarters = normalizedInput.quarter || 0,
        months = normalizedInput.month || 0,
        weeks = normalizedInput.week || 0,
        days = normalizedInput.day || 0,
        hours = normalizedInput.hour || 0,
        minutes = normalizedInput.minute || 0,
        seconds = normalizedInput.second || 0,
        milliseconds = normalizedInput.millisecond || 0;

    this._isValid = isDurationValid(normalizedInput);

    // representation for dateAddRemove
    this._milliseconds = +milliseconds +
        seconds * 1e3 + // 1000
        minutes * 6e4 + // 1000 * 60
        hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
    // Because of dateAddRemove treats 24 hours as different from a
    // day when working around DST, we need to store them separately
    this._days = +days +
        weeks * 7;
    // It is impossible to translate months into days without knowing
    // which months you are are talking about, so we have to store
    // it separately.
    this._months = +months +
        quarters * 3 +
        years * 12;

    this._data = {};

    this._locale = getLocale();

    this._bubble();
}

function isDuration (obj) {
    return obj instanceof Duration;
}

function absRound (number) {
    if (number < 0) {
        return Math.round(-1 * number) * -1;
    } else {
        return Math.round(number);
    }
}

// FORMATTING

function offset (token, separator) {
    addFormatToken(token, 0, 0, function () {
        var offset = this.utcOffset();
        var sign = '+';
        if (offset < 0) {
            offset = -offset;
            sign = '-';
        }
        return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);
    });
}

offset('Z', ':');
offset('ZZ', '');

// PARSING

addRegexToken('Z',  matchShortOffset);
addRegexToken('ZZ', matchShortOffset);
addParseToken(['Z', 'ZZ'], function (input, array, config) {
    config._useUTC = true;
    config._tzm = offsetFromString(matchShortOffset, input);
});

// HELPERS

// timezone chunker
// '+10:00' > ['10',  '00']
// '-1530'  > ['-15', '30']
var chunkOffset = /([\+\-]|\d\d)/gi;

function offsetFromString(matcher, string) {
    var matches = (string || '').match(matcher);

    if (matches === null) {
        return null;
    }

    var chunk   = matches[matches.length - 1] || [];
    var parts   = (chunk + '').match(chunkOffset) || ['-', 0, 0];
    var minutes = +(parts[1] * 60) + toInt(parts[2]);

    return minutes === 0 ?
      0 :
      parts[0] === '+' ? minutes : -minutes;
}

// Return a moment from input, that is local/utc/zone equivalent to model.
function cloneWithOffset(input, model) {
    var res, diff;
    if (model._isUTC) {
        res = model.clone();
        diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
        // Use low-level api, because this fn is low-level api.
        res._d.setTime(res._d.valueOf() + diff);
        hooks.updateOffset(res, false);
        return res;
    } else {
        return createLocal(input).local();
    }
}

function getDateOffset (m) {
    // On Firefox.24 Date#getTimezoneOffset returns a floating point.
    // https://github.com/moment/moment/pull/1871
    return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
}

// HOOKS

// This function will be called whenever a moment is mutated.
// It is intended to keep the offset in sync with the timezone.
hooks.updateOffset = function () {};

// MOMENTS

// keepLocalTime = true means only change the timezone, without
// affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
// 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
// +0200, so we adjust the time as needed, to be valid.
//
// Keeping the time actually adds/subtracts (one hour)
// from the actual represented time. That is why we call updateOffset
// a second time. In case it wants us to change the offset again
// _changeInProgress == true case, then we have to adjust, because
// there is no such time in the given timezone.
function getSetOffset (input, keepLocalTime, keepMinutes) {
    var offset = this._offset || 0,
        localAdjust;
    if (!this.isValid()) {
        return input != null ? this : NaN;
    }
    if (input != null) {
        if (typeof input === 'string') {
            input = offsetFromString(matchShortOffset, input);
            if (input === null) {
                return this;
            }
        } else if (Math.abs(input) < 16 && !keepMinutes) {
            input = input * 60;
        }
        if (!this._isUTC && keepLocalTime) {
            localAdjust = getDateOffset(this);
        }
        this._offset = input;
        this._isUTC = true;
        if (localAdjust != null) {
            this.add(localAdjust, 'm');
        }
        if (offset !== input) {
            if (!keepLocalTime || this._changeInProgress) {
                addSubtract(this, createDuration(input - offset, 'm'), 1, false);
            } else if (!this._changeInProgress) {
                this._changeInProgress = true;
                hooks.updateOffset(this, true);
                this._changeInProgress = null;
            }
        }
        return this;
    } else {
        return this._isUTC ? offset : getDateOffset(this);
    }
}

function getSetZone (input, keepLocalTime) {
    if (input != null) {
        if (typeof input !== 'string') {
            input = -input;
        }

        this.utcOffset(input, keepLocalTime);

        return this;
    } else {
        return -this.utcOffset();
    }
}

function setOffsetToUTC (keepLocalTime) {
    return this.utcOffset(0, keepLocalTime);
}

function setOffsetToLocal (keepLocalTime) {
    if (this._isUTC) {
        this.utcOffset(0, keepLocalTime);
        this._isUTC = false;

        if (keepLocalTime) {
            this.subtract(getDateOffset(this), 'm');
        }
    }
    return this;
}

function setOffsetToParsedOffset () {
    if (this._tzm != null) {
        this.utcOffset(this._tzm, false, true);
    } else if (typeof this._i === 'string') {
        var tZone = offsetFromString(matchOffset, this._i);
        if (tZone != null) {
            this.utcOffset(tZone);
        }
        else {
            this.utcOffset(0, true);
        }
    }
    return this;
}

function hasAlignedHourOffset (input) {
    if (!this.isValid()) {
        return false;
    }
    input = input ? createLocal(input).utcOffset() : 0;

    return (this.utcOffset() - input) % 60 === 0;
}

function isDaylightSavingTime () {
    return (
        this.utcOffset() > this.clone().month(0).utcOffset() ||
        this.utcOffset() > this.clone().month(5).utcOffset()
    );
}

function isDaylightSavingTimeShifted () {
    if (!isUndefined(this._isDSTShifted)) {
        return this._isDSTShifted;
    }

    var c = {};

    copyConfig(c, this);
    c = prepareConfig(c);

    if (c._a) {
        var other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
        this._isDSTShifted = this.isValid() &&
            compareArrays(c._a, other.toArray()) > 0;
    } else {
        this._isDSTShifted = false;
    }

    return this._isDSTShifted;
}

function isLocal () {
    return this.isValid() ? !this._isUTC : false;
}

function isUtcOffset () {
    return this.isValid() ? this._isUTC : false;
}

function isUtc () {
    return this.isValid() ? this._isUTC && this._offset === 0 : false;
}

// ASP.NET json date format regex
var aspNetRegex = /^(\-|\+)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/;

// from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
// somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
// and further modified to allow for strings containing both week and day
var isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;

function createDuration (input, key) {
    var duration = input,
        // matching against regexp is expensive, do it on demand
        match = null,
        sign,
        ret,
        diffRes;

    if (isDuration(input)) {
        duration = {
            ms : input._milliseconds,
            d  : input._days,
            M  : input._months
        };
    } else if (isNumber(input)) {
        duration = {};
        if (key) {
            duration[key] = input;
        } else {
            duration.milliseconds = input;
        }
    } else if (!!(match = aspNetRegex.exec(input))) {
        sign = (match[1] === '-') ? -1 : 1;
        duration = {
            y  : 0,
            d  : toInt(match[DATE])                         * sign,
            h  : toInt(match[HOUR])                         * sign,
            m  : toInt(match[MINUTE])                       * sign,
            s  : toInt(match[SECOND])                       * sign,
            ms : toInt(absRound(match[MILLISECOND] * 1000)) * sign // the millisecond decimal point is included in the match
        };
    } else if (!!(match = isoRegex.exec(input))) {
        sign = (match[1] === '-') ? -1 : (match[1] === '+') ? 1 : 1;
        duration = {
            y : parseIso(match[2], sign),
            M : parseIso(match[3], sign),
            w : parseIso(match[4], sign),
            d : parseIso(match[5], sign),
            h : parseIso(match[6], sign),
            m : parseIso(match[7], sign),
            s : parseIso(match[8], sign)
        };
    } else if (duration == null) {// checks for null or undefined
        duration = {};
    } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
        diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));

        duration = {};
        duration.ms = diffRes.milliseconds;
        duration.M = diffRes.months;
    }

    ret = new Duration(duration);

    if (isDuration(input) && hasOwnProp(input, '_locale')) {
        ret._locale = input._locale;
    }

    return ret;
}

createDuration.fn = Duration.prototype;
createDuration.invalid = createInvalid$1;

function parseIso (inp, sign) {
    // We'd normally use ~~inp for this, but unfortunately it also
    // converts floats to ints.
    // inp may be undefined, so careful calling replace on it.
    var res = inp && parseFloat(inp.replace(',', '.'));
    // apply sign while we're at it
    return (isNaN(res) ? 0 : res) * sign;
}

function positiveMomentsDifference(base, other) {
    var res = {milliseconds: 0, months: 0};

    res.months = other.month() - base.month() +
        (other.year() - base.year()) * 12;
    if (base.clone().add(res.months, 'M').isAfter(other)) {
        --res.months;
    }

    res.milliseconds = +other - +(base.clone().add(res.months, 'M'));

    return res;
}

function momentsDifference(base, other) {
    var res;
    if (!(base.isValid() && other.isValid())) {
        return {milliseconds: 0, months: 0};
    }

    other = cloneWithOffset(other, base);
    if (base.isBefore(other)) {
        res = positiveMomentsDifference(base, other);
    } else {
        res = positiveMomentsDifference(other, base);
        res.milliseconds = -res.milliseconds;
        res.months = -res.months;
    }

    return res;
}

// TODO: remove 'name' arg after deprecation is removed
function createAdder(direction, name) {
    return function (val, period) {
        var dur, tmp;
        //invert the arguments, but complain about it
        if (period !== null && !isNaN(+period)) {
            deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' +
            'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');
            tmp = val; val = period; period = tmp;
        }

        val = typeof val === 'string' ? +val : val;
        dur = createDuration(val, period);
        addSubtract(this, dur, direction);
        return this;
    };
}

function addSubtract (mom, duration, isAdding, updateOffset) {
    var milliseconds = duration._milliseconds,
        days = absRound(duration._days),
        months = absRound(duration._months);

    if (!mom.isValid()) {
        // No op
        return;
    }

    updateOffset = updateOffset == null ? true : updateOffset;

    if (months) {
        setMonth(mom, get(mom, 'Month') + months * isAdding);
    }
    if (days) {
        set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
    }
    if (milliseconds) {
        mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
    }
    if (updateOffset) {
        hooks.updateOffset(mom, days || months);
    }
}

var add      = createAdder(1, 'add');
var subtract = createAdder(-1, 'subtract');

function getCalendarFormat(myMoment, now) {
    var diff = myMoment.diff(now, 'days', true);
    return diff < -6 ? 'sameElse' :
            diff < -1 ? 'lastWeek' :
            diff < 0 ? 'lastDay' :
            diff < 1 ? 'sameDay' :
            diff < 2 ? 'nextDay' :
            diff < 7 ? 'nextWeek' : 'sameElse';
}

function calendar$1 (time, formats) {
    // We want to compare the start of today, vs this.
    // Getting start-of-today depends on whether we're local/utc/offset or not.
    var now = time || createLocal(),
        sod = cloneWithOffset(now, this).startOf('day'),
        format = hooks.calendarFormat(this, sod) || 'sameElse';

    var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);

    return this.format(output || this.localeData().calendar(format, this, createLocal(now)));
}

function clone () {
    return new Moment(this);
}

function isAfter (input, units) {
    var localInput = isMoment(input) ? input : createLocal(input);
    if (!(this.isValid() && localInput.isValid())) {
        return false;
    }
    units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
    if (units === 'millisecond') {
        return this.valueOf() > localInput.valueOf();
    } else {
        return localInput.valueOf() < this.clone().startOf(units).valueOf();
    }
}

function isBefore (input, units) {
    var localInput = isMoment(input) ? input : createLocal(input);
    if (!(this.isValid() && localInput.isValid())) {
        return false;
    }
    units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
    if (units === 'millisecond') {
        return this.valueOf() < localInput.valueOf();
    } else {
        return this.clone().endOf(units).valueOf() < localInput.valueOf();
    }
}

function isBetween (from, to, units, inclusivity) {
    inclusivity = inclusivity || '()';
    return (inclusivity[0] === '(' ? this.isAfter(from, units) : !this.isBefore(from, units)) &&
        (inclusivity[1] === ')' ? this.isBefore(to, units) : !this.isAfter(to, units));
}

function isSame (input, units) {
    var localInput = isMoment(input) ? input : createLocal(input),
        inputMs;
    if (!(this.isValid() && localInput.isValid())) {
        return false;
    }
    units = normalizeUnits(units || 'millisecond');
    if (units === 'millisecond') {
        return this.valueOf() === localInput.valueOf();
    } else {
        inputMs = localInput.valueOf();
        return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
    }
}

function isSameOrAfter (input, units) {
    return this.isSame(input, units) || this.isAfter(input,units);
}

function isSameOrBefore (input, units) {
    return this.isSame(input, units) || this.isBefore(input,units);
}

function diff (input, units, asFloat) {
    var that,
        zoneDelta,
        delta, output;

    if (!this.isValid()) {
        return NaN;
    }

    that = cloneWithOffset(input, this);

    if (!that.isValid()) {
        return NaN;
    }

    zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;

    units = normalizeUnits(units);

    switch (units) {
        case 'year': output = monthDiff(this, that) / 12; break;
        case 'month': output = monthDiff(this, that); break;
        case 'quarter': output = monthDiff(this, that) / 3; break;
        case 'second': output = (this - that) / 1e3; break; // 1000
        case 'minute': output = (this - that) / 6e4; break; // 1000 * 60
        case 'hour': output = (this - that) / 36e5; break; // 1000 * 60 * 60
        case 'day': output = (this - that - zoneDelta) / 864e5; break; // 1000 * 60 * 60 * 24, negate dst
        case 'week': output = (this - that - zoneDelta) / 6048e5; break; // 1000 * 60 * 60 * 24 * 7, negate dst
        default: output = this - that;
    }

    return asFloat ? output : absFloor(output);
}

function monthDiff (a, b) {
    // difference in months
    var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),
        // b is in (anchor - 1 month, anchor + 1 month)
        anchor = a.clone().add(wholeMonthDiff, 'months'),
        anchor2, adjust;

    if (b - anchor < 0) {
        anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
        // linear across the month
        adjust = (b - anchor) / (anchor - anchor2);
    } else {
        anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
        // linear across the month
        adjust = (b - anchor) / (anchor2 - anchor);
    }

    //check for negative zero, return zero if negative zero
    return -(wholeMonthDiff + adjust) || 0;
}

hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';

function toString () {
    return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
}

function toISOString(keepOffset) {
    if (!this.isValid()) {
        return null;
    }
    var utc = keepOffset !== true;
    var m = utc ? this.clone().utc() : this;
    if (m.year() < 0 || m.year() > 9999) {
        return formatMoment(m, utc ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ');
    }
    if (isFunction(Date.prototype.toISOString)) {
        // native implementation is ~50x faster, use it when we can
        if (utc) {
            return this.toDate().toISOString();
        } else {
            return new Date(this._d.valueOf()).toISOString().replace('Z', formatMoment(m, 'Z'));
        }
    }
    return formatMoment(m, utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ');
}

/**
 * Return a human readable representation of a moment that can
 * also be evaluated to get a new moment which is the same
 *
 * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
 */
function inspect () {
    if (!this.isValid()) {
        return 'moment.invalid(/* ' + this._i + ' */)';
    }
    var func = 'moment';
    var zone = '';
    if (!this.isLocal()) {
        func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
        zone = 'Z';
    }
    var prefix = '[' + func + '("]';
    var year = (0 <= this.year() && this.year() <= 9999) ? 'YYYY' : 'YYYYYY';
    var datetime = '-MM-DD[T]HH:mm:ss.SSS';
    var suffix = zone + '[")]';

    return this.format(prefix + year + datetime + suffix);
}

function format (inputString) {
    if (!inputString) {
        inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
    }
    var output = formatMoment(this, inputString);
    return this.localeData().postformat(output);
}

function from (time, withoutSuffix) {
    if (this.isValid() &&
            ((isMoment(time) && time.isValid()) ||
             createLocal(time).isValid())) {
        return createDuration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);
    } else {
        return this.localeData().invalidDate();
    }
}

function fromNow (withoutSuffix) {
    return this.from(createLocal(), withoutSuffix);
}

function to (time, withoutSuffix) {
    if (this.isValid() &&
            ((isMoment(time) && time.isValid()) ||
             createLocal(time).isValid())) {
        return createDuration({from: this, to: time}).locale(this.locale()).humanize(!withoutSuffix);
    } else {
        return this.localeData().invalidDate();
    }
}

function toNow (withoutSuffix) {
    return this.to(createLocal(), withoutSuffix);
}

// If passed a locale key, it will set the locale for this
// instance.  Otherwise, it will return the locale configuration
// variables for this instance.
function locale (key) {
    var newLocaleData;

    if (key === undefined) {
        return this._locale._abbr;
    } else {
        newLocaleData = getLocale(key);
        if (newLocaleData != null) {
            this._locale = newLocaleData;
        }
        return this;
    }
}

var lang = deprecate(
    'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
    function (key) {
        if (key === undefined) {
            return this.localeData();
        } else {
            return this.locale(key);
        }
    }
);

function localeData () {
    return this._locale;
}

function startOf (units) {
    units = normalizeUnits(units);
    // the following switch intentionally omits break keywords
    // to utilize falling through the cases.
    switch (units) {
        case 'year':
            this.month(0);
            /* falls through */
        case 'quarter':
        case 'month':
            this.date(1);
            /* falls through */
        case 'week':
        case 'isoWeek':
        case 'day':
        case 'date':
            this.hours(0);
            /* falls through */
        case 'hour':
            this.minutes(0);
            /* falls through */
        case 'minute':
            this.seconds(0);
            /* falls through */
        case 'second':
            this.milliseconds(0);
    }

    // weeks are a special case
    if (units === 'week') {
        this.weekday(0);
    }
    if (units === 'isoWeek') {
        this.isoWeekday(1);
    }

    // quarters are also special
    if (units === 'quarter') {
        this.month(Math.floor(this.month() / 3) * 3);
    }

    return this;
}

function endOf (units) {
    units = normalizeUnits(units);
    if (units === undefined || units === 'millisecond') {
        return this;
    }

    // 'date' is an alias for 'day', so it should be considered as such.
    if (units === 'date') {
        units = 'day';
    }

    return this.startOf(units).add(1, (units === 'isoWeek' ? 'week' : units)).subtract(1, 'ms');
}

function valueOf () {
    return this._d.valueOf() - ((this._offset || 0) * 60000);
}

function unix () {
    return Math.floor(this.valueOf() / 1000);
}

function toDate () {
    return new Date(this.valueOf());
}

function toArray () {
    var m = this;
    return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
}

function toObject () {
    var m = this;
    return {
        years: m.year(),
        months: m.month(),
        date: m.date(),
        hours: m.hours(),
        minutes: m.minutes(),
        seconds: m.seconds(),
        milliseconds: m.milliseconds()
    };
}

function toJSON () {
    // new Date(NaN).toJSON() === null
    return this.isValid() ? this.toISOString() : null;
}

function isValid$2 () {
    return isValid(this);
}

function parsingFlags () {
    return extend({}, getParsingFlags(this));
}

function invalidAt () {
    return getParsingFlags(this).overflow;
}

function creationData() {
    return {
        input: this._i,
        format: this._f,
        locale: this._locale,
        isUTC: this._isUTC,
        strict: this._strict
    };
}

// FORMATTING

addFormatToken(0, ['gg', 2], 0, function () {
    return this.weekYear() % 100;
});

addFormatToken(0, ['GG', 2], 0, function () {
    return this.isoWeekYear() % 100;
});

function addWeekYearFormatToken (token, getter) {
    addFormatToken(0, [token, token.length], 0, getter);
}

addWeekYearFormatToken('gggg',     'weekYear');
addWeekYearFormatToken('ggggg',    'weekYear');
addWeekYearFormatToken('GGGG',  'isoWeekYear');
addWeekYearFormatToken('GGGGG', 'isoWeekYear');

// ALIASES

addUnitAlias('weekYear', 'gg');
addUnitAlias('isoWeekYear', 'GG');

// PRIORITY

addUnitPriority('weekYear', 1);
addUnitPriority('isoWeekYear', 1);


// PARSING

addRegexToken('G',      matchSigned);
addRegexToken('g',      matchSigned);
addRegexToken('GG',     match1to2, match2);
addRegexToken('gg',     match1to2, match2);
addRegexToken('GGGG',   match1to4, match4);
addRegexToken('gggg',   match1to4, match4);
addRegexToken('GGGGG',  match1to6, match6);
addRegexToken('ggggg',  match1to6, match6);

addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {
    week[token.substr(0, 2)] = toInt(input);
});

addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
    week[token] = hooks.parseTwoDigitYear(input);
});

// MOMENTS

function getSetWeekYear (input) {
    return getSetWeekYearHelper.call(this,
            input,
            this.week(),
            this.weekday(),
            this.localeData()._week.dow,
            this.localeData()._week.doy);
}

function getSetISOWeekYear (input) {
    return getSetWeekYearHelper.call(this,
            input, this.isoWeek(), this.isoWeekday(), 1, 4);
}

function getISOWeeksInYear () {
    return weeksInYear(this.year(), 1, 4);
}

function getWeeksInYear () {
    var weekInfo = this.localeData()._week;
    return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
}

function getSetWeekYearHelper(input, week, weekday, dow, doy) {
    var weeksTarget;
    if (input == null) {
        return weekOfYear(this, dow, doy).year;
    } else {
        weeksTarget = weeksInYear(input, dow, doy);
        if (week > weeksTarget) {
            week = weeksTarget;
        }
        return setWeekAll.call(this, input, week, weekday, dow, doy);
    }
}

function setWeekAll(weekYear, week, weekday, dow, doy) {
    var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
        date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);

    this.year(date.getUTCFullYear());
    this.month(date.getUTCMonth());
    this.date(date.getUTCDate());
    return this;
}

// FORMATTING

addFormatToken('Q', 0, 'Qo', 'quarter');

// ALIASES

addUnitAlias('quarter', 'Q');

// PRIORITY

addUnitPriority('quarter', 7);

// PARSING

addRegexToken('Q', match1);
addParseToken('Q', function (input, array) {
    array[MONTH] = (toInt(input) - 1) * 3;
});

// MOMENTS

function getSetQuarter (input) {
    return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
}

// FORMATTING

addFormatToken('D', ['DD', 2], 'Do', 'date');

// ALIASES

addUnitAlias('date', 'D');

// PRIOROITY
addUnitPriority('date', 9);

// PARSING

addRegexToken('D',  match1to2);
addRegexToken('DD', match1to2, match2);
addRegexToken('Do', function (isStrict, locale) {
    // TODO: Remove "ordinalParse" fallback in next major release.
    return isStrict ?
      (locale._dayOfMonthOrdinalParse || locale._ordinalParse) :
      locale._dayOfMonthOrdinalParseLenient;
});

addParseToken(['D', 'DD'], DATE);
addParseToken('Do', function (input, array) {
    array[DATE] = toInt(input.match(match1to2)[0]);
});

// MOMENTS

var getSetDayOfMonth = makeGetSet('Date', true);

// FORMATTING

addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

// ALIASES

addUnitAlias('dayOfYear', 'DDD');

// PRIORITY
addUnitPriority('dayOfYear', 4);

// PARSING

addRegexToken('DDD',  match1to3);
addRegexToken('DDDD', match3);
addParseToken(['DDD', 'DDDD'], function (input, array, config) {
    config._dayOfYear = toInt(input);
});

// HELPERS

// MOMENTS

function getSetDayOfYear (input) {
    var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
    return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');
}

// FORMATTING

addFormatToken('m', ['mm', 2], 0, 'minute');

// ALIASES

addUnitAlias('minute', 'm');

// PRIORITY

addUnitPriority('minute', 14);

// PARSING

addRegexToken('m',  match1to2);
addRegexToken('mm', match1to2, match2);
addParseToken(['m', 'mm'], MINUTE);

// MOMENTS

var getSetMinute = makeGetSet('Minutes', false);

// FORMATTING

addFormatToken('s', ['ss', 2], 0, 'second');

// ALIASES

addUnitAlias('second', 's');

// PRIORITY

addUnitPriority('second', 15);

// PARSING

addRegexToken('s',  match1to2);
addRegexToken('ss', match1to2, match2);
addParseToken(['s', 'ss'], SECOND);

// MOMENTS

var getSetSecond = makeGetSet('Seconds', false);

// FORMATTING

addFormatToken('S', 0, 0, function () {
    return ~~(this.millisecond() / 100);
});

addFormatToken(0, ['SS', 2], 0, function () {
    return ~~(this.millisecond() / 10);
});

addFormatToken(0, ['SSS', 3], 0, 'millisecond');
addFormatToken(0, ['SSSS', 4], 0, function () {
    return this.millisecond() * 10;
});
addFormatToken(0, ['SSSSS', 5], 0, function () {
    return this.millisecond() * 100;
});
addFormatToken(0, ['SSSSSS', 6], 0, function () {
    return this.millisecond() * 1000;
});
addFormatToken(0, ['SSSSSSS', 7], 0, function () {
    return this.millisecond() * 10000;
});
addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
    return this.millisecond() * 100000;
});
addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
    return this.millisecond() * 1000000;
});


// ALIASES

addUnitAlias('millisecond', 'ms');

// PRIORITY

addUnitPriority('millisecond', 16);

// PARSING

addRegexToken('S',    match1to3, match1);
addRegexToken('SS',   match1to3, match2);
addRegexToken('SSS',  match1to3, match3);

var token;
for (token = 'SSSS'; token.length <= 9; token += 'S') {
    addRegexToken(token, matchUnsigned);
}

function parseMs(input, array) {
    array[MILLISECOND] = toInt(('0.' + input) * 1000);
}

for (token = 'S'; token.length <= 9; token += 'S') {
    addParseToken(token, parseMs);
}
// MOMENTS

var getSetMillisecond = makeGetSet('Milliseconds', false);

// FORMATTING

addFormatToken('z',  0, 0, 'zoneAbbr');
addFormatToken('zz', 0, 0, 'zoneName');

// MOMENTS

function getZoneAbbr () {
    return this._isUTC ? 'UTC' : '';
}

function getZoneName () {
    return this._isUTC ? 'Coordinated Universal Time' : '';
}

var proto = Moment.prototype;

proto.add               = add;
proto.calendar          = calendar$1;
proto.clone             = clone;
proto.diff              = diff;
proto.endOf             = endOf;
proto.format            = format;
proto.from              = from;
proto.fromNow           = fromNow;
proto.to                = to;
proto.toNow             = toNow;
proto.get               = stringGet;
proto.invalidAt         = invalidAt;
proto.isAfter           = isAfter;
proto.isBefore          = isBefore;
proto.isBetween         = isBetween;
proto.isSame            = isSame;
proto.isSameOrAfter     = isSameOrAfter;
proto.isSameOrBefore    = isSameOrBefore;
proto.isValid           = isValid$2;
proto.lang              = lang;
proto.locale            = locale;
proto.localeData        = localeData;
proto.max               = prototypeMax;
proto.min               = prototypeMin;
proto.parsingFlags      = parsingFlags;
proto.set               = stringSet;
proto.startOf           = startOf;
proto.subtract          = subtract;
proto.toArray           = toArray;
proto.toObject          = toObject;
proto.toDate            = toDate;
proto.toISOString       = toISOString;
proto.inspect           = inspect;
proto.toJSON            = toJSON;
proto.toString          = toString;
proto.unix              = unix;
proto.valueOf           = valueOf;
proto.creationData      = creationData;

// Year
proto.year       = getSetYear;
proto.isLeapYear = getIsLeapYear;

// Week Year
proto.weekYear    = getSetWeekYear;
proto.isoWeekYear = getSetISOWeekYear;

// Quarter
proto.quarter = proto.quarters = getSetQuarter;

// Month
proto.month       = getSetMonth;
proto.daysInMonth = getDaysInMonth;

// Week
proto.week           = proto.weeks        = getSetWeek;
proto.isoWeek        = proto.isoWeeks     = getSetISOWeek;
proto.weeksInYear    = getWeeksInYear;
proto.isoWeeksInYear = getISOWeeksInYear;

// Day
proto.date       = getSetDayOfMonth;
proto.day        = proto.days             = getSetDayOfWeek;
proto.weekday    = getSetLocaleDayOfWeek;
proto.isoWeekday = getSetISODayOfWeek;
proto.dayOfYear  = getSetDayOfYear;

// Hour
proto.hour = proto.hours = getSetHour;

// Minute
proto.minute = proto.minutes = getSetMinute;

// Second
proto.second = proto.seconds = getSetSecond;

// Millisecond
proto.millisecond = proto.milliseconds = getSetMillisecond;

// Offset
proto.utcOffset            = getSetOffset;
proto.utc                  = setOffsetToUTC;
proto.local                = setOffsetToLocal;
proto.parseZone            = setOffsetToParsedOffset;
proto.hasAlignedHourOffset = hasAlignedHourOffset;
proto.isDST                = isDaylightSavingTime;
proto.isLocal              = isLocal;
proto.isUtcOffset          = isUtcOffset;
proto.isUtc                = isUtc;
proto.isUTC                = isUtc;

// Timezone
proto.zoneAbbr = getZoneAbbr;
proto.zoneName = getZoneName;

// Deprecations
proto.dates  = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
proto.years  = deprecate('years accessor is deprecated. Use year instead', getSetYear);
proto.zone   = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);
proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);

function createUnix (input) {
    return createLocal(input * 1000);
}

function createInZone () {
    return createLocal.apply(null, arguments).parseZone();
}

function preParsePostFormat (string) {
    return string;
}

var proto$1 = Locale.prototype;

proto$1.calendar        = calendar;
proto$1.longDateFormat  = longDateFormat;
proto$1.invalidDate     = invalidDate;
proto$1.ordinal         = ordinal;
proto$1.preparse        = preParsePostFormat;
proto$1.postformat      = preParsePostFormat;
proto$1.relativeTime    = relativeTime;
proto$1.pastFuture      = pastFuture;
proto$1.set             = set;

// Month
proto$1.months            =        localeMonths;
proto$1.monthsShort       =        localeMonthsShort;
proto$1.monthsParse       =        localeMonthsParse;
proto$1.monthsRegex       = monthsRegex;
proto$1.monthsShortRegex  = monthsShortRegex;

// Week
proto$1.week = localeWeek;
proto$1.firstDayOfYear = localeFirstDayOfYear;
proto$1.firstDayOfWeek = localeFirstDayOfWeek;

// Day of Week
proto$1.weekdays       =        localeWeekdays;
proto$1.weekdaysMin    =        localeWeekdaysMin;
proto$1.weekdaysShort  =        localeWeekdaysShort;
proto$1.weekdaysParse  =        localeWeekdaysParse;

proto$1.weekdaysRegex       =        weekdaysRegex;
proto$1.weekdaysShortRegex  =        weekdaysShortRegex;
proto$1.weekdaysMinRegex    =        weekdaysMinRegex;

// Hours
proto$1.isPM = localeIsPM;
proto$1.meridiem = localeMeridiem;

function get$1 (format, index, field, setter) {
    var locale = getLocale();
    var utc = createUTC().set(setter, index);
    return locale[field](utc, format);
}

function listMonthsImpl (format, index, field) {
    if (isNumber(format)) {
        index = format;
        format = undefined;
    }

    format = format || '';

    if (index != null) {
        return get$1(format, index, field, 'month');
    }

    var i;
    var out = [];
    for (i = 0; i < 12; i++) {
        out[i] = get$1(format, i, field, 'month');
    }
    return out;
}

// ()
// (5)
// (fmt, 5)
// (fmt)
// (true)
// (true, 5)
// (true, fmt, 5)
// (true, fmt)
function listWeekdaysImpl (localeSorted, format, index, field) {
    if (typeof localeSorted === 'boolean') {
        if (isNumber(format)) {
            index = format;
            format = undefined;
        }

        format = format || '';
    } else {
        format = localeSorted;
        index = format;
        localeSorted = false;

        if (isNumber(format)) {
            index = format;
            format = undefined;
        }

        format = format || '';
    }

    var locale = getLocale(),
        shift = localeSorted ? locale._week.dow : 0;

    if (index != null) {
        return get$1(format, (index + shift) % 7, field, 'day');
    }

    var i;
    var out = [];
    for (i = 0; i < 7; i++) {
        out[i] = get$1(format, (i + shift) % 7, field, 'day');
    }
    return out;
}

function listMonths (format, index) {
    return listMonthsImpl(format, index, 'months');
}

function listMonthsShort (format, index) {
    return listMonthsImpl(format, index, 'monthsShort');
}

function listWeekdays (localeSorted, format, index) {
    return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
}

function listWeekdaysShort (localeSorted, format, index) {
    return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
}

function listWeekdaysMin (localeSorted, format, index) {
    return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
}

getSetGlobalLocale('en', {
    dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
    ordinal : function (number) {
        var b = number % 10,
            output = (toInt(number % 100 / 10) === 1) ? 'th' :
            (b === 1) ? 'st' :
            (b === 2) ? 'nd' :
            (b === 3) ? 'rd' : 'th';
        return number + output;
    }
});

// Side effect imports
hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);
hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);

var mathAbs = Math.abs;

function abs () {
    var data           = this._data;

    this._milliseconds = mathAbs(this._milliseconds);
    this._days         = mathAbs(this._days);
    this._months       = mathAbs(this._months);

    data.milliseconds  = mathAbs(data.milliseconds);
    data.seconds       = mathAbs(data.seconds);
    data.minutes       = mathAbs(data.minutes);
    data.hours         = mathAbs(data.hours);
    data.months        = mathAbs(data.months);
    data.years         = mathAbs(data.years);

    return this;
}

function addSubtract$1 (duration, input, value, direction) {
    var other = createDuration(input, value);

    duration._milliseconds += direction * other._milliseconds;
    duration._days         += direction * other._days;
    duration._months       += direction * other._months;

    return duration._bubble();
}

// supports only 2.0-style add(1, 's') or add(duration)
function add$1 (input, value) {
    return addSubtract$1(this, input, value, 1);
}

// supports only 2.0-style subtract(1, 's') or subtract(duration)
function subtract$1 (input, value) {
    return addSubtract$1(this, input, value, -1);
}

function absCeil (number) {
    if (number < 0) {
        return Math.floor(number);
    } else {
        return Math.ceil(number);
    }
}

function bubble () {
    var milliseconds = this._milliseconds;
    var days         = this._days;
    var months       = this._months;
    var data         = this._data;
    var seconds, minutes, hours, years, monthsFromDays;

    // if we have a mix of positive and negative values, bubble down first
    // check: https://github.com/moment/moment/issues/2166
    if (!((milliseconds >= 0 && days >= 0 && months >= 0) ||
            (milliseconds <= 0 && days <= 0 && months <= 0))) {
        milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
        days = 0;
        months = 0;
    }

    // The following code bubbles up values, see the tests for
    // examples of what that means.
    data.milliseconds = milliseconds % 1000;

    seconds           = absFloor(milliseconds / 1000);
    data.seconds      = seconds % 60;

    minutes           = absFloor(seconds / 60);
    data.minutes      = minutes % 60;

    hours             = absFloor(minutes / 60);
    data.hours        = hours % 24;

    days += absFloor(hours / 24);

    // convert days to months
    monthsFromDays = absFloor(daysToMonths(days));
    months += monthsFromDays;
    days -= absCeil(monthsToDays(monthsFromDays));

    // 12 months -> 1 year
    years = absFloor(months / 12);
    months %= 12;

    data.days   = days;
    data.months = months;
    data.years  = years;

    return this;
}

function daysToMonths (days) {
    // 400 years have 146097 days (taking into account leap year rules)
    // 400 years have 12 months === 4800
    return days * 4800 / 146097;
}

function monthsToDays (months) {
    // the reverse of daysToMonths
    return months * 146097 / 4800;
}

function as (units) {
    if (!this.isValid()) {
        return NaN;
    }
    var days;
    var months;
    var milliseconds = this._milliseconds;

    units = normalizeUnits(units);

    if (units === 'month' || units === 'year') {
        days   = this._days   + milliseconds / 864e5;
        months = this._months + daysToMonths(days);
        return units === 'month' ? months : months / 12;
    } else {
        // handle milliseconds separately because of floating point math errors (issue #1867)
        days = this._days + Math.round(monthsToDays(this._months));
        switch (units) {
            case 'week'   : return days / 7     + milliseconds / 6048e5;
            case 'day'    : return days         + milliseconds / 864e5;
            case 'hour'   : return days * 24    + milliseconds / 36e5;
            case 'minute' : return days * 1440  + milliseconds / 6e4;
            case 'second' : return days * 86400 + milliseconds / 1000;
            // Math.floor prevents floating point math errors here
            case 'millisecond': return Math.floor(days * 864e5) + milliseconds;
            default: throw new Error('Unknown unit ' + units);
        }
    }
}

// TODO: Use this.as('ms')?
function valueOf$1 () {
    if (!this.isValid()) {
        return NaN;
    }
    return (
        this._milliseconds +
        this._days * 864e5 +
        (this._months % 12) * 2592e6 +
        toInt(this._months / 12) * 31536e6
    );
}

function makeAs (alias) {
    return function () {
        return this.as(alias);
    };
}

var asMilliseconds = makeAs('ms');
var asSeconds      = makeAs('s');
var asMinutes      = makeAs('m');
var asHours        = makeAs('h');
var asDays         = makeAs('d');
var asWeeks        = makeAs('w');
var asMonths       = makeAs('M');
var asYears        = makeAs('y');

function clone$1 () {
    return createDuration(this);
}

function get$2 (units) {
    units = normalizeUnits(units);
    return this.isValid() ? this[units + 's']() : NaN;
}

function makeGetter(name) {
    return function () {
        return this.isValid() ? this._data[name] : NaN;
    };
}

var milliseconds = makeGetter('milliseconds');
var seconds      = makeGetter('seconds');
var minutes      = makeGetter('minutes');
var hours        = makeGetter('hours');
var days         = makeGetter('days');
var months       = makeGetter('months');
var years        = makeGetter('years');

function weeks () {
    return absFloor(this.days() / 7);
}

var round = Math.round;
var thresholds = {
    ss: 44,         // a few seconds to seconds
    s : 45,         // seconds to minute
    m : 45,         // minutes to hour
    h : 22,         // hours to day
    d : 26,         // days to month
    M : 11          // months to year
};

// helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
    return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
}

function relativeTime$1 (posNegDuration, withoutSuffix, locale) {
    var duration = createDuration(posNegDuration).abs();
    var seconds  = round(duration.as('s'));
    var minutes  = round(duration.as('m'));
    var hours    = round(duration.as('h'));
    var days     = round(duration.as('d'));
    var months   = round(duration.as('M'));
    var years    = round(duration.as('y'));

    var a = seconds <= thresholds.ss && ['s', seconds]  ||
            seconds < thresholds.s   && ['ss', seconds] ||
            minutes <= 1             && ['m']           ||
            minutes < thresholds.m   && ['mm', minutes] ||
            hours   <= 1             && ['h']           ||
            hours   < thresholds.h   && ['hh', hours]   ||
            days    <= 1             && ['d']           ||
            days    < thresholds.d   && ['dd', days]    ||
            months  <= 1             && ['M']           ||
            months  < thresholds.M   && ['MM', months]  ||
            years   <= 1             && ['y']           || ['yy', years];

    a[2] = withoutSuffix;
    a[3] = +posNegDuration > 0;
    a[4] = locale;
    return substituteTimeAgo.apply(null, a);
}

// This function allows you to set the rounding function for relative time strings
function getSetRelativeTimeRounding (roundingFunction) {
    if (roundingFunction === undefined) {
        return round;
    }
    if (typeof(roundingFunction) === 'function') {
        round = roundingFunction;
        return true;
    }
    return false;
}

// This function allows you to set a threshold for relative time strings
function getSetRelativeTimeThreshold (threshold, limit) {
    if (thresholds[threshold] === undefined) {
        return false;
    }
    if (limit === undefined) {
        return thresholds[threshold];
    }
    thresholds[threshold] = limit;
    if (threshold === 's') {
        thresholds.ss = limit - 1;
    }
    return true;
}

function humanize (withSuffix) {
    if (!this.isValid()) {
        return this.localeData().invalidDate();
    }

    var locale = this.localeData();
    var output = relativeTime$1(this, !withSuffix, locale);

    if (withSuffix) {
        output = locale.pastFuture(+this, output);
    }

    return locale.postformat(output);
}

var abs$1 = Math.abs;

function sign(x) {
    return ((x > 0) - (x < 0)) || +x;
}

function toISOString$1() {
    // for ISO strings we do not use the normal bubbling rules:
    //  * milliseconds bubble up until they become hours
    //  * days do not bubble at all
    //  * months bubble up until they become years
    // This is because there is no context-free conversion between hours and days
    // (think of clock changes)
    // and also not between days and months (28-31 days per month)
    if (!this.isValid()) {
        return this.localeData().invalidDate();
    }

    var seconds = abs$1(this._milliseconds) / 1000;
    var days         = abs$1(this._days);
    var months       = abs$1(this._months);
    var minutes, hours, years;

    // 3600 seconds -> 60 minutes -> 1 hour
    minutes           = absFloor(seconds / 60);
    hours             = absFloor(minutes / 60);
    seconds %= 60;
    minutes %= 60;

    // 12 months -> 1 year
    years  = absFloor(months / 12);
    months %= 12;


    // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
    var Y = years;
    var M = months;
    var D = days;
    var h = hours;
    var m = minutes;
    var s = seconds ? seconds.toFixed(3).replace(/\.?0+$/, '') : '';
    var total = this.asSeconds();

    if (!total) {
        // this is the same as C#'s (Noda) and python (isodate)...
        // but not other JS (goog.date)
        return 'P0D';
    }

    var totalSign = total < 0 ? '-' : '';
    var ymSign = sign(this._months) !== sign(total) ? '-' : '';
    var daysSign = sign(this._days) !== sign(total) ? '-' : '';
    var hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';

    return totalSign + 'P' +
        (Y ? ymSign + Y + 'Y' : '') +
        (M ? ymSign + M + 'M' : '') +
        (D ? daysSign + D + 'D' : '') +
        ((h || m || s) ? 'T' : '') +
        (h ? hmsSign + h + 'H' : '') +
        (m ? hmsSign + m + 'M' : '') +
        (s ? hmsSign + s + 'S' : '');
}

var proto$2 = Duration.prototype;

proto$2.isValid        = isValid$1;
proto$2.abs            = abs;
proto$2.add            = add$1;
proto$2.subtract       = subtract$1;
proto$2.as             = as;
proto$2.asMilliseconds = asMilliseconds;
proto$2.asSeconds      = asSeconds;
proto$2.asMinutes      = asMinutes;
proto$2.asHours        = asHours;
proto$2.asDays         = asDays;
proto$2.asWeeks        = asWeeks;
proto$2.asMonths       = asMonths;
proto$2.asYears        = asYears;
proto$2.valueOf        = valueOf$1;
proto$2._bubble        = bubble;
proto$2.clone          = clone$1;
proto$2.get            = get$2;
proto$2.milliseconds   = milliseconds;
proto$2.seconds        = seconds;
proto$2.minutes        = minutes;
proto$2.hours          = hours;
proto$2.days           = days;
proto$2.weeks          = weeks;
proto$2.months         = months;
proto$2.years          = years;
proto$2.humanize       = humanize;
proto$2.toISOString    = toISOString$1;
proto$2.toString       = toISOString$1;
proto$2.toJSON         = toISOString$1;
proto$2.locale         = locale;
proto$2.localeData     = localeData;

// Deprecations
proto$2.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString$1);
proto$2.lang = lang;

// Side effect imports

// FORMATTING

addFormatToken('X', 0, 0, 'unix');
addFormatToken('x', 0, 0, 'valueOf');

// PARSING

addRegexToken('x', matchSigned);
addRegexToken('X', matchTimestamp);
addParseToken('X', function (input, array, config) {
    config._d = new Date(parseFloat(input, 10) * 1000);
});
addParseToken('x', function (input, array, config) {
    config._d = new Date(toInt(input));
});

// Side effect imports


hooks.version = '2.20.1';

setHookCallback(createLocal);

hooks.fn                    = proto;
hooks.min                   = min;
hooks.max                   = max;
hooks.now                   = now;
hooks.utc                   = createUTC;
hooks.unix                  = createUnix;
hooks.months                = listMonths;
hooks.isDate                = isDate;
hooks.locale                = getSetGlobalLocale;
hooks.invalid               = createInvalid;
hooks.duration              = createDuration;
hooks.isMoment              = isMoment;
hooks.weekdays              = listWeekdays;
hooks.parseZone             = createInZone;
hooks.localeData            = getLocale;
hooks.isDuration            = isDuration;
hooks.monthsShort           = listMonthsShort;
hooks.weekdaysMin           = listWeekdaysMin;
hooks.defineLocale          = defineLocale;
hooks.updateLocale          = updateLocale;
hooks.locales               = listLocales;
hooks.weekdaysShort         = listWeekdaysShort;
hooks.normalizeUnits        = normalizeUnits;
hooks.relativeTimeRounding  = getSetRelativeTimeRounding;
hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
hooks.calendarFormat        = getCalendarFormat;
hooks.prototype             = proto;

// currently HTML5 input type only supports 24-hour formats
hooks.HTML5_FMT = {
    DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm',             // <input type="datetime-local" />
    DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss',  // <input type="datetime-local" step="1" />
    DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS',   // <input type="datetime-local" step="0.001" />
    DATE: 'YYYY-MM-DD',                             // <input type="date" />
    TIME: 'HH:mm',                                  // <input type="time" />
    TIME_SECONDS: 'HH:mm:ss',                       // <input type="time" step="1" />
    TIME_MS: 'HH:mm:ss.SSS',                        // <input type="time" step="0.001" />
    WEEK: 'YYYY-[W]WW',                             // <input type="week" />
    MONTH: 'YYYY-MM'                                // <input type="month" />
};

return hooks;

})));

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__("../../../../webpack/buildin/module.js")(module)))

/***/ }),

/***/ "../../../../webpack/buildin/module.js":
/***/ (function(module, exports) {

module.exports = function(module) {
	if(!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if(!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ })

});
//# sourceMappingURL=verificationScreen.module.chunk.js.map